
rtosProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000810c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080082ac  080082ac  000092ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800849c  0800849c  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800849c  0800849c  0000949c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084a4  080084a4  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084a4  080084a4  000094a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084a8  080084a8  000094a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080084ac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bb4  2000007c  08008528  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c30  08008528  0000ac30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a5a  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b2d  00000000  00000000  00023b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  00027638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115f  00000000  00000000  00028c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bc5  00000000  00000000  00029df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019033  00000000  00000000  0002d9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009df9b  00000000  00000000  000469ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e498a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061a0  00000000  00000000  000e49d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000eab70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008294 	.word	0x08008294

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08008294 	.word	0x08008294

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
char RxBuffer[RX_BUFFER_SIZE];
char RxChar;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
if(huart->Instance==USART2){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a07      	ldr	r2, [pc, #28]	@ (800055c <HAL_UART_RxCpltCallback+0x2c>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d108      	bne.n	8000554 <HAL_UART_RxCpltCallback+0x24>
RxBuffer[0]=RxChar;
 8000542:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <HAL_UART_RxCpltCallback+0x30>)
 8000544:	781a      	ldrb	r2, [r3, #0]
 8000546:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <HAL_UART_RxCpltCallback+0x34>)
 8000548:	701a      	strb	r2, [r3, #0]

osSemaphoreRelease(ReceiverSemHandle);
 800054a:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <HAL_UART_RxCpltCallback+0x38>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4618      	mov	r0, r3
 8000550:	f003 ff08 	bl	8004364 <osSemaphoreRelease>
}
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40004400 	.word	0x40004400
 8000560:	20000144 	.word	0x20000144
 8000564:	20000124 	.word	0x20000124
 8000568:	20000118 	.word	0x20000118

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fd38 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f880 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f93c 	bl	80007f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f910 	bl	80007a0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000580:	f000 f8e8 	bl	8000754 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000584:	f003 fb0e 	bl	8003ba4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ReceiverSem */
  ReceiverSemHandle = osSemaphoreNew(1, 0, &ReceiverSem_attributes);
 8000588:	4a24      	ldr	r2, [pc, #144]	@ (800061c <main+0xb0>)
 800058a:	2100      	movs	r1, #0
 800058c:	2001      	movs	r0, #1
 800058e:	f003 fe0d 	bl	80041ac <osSemaphoreNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a22      	ldr	r2, [pc, #136]	@ (8000620 <main+0xb4>)
 8000596:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerOnce, NULL, &myTimer01_attributes);
 8000598:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <main+0xb8>)
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	4822      	ldr	r0, [pc, #136]	@ (8000628 <main+0xbc>)
 80005a0:	f003 fc0c 	bl	8003dbc <osTimerNew>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a21      	ldr	r2, [pc, #132]	@ (800062c <main+0xc0>)
 80005a8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(char*), &myQueue01_attributes);
 80005aa:	4a21      	ldr	r2, [pc, #132]	@ (8000630 <main+0xc4>)
 80005ac:	2104      	movs	r1, #4
 80005ae:	2010      	movs	r0, #16
 80005b0:	f003 ff1c 	bl	80043ec <osMessageQueueNew>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000634 <main+0xc8>)
 80005b8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ba:	4a1f      	ldr	r2, [pc, #124]	@ (8000638 <main+0xcc>)
 80005bc:	2100      	movs	r1, #0
 80005be:	481f      	ldr	r0, [pc, #124]	@ (800063c <main+0xd0>)
 80005c0:	f003 fb3a 	bl	8003c38 <osThreadNew>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000640 <main+0xd4>)
 80005c8:	6013      	str	r3, [r2, #0]

  /* creation of Led_Handler */
  Led_HandlerHandle = osThreadNew(LED, NULL, &Led_Handler_attributes);
 80005ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000644 <main+0xd8>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	481e      	ldr	r0, [pc, #120]	@ (8000648 <main+0xdc>)
 80005d0:	f003 fb32 	bl	8003c38 <osThreadNew>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a1d      	ldr	r2, [pc, #116]	@ (800064c <main+0xe0>)
 80005d8:	6013      	str	r3, [r2, #0]

  /* creation of Message_Sender */
  Message_SenderHandle = osThreadNew(Sender, NULL, &Message_Sender_attributes);
 80005da:	4a1d      	ldr	r2, [pc, #116]	@ (8000650 <main+0xe4>)
 80005dc:	2100      	movs	r1, #0
 80005de:	481d      	ldr	r0, [pc, #116]	@ (8000654 <main+0xe8>)
 80005e0:	f003 fb2a 	bl	8003c38 <osThreadNew>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000658 <main+0xec>)
 80005e8:	6013      	str	r3, [r2, #0]

  /* creation of Message_receive */
  Message_receiveHandle = osThreadNew(Receiver, NULL, &Message_receive_attributes);
 80005ea:	4a1c      	ldr	r2, [pc, #112]	@ (800065c <main+0xf0>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	481c      	ldr	r0, [pc, #112]	@ (8000660 <main+0xf4>)
 80005f0:	f003 fb22 	bl	8003c38 <osThreadNew>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000664 <main+0xf8>)
 80005f8:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of LedEvent */
  LedEventHandle = osEventFlagsNew(&LedEvent_attributes);
 80005fa:	481b      	ldr	r0, [pc, #108]	@ (8000668 <main+0xfc>)
 80005fc:	f003 fcbf 	bl	8003f7e <osEventFlagsNew>
 8000600:	4603      	mov	r3, r0
 8000602:	4a1a      	ldr	r2, [pc, #104]	@ (800066c <main+0x100>)
 8000604:	6013      	str	r3, [r2, #0]

  /* creation of SenderEvent */
  SenderEventHandle = osEventFlagsNew(&SenderEvent_attributes);
 8000606:	481a      	ldr	r0, [pc, #104]	@ (8000670 <main+0x104>)
 8000608:	f003 fcb9 	bl	8003f7e <osEventFlagsNew>
 800060c:	4603      	mov	r3, r0
 800060e:	4a19      	ldr	r2, [pc, #100]	@ (8000674 <main+0x108>)
 8000610:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000612:	f003 faeb 	bl	8003bec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	bf00      	nop
 8000618:	e7fd      	b.n	8000616 <main+0xaa>
 800061a:	bf00      	nop
 800061c:	08008454 	.word	0x08008454
 8000620:	20000118 	.word	0x20000118
 8000624:	08008444 	.word	0x08008444
 8000628:	08000c0d 	.word	0x08000c0d
 800062c:	20000114 	.word	0x20000114
 8000630:	0800842c 	.word	0x0800842c
 8000634:	20000110 	.word	0x20000110
 8000638:	0800839c 	.word	0x0800839c
 800063c:	080008d1 	.word	0x080008d1
 8000640:	20000100 	.word	0x20000100
 8000644:	080083c0 	.word	0x080083c0
 8000648:	080008e5 	.word	0x080008e5
 800064c:	20000104 	.word	0x20000104
 8000650:	080083e4 	.word	0x080083e4
 8000654:	08000971 	.word	0x08000971
 8000658:	20000108 	.word	0x20000108
 800065c:	08008408 	.word	0x08008408
 8000660:	08000a99 	.word	0x08000a99
 8000664:	2000010c 	.word	0x2000010c
 8000668:	08008464 	.word	0x08008464
 800066c:	2000011c 	.word	0x2000011c
 8000670:	08008474 	.word	0x08008474
 8000674:	20000120 	.word	0x20000120

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	@ 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	@ 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f007 fd8c 	bl	80081a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b2a      	ldr	r3, [pc, #168]	@ (800074c <SystemClock_Config+0xd4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	4a29      	ldr	r2, [pc, #164]	@ (800074c <SystemClock_Config+0xd4>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ac:	4b27      	ldr	r3, [pc, #156]	@ (800074c <SystemClock_Config+0xd4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b24      	ldr	r3, [pc, #144]	@ (8000750 <SystemClock_Config+0xd8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c4:	4a22      	ldr	r2, [pc, #136]	@ (8000750 <SystemClock_Config+0xd8>)
 80006c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <SystemClock_Config+0xd8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006d8:	230a      	movs	r3, #10
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006f0:	2310      	movs	r3, #16
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	4618      	mov	r0, r3
 8000708:	f000 ffda 	bl	80016c0 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000712:	f000 faa5 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fa3c 	bl	8001bb0 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800073e:	f000 fa8f 	bl	8000c60 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	@ 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_RTC_Init+0x44>)
 800075a:	4a10      	ldr	r2, [pc, #64]	@ (800079c <MX_RTC_Init+0x48>)
 800075c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_RTC_Init+0x44>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_RTC_Init+0x44>)
 8000766:	227f      	movs	r2, #127	@ 0x7f
 8000768:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_RTC_Init+0x44>)
 800076c:	22ff      	movs	r2, #255	@ 0xff
 800076e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_RTC_Init+0x44>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_RTC_Init+0x44>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_RTC_Init+0x44>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_RTC_Init+0x44>)
 8000784:	f001 fd54 	bl	8002230 <HAL_RTC_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800078e:	f000 fa67 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000098 	.word	0x20000098
 800079c:	40002800 	.word	0x40002800

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <MX_USART2_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d8:	f002 f89c 	bl	8002914 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 fa3d 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000b8 	.word	0x200000b8
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a2c      	ldr	r2, [pc, #176]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b2a      	ldr	r3, [pc, #168]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a25      	ldr	r2, [pc, #148]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b23      	ldr	r3, [pc, #140]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b1f      	ldr	r3, [pc, #124]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a1e      	ldr	r2, [pc, #120]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a17      	ldr	r2, [pc, #92]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2120      	movs	r1, #32
 800087e:	4812      	ldr	r0, [pc, #72]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 8000880:	f000 feea 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	480c      	ldr	r0, [pc, #48]	@ (80008cc <MX_GPIO_Init+0xd8>)
 800089c:	f000 fd58 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a0:	2320      	movs	r3, #32
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 80008b8:	f000 fd4a 	bl	8001350 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	@ 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020800 	.word	0x40020800

080008d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80008d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008dc:	f003 fa3e 	bl	8003d5c <osDelay>
 80008e0:	e7fa      	b.n	80008d8 <StartDefaultTask+0x8>
	...

080008e4 <LED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED */
void LED(void *argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2120      	movs	r1, #32
 80008f0:	481c      	ldr	r0, [pc, #112]	@ (8000964 <LED+0x80>)
 80008f2:	f000 feb1 	bl	8001658 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {uint32_t flags=osEventFlagsWait(LedEventHandle, FLAG_1|FLAG_2|FLAG_3, osFlagsWaitAny, osWaitForever);
 80008f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000968 <LED+0x84>)
 80008f8:	6818      	ldr	r0, [r3, #0]
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	2200      	movs	r2, #0
 8000900:	2107      	movs	r1, #7
 8000902:	f003 fbee 	bl	80040e2 <osEventFlagsWait>
 8000906:	60f8      	str	r0, [r7, #12]
     osTimerStop(myTimer01Handle);//if the previous command was a toggle we need to stop the timer
 8000908:	4b18      	ldr	r3, [pc, #96]	@ (800096c <LED+0x88>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f003 faff 	bl	8003f10 <osTimerStop>
  if(flags&FLAG_1) //led on
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d005      	beq.n	8000928 <LED+0x44>
     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	2120      	movs	r1, #32
 8000920:	4810      	ldr	r0, [pc, #64]	@ (8000964 <LED+0x80>)
 8000922:	f000 fe99 	bl	8001658 <HAL_GPIO_WritePin>
 8000926:	e016      	b.n	8000956 <LED+0x72>
  else if(flags&FLAG_2) //led off
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	2b00      	cmp	r3, #0
 8000930:	d005      	beq.n	800093e <LED+0x5a>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2120      	movs	r1, #32
 8000936:	480b      	ldr	r0, [pc, #44]	@ (8000964 <LED+0x80>)
 8000938:	f000 fe8e 	bl	8001658 <HAL_GPIO_WritePin>
 800093c:	e00b      	b.n	8000956 <LED+0x72>
  else if(flags&FLAG_3)//start timer and toggle led
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	2b00      	cmp	r3, #0
 8000946:	d006      	beq.n	8000956 <LED+0x72>
	  osTimerStart(myTimer01Handle,1000);
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <LED+0x88>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000950:	4618      	mov	r0, r3
 8000952:	f003 faaf 	bl	8003eb4 <osTimerStart>
  osEventFlagsClear(LedEventHandle, flags);
 8000956:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <LED+0x84>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	68f9      	ldr	r1, [r7, #12]
 800095c:	4618      	mov	r0, r3
 800095e:	f003 fb8f 	bl	8004080 <osEventFlagsClear>
  {uint32_t flags=osEventFlagsWait(LedEventHandle, FLAG_1|FLAG_2|FLAG_3, osFlagsWaitAny, osWaitForever);
 8000962:	e7c8      	b.n	80008f6 <LED+0x12>
 8000964:	40020000 	.word	0x40020000
 8000968:	2000011c 	.word	0x2000011c
 800096c:	20000114 	.word	0x20000114

08000970 <Sender>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sender */
void Sender(void *argument)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sender */
  /* Infinite loop */
  HAL_UART_Transmit(&huart2, messages[0], strlen(messages[0]), 10);
 8000978:	4b41      	ldr	r3, [pc, #260]	@ (8000a80 <Sender+0x110>)
 800097a:	681c      	ldr	r4, [r3, #0]
 800097c:	4b40      	ldr	r3, [pc, #256]	@ (8000a80 <Sender+0x110>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fc37 	bl	80001f4 <strlen>
 8000986:	4603      	mov	r3, r0
 8000988:	b29a      	uxth	r2, r3
 800098a:	230a      	movs	r3, #10
 800098c:	4621      	mov	r1, r4
 800098e:	483d      	ldr	r0, [pc, #244]	@ (8000a84 <Sender+0x114>)
 8000990:	f002 f810 	bl	80029b4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, messages[1], strlen(messages[1]), 10);
 8000994:	4b3a      	ldr	r3, [pc, #232]	@ (8000a80 <Sender+0x110>)
 8000996:	685c      	ldr	r4, [r3, #4]
 8000998:	4b39      	ldr	r3, [pc, #228]	@ (8000a80 <Sender+0x110>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fc29 	bl	80001f4 <strlen>
 80009a2:	4603      	mov	r3, r0
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	230a      	movs	r3, #10
 80009a8:	4621      	mov	r1, r4
 80009aa:	4836      	ldr	r0, [pc, #216]	@ (8000a84 <Sender+0x114>)
 80009ac:	f002 f802 	bl	80029b4 <HAL_UART_Transmit>
  for(;;)
  {uint32_t flags=osEventFlagsWait(SenderEventHandle, FLAG_1|FLAG_2,osFlagsWaitAny, osWaitForever);
 80009b0:	4b35      	ldr	r3, [pc, #212]	@ (8000a88 <Sender+0x118>)
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
 80009b8:	2200      	movs	r2, #0
 80009ba:	2103      	movs	r1, #3
 80009bc:	f003 fb91 	bl	80040e2 <osEventFlagsWait>
 80009c0:	60f8      	str	r0, [r7, #12]
  if(flags&FLAG_1){
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d015      	beq.n	80009f8 <Sender+0x88>
	  char* c;
	  osMessageQueueGet(myQueue01Handle, &c, 0, osWaitForever);
 80009cc:	4b2f      	ldr	r3, [pc, #188]	@ (8000a8c <Sender+0x11c>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	f107 0108 	add.w	r1, r7, #8
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
 80009d8:	2200      	movs	r2, #0
 80009da:	f003 fddb 	bl	8004594 <osMessageQueueGet>
	  HAL_UART_Transmit(&huart2, c, strlen(c), 10);
 80009de:	68bc      	ldr	r4, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fc06 	bl	80001f4 <strlen>
 80009e8:	4603      	mov	r3, r0
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	230a      	movs	r3, #10
 80009ee:	4621      	mov	r1, r4
 80009f0:	4824      	ldr	r0, [pc, #144]	@ (8000a84 <Sender+0x114>)
 80009f2:	f001 ffdf 	bl	80029b4 <HAL_UART_Transmit>
 80009f6:	e03c      	b.n	8000a72 <Sender+0x102>

  }
  else if(flags&FLAG_2) //send possible commands
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d037      	beq.n	8000a72 <Sender+0x102>
  { HAL_UART_Transmit(&huart2, Commands[0], strlen(Commands[0]), 10);
 8000a02:	4b23      	ldr	r3, [pc, #140]	@ (8000a90 <Sender+0x120>)
 8000a04:	681c      	ldr	r4, [r3, #0]
 8000a06:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <Sender+0x120>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fbf2 	bl	80001f4 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	230a      	movs	r3, #10
 8000a16:	4621      	mov	r1, r4
 8000a18:	481a      	ldr	r0, [pc, #104]	@ (8000a84 <Sender+0x114>)
 8000a1a:	f001 ffcb 	bl	80029b4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, Commands[1], strlen(Commands[1]), 10);
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <Sender+0x120>)
 8000a20:	685c      	ldr	r4, [r3, #4]
 8000a22:	4b1b      	ldr	r3, [pc, #108]	@ (8000a90 <Sender+0x120>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fbe4 	bl	80001f4 <strlen>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	230a      	movs	r3, #10
 8000a32:	4621      	mov	r1, r4
 8000a34:	4813      	ldr	r0, [pc, #76]	@ (8000a84 <Sender+0x114>)
 8000a36:	f001 ffbd 	bl	80029b4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, Commands[2], strlen(Commands[2]), 10);
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <Sender+0x120>)
 8000a3c:	689c      	ldr	r4, [r3, #8]
 8000a3e:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <Sender+0x120>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fbd6 	bl	80001f4 <strlen>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	230a      	movs	r3, #10
 8000a4e:	4621      	mov	r1, r4
 8000a50:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <Sender+0x114>)
 8000a52:	f001 ffaf 	bl	80029b4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, Commands[3], strlen(Commands[3]), 10);
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <Sender+0x120>)
 8000a58:	68dc      	ldr	r4, [r3, #12]
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <Sender+0x120>)
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fbc8 	bl	80001f4 <strlen>
 8000a64:	4603      	mov	r3, r0
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	230a      	movs	r3, #10
 8000a6a:	4621      	mov	r1, r4
 8000a6c:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <Sender+0x114>)
 8000a6e:	f001 ffa1 	bl	80029b4 <HAL_UART_Transmit>
  }
  osEventFlagsClear(LedEventHandle, flags);
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <Sender+0x124>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68f9      	ldr	r1, [r7, #12]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 fb01 	bl	8004080 <osEventFlagsClear>
  {uint32_t flags=osEventFlagsWait(SenderEventHandle, FLAG_1|FLAG_2,osFlagsWaitAny, osWaitForever);
 8000a7e:	e797      	b.n	80009b0 <Sender+0x40>
 8000a80:	20000014 	.word	0x20000014
 8000a84:	200000b8 	.word	0x200000b8
 8000a88:	20000120 	.word	0x20000120
 8000a8c:	20000110 	.word	0x20000110
 8000a90:	20000000 	.word	0x20000000
 8000a94:	2000011c 	.word	0x2000011c

08000a98 <Receiver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Receiver */
void Receiver(void *argument)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Receiver */
   HAL_UART_Receive_IT(&huart2, &RxChar, 1);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4951      	ldr	r1, [pc, #324]	@ (8000be8 <Receiver+0x150>)
 8000aa4:	4851      	ldr	r0, [pc, #324]	@ (8000bec <Receiver+0x154>)
 8000aa6:	f002 f8a7 	bl	8002bf8 <HAL_UART_Receive_IT>

  /* Infinite loop */
  for(;;)
  {uint8_t i=0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	73fb      	strb	r3, [r7, #15]
  osSemaphoreAcquire(ReceiverSemHandle, osWaitForever);
 8000aae:	4b50      	ldr	r3, [pc, #320]	@ (8000bf0 <Receiver+0x158>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f003 fc02 	bl	80042c0 <osSemaphoreAcquire>
  HAL_StatusTypeDef status;
  do {
      status = HAL_UART_Receive(&huart2, (uint8_t *)&RxChar, 1, 10);
 8000abc:	230a      	movs	r3, #10
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4949      	ldr	r1, [pc, #292]	@ (8000be8 <Receiver+0x150>)
 8000ac2:	484a      	ldr	r0, [pc, #296]	@ (8000bec <Receiver+0x154>)
 8000ac4:	f002 f801 	bl	8002aca <HAL_UART_Receive>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	73bb      	strb	r3, [r7, #14]
      if (status == HAL_OK && i < RX_BUFFER_SIZE - 1) {
 8000acc:	7bbb      	ldrb	r3, [r7, #14]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10a      	bne.n	8000ae8 <Receiver+0x50>
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	2b1e      	cmp	r3, #30
 8000ad6:	d807      	bhi.n	8000ae8 <Receiver+0x50>
    	  i++;
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	3301      	adds	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
          RxBuffer[i] = RxChar;
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	4a41      	ldr	r2, [pc, #260]	@ (8000be8 <Receiver+0x150>)
 8000ae2:	7811      	ldrb	r1, [r2, #0]
 8000ae4:	4a43      	ldr	r2, [pc, #268]	@ (8000bf4 <Receiver+0x15c>)
 8000ae6:	54d1      	strb	r1, [r2, r3]
      }
  } while (status == HAL_OK && i < RX_BUFFER_SIZE - 1);
 8000ae8:	7bbb      	ldrb	r3, [r7, #14]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <Receiver+0x5c>
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	2b1e      	cmp	r3, #30
 8000af2:	d9e3      	bls.n	8000abc <Receiver+0x24>
  RxBuffer[i+1] = '\0';
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	3301      	adds	r3, #1
 8000af8:	4a3e      	ldr	r2, [pc, #248]	@ (8000bf4 <Receiver+0x15c>)
 8000afa:	2100      	movs	r1, #0
 8000afc:	54d1      	strb	r1, [r2, r3]
  if(strncmp(RxBuffer,Commands[0],6)==0)//led on
 8000afe:	4b3e      	ldr	r3, [pc, #248]	@ (8000bf8 <Receiver+0x160>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2206      	movs	r2, #6
 8000b04:	4619      	mov	r1, r3
 8000b06:	483b      	ldr	r0, [pc, #236]	@ (8000bf4 <Receiver+0x15c>)
 8000b08:	f007 fb54 	bl	80081b4 <strncmp>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d106      	bne.n	8000b20 <Receiver+0x88>
	  osEventFlagsSet(LedEventHandle, FLAG_1);
 8000b12:	4b3a      	ldr	r3, [pc, #232]	@ (8000bfc <Receiver+0x164>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2101      	movs	r1, #1
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 fa6f 	bl	8003ffc <osEventFlagsSet>
 8000b1e:	e05d      	b.n	8000bdc <Receiver+0x144>
  else if(strncmp(RxBuffer,Commands[1],7)==0)//led off
 8000b20:	4b35      	ldr	r3, [pc, #212]	@ (8000bf8 <Receiver+0x160>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	2207      	movs	r2, #7
 8000b26:	4619      	mov	r1, r3
 8000b28:	4832      	ldr	r0, [pc, #200]	@ (8000bf4 <Receiver+0x15c>)
 8000b2a:	f007 fb43 	bl	80081b4 <strncmp>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d106      	bne.n	8000b42 <Receiver+0xaa>
	  osEventFlagsSet(LedEventHandle, FLAG_2);
 8000b34:	4b31      	ldr	r3, [pc, #196]	@ (8000bfc <Receiver+0x164>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2102      	movs	r1, #2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fa5e 	bl	8003ffc <osEventFlagsSet>
 8000b40:	e04c      	b.n	8000bdc <Receiver+0x144>
  else if(strncmp(RxBuffer,Commands[2],10)==0)//toggle led
 8000b42:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf8 <Receiver+0x160>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	220a      	movs	r2, #10
 8000b48:	4619      	mov	r1, r3
 8000b4a:	482a      	ldr	r0, [pc, #168]	@ (8000bf4 <Receiver+0x15c>)
 8000b4c:	f007 fb32 	bl	80081b4 <strncmp>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d106      	bne.n	8000b64 <Receiver+0xcc>
	  osEventFlagsSet(LedEventHandle, FLAG_3);
 8000b56:	4b29      	ldr	r3, [pc, #164]	@ (8000bfc <Receiver+0x164>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fa4d 	bl	8003ffc <osEventFlagsSet>
 8000b62:	e03b      	b.n	8000bdc <Receiver+0x144>
  else if((strncmp(RxBuffer,Commands[3],4)==0))//echo
 8000b64:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <Receiver+0x160>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	2204      	movs	r2, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4821      	ldr	r0, [pc, #132]	@ (8000bf4 <Receiver+0x15c>)
 8000b6e:	f007 fb21 	bl	80081b4 <strncmp>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d122      	bne.n	8000bbe <Receiver+0x126>
  { osEventFlagsSet(SenderEventHandle, FLAG_1);
 8000b78:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <Receiver+0x168>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f003 fa3c 	bl	8003ffc <osEventFlagsSet>
  	  char* c=(char*)malloc((i-4)*sizeof(char));
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	3b04      	subs	r3, #4
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f007 fa55 	bl	8008038 <malloc>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	60bb      	str	r3, [r7, #8]
  	  strncpy(c,RxBuffer+5,i-4);
 8000b92:	68b8      	ldr	r0, [r7, #8]
 8000b94:	491b      	ldr	r1, [pc, #108]	@ (8000c04 <Receiver+0x16c>)
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	3b04      	subs	r3, #4
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	f007 fb1c 	bl	80081d8 <strncpy>
  	  c[i-4]='\0';
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	3b04      	subs	r3, #4
 8000ba6:	4413      	add	r3, r2
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
       osMessageQueuePut(myQueue01Handle, &c, 0, 0);}//if we received echo the custom message start from the index 5
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <Receiver+0x170>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	f107 0108 	add.w	r1, r7, #8
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f003 fc8c 	bl	80044d4 <osMessageQueuePut>
 8000bbc:	e00e      	b.n	8000bdc <Receiver+0x144>

  else if(strcmp(RxBuffer,Commands[4])==0) //help
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <Receiver+0x160>)
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480b      	ldr	r0, [pc, #44]	@ (8000bf4 <Receiver+0x15c>)
 8000bc6:	f7ff fb0b 	bl	80001e0 <strcmp>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d105      	bne.n	8000bdc <Receiver+0x144>
	  osEventFlagsSet(SenderEventHandle,FLAG_2);
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <Receiver+0x168>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 fa10 	bl	8003ffc <osEventFlagsSet>
  HAL_UART_Receive_IT(&huart2, &RxChar, 1);//restart the receiving
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4902      	ldr	r1, [pc, #8]	@ (8000be8 <Receiver+0x150>)
 8000be0:	4802      	ldr	r0, [pc, #8]	@ (8000bec <Receiver+0x154>)
 8000be2:	f002 f809 	bl	8002bf8 <HAL_UART_Receive_IT>
  {uint8_t i=0;
 8000be6:	e760      	b.n	8000aaa <Receiver+0x12>
 8000be8:	20000144 	.word	0x20000144
 8000bec:	200000b8 	.word	0x200000b8
 8000bf0:	20000118 	.word	0x20000118
 8000bf4:	20000124 	.word	0x20000124
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	2000011c 	.word	0x2000011c
 8000c00:	20000120 	.word	0x20000120
 8000c04:	20000129 	.word	0x20000129
 8000c08:	20000110 	.word	0x20000110

08000c0c <Callback01>:
  /* USER CODE END Receiver */
}}

/* Callback01 function */
void Callback01(void *argument)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c14:	2120      	movs	r1, #32
 8000c16:	4807      	ldr	r0, [pc, #28]	@ (8000c34 <Callback01+0x28>)
 8000c18:	f000 fd37 	bl	800168a <HAL_GPIO_TogglePin>
	osTimerStart(myTimer01Handle, 1000);
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <Callback01+0x2c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 f945 	bl	8003eb4 <osTimerStart>
  /* USER CODE END Callback01 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40020000 	.word	0x40020000
 8000c38:	20000114 	.word	0x20000114

08000c3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d101      	bne.n	8000c52 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c4e:	f000 f9eb 	bl	8001028 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40010000 	.word	0x40010000

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <Error_Handler+0x8>

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_MspInit+0x54>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7a:	4a11      	ldr	r2, [pc, #68]	@ (8000cc0 <HAL_MspInit+0x54>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <HAL_MspInit+0x54>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <HAL_MspInit+0x54>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <HAL_MspInit+0x54>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <HAL_MspInit+0x54>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	210f      	movs	r1, #15
 8000cae:	f06f 0001 	mvn.w	r0, #1
 8000cb2:	f000 fa91 	bl	80011d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8000d14 <HAL_RTC_MspInit+0x50>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d111      	bne.n	8000d0a <HAL_RTC_MspInit+0x46>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cee:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 f9ad 	bl	8002054 <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000d00:	f7ff ffae 	bl	8000c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d04:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <HAL_RTC_MspInit+0x54>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40002800 	.word	0x40002800
 8000d18:	42470e3c 	.word	0x42470e3c

08000d1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	@ 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1d      	ldr	r2, [pc, #116]	@ (8000db0 <HAL_UART_MspInit+0x94>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d133      	bne.n	8000da6 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <HAL_UART_MspInit+0x98>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	4a1b      	ldr	r2, [pc, #108]	@ (8000db4 <HAL_UART_MspInit+0x98>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4e:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <HAL_UART_MspInit+0x98>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <HAL_UART_MspInit+0x98>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a14      	ldr	r2, [pc, #80]	@ (8000db4 <HAL_UART_MspInit+0x98>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <HAL_UART_MspInit+0x98>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d76:	230c      	movs	r3, #12
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d86:	2307      	movs	r3, #7
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4809      	ldr	r0, [pc, #36]	@ (8000db8 <HAL_UART_MspInit+0x9c>)
 8000d92:	f000 fadd 	bl	8001350 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2105      	movs	r1, #5
 8000d9a:	2026      	movs	r0, #38	@ 0x26
 8000d9c:	f000 fa1c 	bl	80011d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000da0:	2026      	movs	r0, #38	@ 0x26
 8000da2:	f000 fa35 	bl	8001210 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	@ 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40004400 	.word	0x40004400
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000

08000dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	@ 0x30
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e8c <HAL_InitTick+0xd0>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd4:	4a2d      	ldr	r2, [pc, #180]	@ (8000e8c <HAL_InitTick+0xd0>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8000e8c <HAL_InitTick+0xd0>)
 8000dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000de8:	f107 020c 	add.w	r2, r7, #12
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f001 f8fc 	bl	8001ff0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000df8:	f001 f8e6 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 8000dfc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e00:	4a23      	ldr	r2, [pc, #140]	@ (8000e90 <HAL_InitTick+0xd4>)
 8000e02:	fba2 2303 	umull	r2, r3, r2, r3
 8000e06:	0c9b      	lsrs	r3, r3, #18
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e0c:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <HAL_InitTick+0xd8>)
 8000e0e:	4a22      	ldr	r2, [pc, #136]	@ (8000e98 <HAL_InitTick+0xdc>)
 8000e10:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e12:	4b20      	ldr	r3, [pc, #128]	@ (8000e94 <HAL_InitTick+0xd8>)
 8000e14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000e94 <HAL_InitTick+0xd8>)
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <HAL_InitTick+0xd8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <HAL_InitTick+0xd8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <HAL_InitTick+0xd8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e32:	4818      	ldr	r0, [pc, #96]	@ (8000e94 <HAL_InitTick+0xd8>)
 8000e34:	f001 fb00 	bl	8002438 <HAL_TIM_Base_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d11b      	bne.n	8000e7e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e46:	4813      	ldr	r0, [pc, #76]	@ (8000e94 <HAL_InitTick+0xd8>)
 8000e48:	f001 fb50 	bl	80024ec <HAL_TIM_Base_Start_IT>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d111      	bne.n	8000e7e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e5a:	2019      	movs	r0, #25
 8000e5c:	f000 f9d8 	bl	8001210 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b0f      	cmp	r3, #15
 8000e64:	d808      	bhi.n	8000e78 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e66:	2200      	movs	r2, #0
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	2019      	movs	r0, #25
 8000e6c:	f000 f9b4 	bl	80011d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e70:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <HAL_InitTick+0xe0>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e002      	b.n	8000e7e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3730      	adds	r7, #48	@ 0x30
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	431bde83 	.word	0x431bde83
 8000e94:	20000148 	.word	0x20000148
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	20000020 	.word	0x20000020

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ede:	f001 fb67 	bl	80025b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000148 	.word	0x20000148

08000eec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <USART2_IRQHandler+0x10>)
 8000ef2:	f001 fea7 	bl	8002c44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000b8 	.word	0x200000b8

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	@ (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f007 f976 	bl	8008220 <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20018000 	.word	0x20018000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	20000190 	.word	0x20000190
 8000f68:	20004c30 	.word	0x20004c30

08000f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f94:	f7ff ffea 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f007 f935 	bl	800822c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc2:	f7ff fad3 	bl	800056c <main>
  bx  lr    
 8000fc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fd4:	080084ac 	.word	0x080084ac
  ldr r2, =_sbss
 8000fd8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000fdc:	20004c30 	.word	0x20004c30

08000fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <HAL_Init+0x40>)
 8000fee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <HAL_Init+0x40>)
 8000ffa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	@ (8001024 <HAL_Init+0x40>)
 8001006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f8d8 	bl	80011c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	200f      	movs	r0, #15
 8001014:	f7ff fed2 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff fe28 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023c00 	.word	0x40023c00

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000024 	.word	0x20000024
 800104c:	20000194 	.word	0x20000194

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000194 	.word	0x20000194

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	@ (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4907      	ldr	r1, [pc, #28]	@ (8001104 <__NVIC_EnableIRQ+0x38>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	@ (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	@ 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff4c 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ea:	f7ff ff61 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 80011ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	6978      	ldr	r0, [r7, #20]
 80011f6:	f7ff ffb1 	bl	800115c <NVIC_EncodePriority>
 80011fa:	4602      	mov	r2, r0
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff80 	bl	8001108 <__NVIC_SetPriority>
}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff54 	bl	80010cc <__NVIC_EnableIRQ>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001238:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800123a:	f7ff ff09 	bl	8001050 <HAL_GetTick>
 800123e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d008      	beq.n	800125e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2280      	movs	r2, #128	@ 0x80
 8001250:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e052      	b.n	8001304 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0216 	bic.w	r2, r2, #22
 800126c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	695a      	ldr	r2, [r3, #20]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800127c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	2b00      	cmp	r3, #0
 8001284:	d103      	bne.n	800128e <HAL_DMA_Abort+0x62>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800128a:	2b00      	cmp	r3, #0
 800128c:	d007      	beq.n	800129e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0208 	bic.w	r2, r2, #8
 800129c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ae:	e013      	b.n	80012d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012b0:	f7ff fece 	bl	8001050 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	d90c      	bls.n	80012d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2220      	movs	r2, #32
 80012c2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2203      	movs	r2, #3
 80012c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e015      	b.n	8001304 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1e4      	bne.n	80012b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ea:	223f      	movs	r2, #63	@ 0x3f
 80012ec:	409a      	lsls	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d004      	beq.n	800132a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2280      	movs	r2, #128	@ 0x80
 8001324:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00c      	b.n	8001344 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2205      	movs	r2, #5
 800132e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0201 	bic.w	r2, r2, #1
 8001340:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	@ 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e159      	b.n	8001620 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800136c:	2201      	movs	r2, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	429a      	cmp	r2, r3
 8001386:	f040 8148 	bne.w	800161a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d005      	beq.n	80013a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d130      	bne.n	8001404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d8:	2201      	movs	r2, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 0201 	and.w	r2, r3, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b03      	cmp	r3, #3
 800140e:	d017      	beq.n	8001440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d123      	bne.n	8001494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	08da      	lsrs	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3208      	adds	r2, #8
 8001454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	69b9      	ldr	r1, [r7, #24]
 8001490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0203 	and.w	r2, r3, #3
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80a2 	beq.w	800161a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b57      	ldr	r3, [pc, #348]	@ (8001638 <HAL_GPIO_Init+0x2e8>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	4a56      	ldr	r2, [pc, #344]	@ (8001638 <HAL_GPIO_Init+0x2e8>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e6:	4b54      	ldr	r3, [pc, #336]	@ (8001638 <HAL_GPIO_Init+0x2e8>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f2:	4a52      	ldr	r2, [pc, #328]	@ (800163c <HAL_GPIO_Init+0x2ec>)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	220f      	movs	r2, #15
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a49      	ldr	r2, [pc, #292]	@ (8001640 <HAL_GPIO_Init+0x2f0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d019      	beq.n	8001552 <HAL_GPIO_Init+0x202>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a48      	ldr	r2, [pc, #288]	@ (8001644 <HAL_GPIO_Init+0x2f4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_GPIO_Init+0x1fe>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a47      	ldr	r2, [pc, #284]	@ (8001648 <HAL_GPIO_Init+0x2f8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d00d      	beq.n	800154a <HAL_GPIO_Init+0x1fa>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a46      	ldr	r2, [pc, #280]	@ (800164c <HAL_GPIO_Init+0x2fc>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d007      	beq.n	8001546 <HAL_GPIO_Init+0x1f6>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a45      	ldr	r2, [pc, #276]	@ (8001650 <HAL_GPIO_Init+0x300>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <HAL_GPIO_Init+0x1f2>
 800153e:	2304      	movs	r3, #4
 8001540:	e008      	b.n	8001554 <HAL_GPIO_Init+0x204>
 8001542:	2307      	movs	r3, #7
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x204>
 8001546:	2303      	movs	r3, #3
 8001548:	e004      	b.n	8001554 <HAL_GPIO_Init+0x204>
 800154a:	2302      	movs	r3, #2
 800154c:	e002      	b.n	8001554 <HAL_GPIO_Init+0x204>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <HAL_GPIO_Init+0x204>
 8001552:	2300      	movs	r3, #0
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	f002 0203 	and.w	r2, r2, #3
 800155a:	0092      	lsls	r2, r2, #2
 800155c:	4093      	lsls	r3, r2
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001564:	4935      	ldr	r1, [pc, #212]	@ (800163c <HAL_GPIO_Init+0x2ec>)
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	3302      	adds	r3, #2
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001572:	4b38      	ldr	r3, [pc, #224]	@ (8001654 <HAL_GPIO_Init+0x304>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001596:	4a2f      	ldr	r2, [pc, #188]	@ (8001654 <HAL_GPIO_Init+0x304>)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800159c:	4b2d      	ldr	r3, [pc, #180]	@ (8001654 <HAL_GPIO_Init+0x304>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c0:	4a24      	ldr	r2, [pc, #144]	@ (8001654 <HAL_GPIO_Init+0x304>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015c6:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <HAL_GPIO_Init+0x304>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001654 <HAL_GPIO_Init+0x304>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <HAL_GPIO_Init+0x304>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001614:	4a0f      	ldr	r2, [pc, #60]	@ (8001654 <HAL_GPIO_Init+0x304>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3301      	adds	r3, #1
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	2b0f      	cmp	r3, #15
 8001624:	f67f aea2 	bls.w	800136c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3724      	adds	r7, #36	@ 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40013800 	.word	0x40013800
 8001640:	40020000 	.word	0x40020000
 8001644:	40020400 	.word	0x40020400
 8001648:	40020800 	.word	0x40020800
 800164c:	40020c00 	.word	0x40020c00
 8001650:	40021000 	.word	0x40021000
 8001654:	40013c00 	.word	0x40013c00

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800169c:	887a      	ldrh	r2, [r7, #2]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	041a      	lsls	r2, r3, #16
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	400b      	ands	r3, r1
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	619a      	str	r2, [r3, #24]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e267      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d075      	beq.n	80017ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016de:	4b88      	ldr	r3, [pc, #544]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d00c      	beq.n	8001704 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ea:	4b85      	ldr	r3, [pc, #532]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d112      	bne.n	800171c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f6:	4b82      	ldr	r3, [pc, #520]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001702:	d10b      	bne.n	800171c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	4b7e      	ldr	r3, [pc, #504]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d05b      	beq.n	80017c8 <HAL_RCC_OscConfig+0x108>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d157      	bne.n	80017c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e242      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001724:	d106      	bne.n	8001734 <HAL_RCC_OscConfig+0x74>
 8001726:	4b76      	ldr	r3, [pc, #472]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a75      	ldr	r2, [pc, #468]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e01d      	b.n	8001770 <HAL_RCC_OscConfig+0xb0>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x98>
 800173e:	4b70      	ldr	r3, [pc, #448]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6f      	ldr	r2, [pc, #444]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b6d      	ldr	r3, [pc, #436]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6c      	ldr	r2, [pc, #432]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e00b      	b.n	8001770 <HAL_RCC_OscConfig+0xb0>
 8001758:	4b69      	ldr	r3, [pc, #420]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a68      	ldr	r2, [pc, #416]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 800175e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b66      	ldr	r3, [pc, #408]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a65      	ldr	r2, [pc, #404]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 800176a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800176e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d013      	beq.n	80017a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fc6a 	bl	8001050 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fc66 	bl	8001050 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	@ 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e207      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b5b      	ldr	r3, [pc, #364]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0xc0>
 800179e:	e014      	b.n	80017ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fc56 	bl	8001050 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff fc52 	bl	8001050 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	@ 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e1f3      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ba:	4b51      	ldr	r3, [pc, #324]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0xe8>
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d063      	beq.n	800189e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00b      	beq.n	80017fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e2:	4b47      	ldr	r3, [pc, #284]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d11c      	bne.n	8001828 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ee:	4b44      	ldr	r3, [pc, #272]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d116      	bne.n	8001828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	4b41      	ldr	r3, [pc, #260]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_RCC_OscConfig+0x152>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d001      	beq.n	8001812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e1c7      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001812:	4b3b      	ldr	r3, [pc, #236]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4937      	ldr	r1, [pc, #220]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001826:	e03a      	b.n	800189e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001830:	4b34      	ldr	r3, [pc, #208]	@ (8001904 <HAL_RCC_OscConfig+0x244>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff fc0b 	bl	8001050 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183e:	f7ff fc07 	bl	8001050 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e1a8      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185c:	4b28      	ldr	r3, [pc, #160]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4925      	ldr	r1, [pc, #148]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
 8001870:	e015      	b.n	800189e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <HAL_RCC_OscConfig+0x244>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fbea 	bl	8001050 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001880:	f7ff fbe6 	bl	8001050 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e187      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001892:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d036      	beq.n	8001918 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d016      	beq.n	80018e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b2:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <HAL_RCC_OscConfig+0x248>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff fbca 	bl	8001050 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c0:	f7ff fbc6 	bl	8001050 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e167      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80018d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x200>
 80018de:	e01b      	b.n	8001918 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e0:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <HAL_RCC_OscConfig+0x248>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e6:	f7ff fbb3 	bl	8001050 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	e00e      	b.n	800190c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ee:	f7ff fbaf 	bl	8001050 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d907      	bls.n	800190c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e150      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
 8001900:	40023800 	.word	0x40023800
 8001904:	42470000 	.word	0x42470000
 8001908:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	4b88      	ldr	r3, [pc, #544]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 800190e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1ea      	bne.n	80018ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 8097 	beq.w	8001a54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192a:	4b81      	ldr	r3, [pc, #516]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10f      	bne.n	8001956 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	4b7d      	ldr	r3, [pc, #500]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	4a7c      	ldr	r2, [pc, #496]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	@ 0x40
 8001946:	4b7a      	ldr	r3, [pc, #488]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001952:	2301      	movs	r3, #1
 8001954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	4b77      	ldr	r3, [pc, #476]	@ (8001b34 <HAL_RCC_OscConfig+0x474>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d118      	bne.n	8001994 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001962:	4b74      	ldr	r3, [pc, #464]	@ (8001b34 <HAL_RCC_OscConfig+0x474>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a73      	ldr	r2, [pc, #460]	@ (8001b34 <HAL_RCC_OscConfig+0x474>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196e:	f7ff fb6f 	bl	8001050 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001976:	f7ff fb6b 	bl	8001050 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e10c      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	4b6a      	ldr	r3, [pc, #424]	@ (8001b34 <HAL_RCC_OscConfig+0x474>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d106      	bne.n	80019aa <HAL_RCC_OscConfig+0x2ea>
 800199c:	4b64      	ldr	r3, [pc, #400]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a0:	4a63      	ldr	r2, [pc, #396]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80019a8:	e01c      	b.n	80019e4 <HAL_RCC_OscConfig+0x324>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x30c>
 80019b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80019be:	4b5c      	ldr	r3, [pc, #368]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ca:	e00b      	b.n	80019e4 <HAL_RCC_OscConfig+0x324>
 80019cc:	4b58      	ldr	r3, [pc, #352]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d0:	4a57      	ldr	r2, [pc, #348]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80019d8:	4b55      	ldr	r3, [pc, #340]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019dc:	4a54      	ldr	r2, [pc, #336]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019de:	f023 0304 	bic.w	r3, r3, #4
 80019e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d015      	beq.n	8001a18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ec:	f7ff fb30 	bl	8001050 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f4:	f7ff fb2c 	bl	8001050 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e0cb      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0a:	4b49      	ldr	r3, [pc, #292]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0ee      	beq.n	80019f4 <HAL_RCC_OscConfig+0x334>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a18:	f7ff fb1a 	bl	8001050 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a20:	f7ff fb16 	bl	8001050 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e0b5      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a36:	4b3e      	ldr	r3, [pc, #248]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1ee      	bne.n	8001a20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d105      	bne.n	8001a54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a48:	4b39      	ldr	r3, [pc, #228]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	4a38      	ldr	r2, [pc, #224]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80a1 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a5e:	4b34      	ldr	r3, [pc, #208]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d05c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d141      	bne.n	8001af6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a72:	4b31      	ldr	r3, [pc, #196]	@ (8001b38 <HAL_RCC_OscConfig+0x478>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff faea 	bl	8001050 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff fae6 	bl	8001050 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e087      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a92:	4b27      	ldr	r3, [pc, #156]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69da      	ldr	r2, [r3, #28]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aac:	019b      	lsls	r3, r3, #6
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	041b      	lsls	r3, r3, #16
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	491b      	ldr	r1, [pc, #108]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <HAL_RCC_OscConfig+0x478>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7ff fabf 	bl	8001050 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff fabb 	bl	8001050 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e05c      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae8:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x416>
 8001af4:	e054      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <HAL_RCC_OscConfig+0x478>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff faa8 	bl	8001050 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff faa4 	bl	8001050 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e045      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x444>
 8001b22:	e03d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e038      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40007000 	.word	0x40007000
 8001b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <HAL_RCC_OscConfig+0x4ec>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d028      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d121      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d11a      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d111      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b82:	085b      	lsrs	r3, r3, #1
 8001b84:	3b01      	subs	r3, #1
 8001b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0cc      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b68      	ldr	r3, [pc, #416]	@ (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d90c      	bls.n	8001bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b65      	ldr	r3, [pc, #404]	@ (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b63      	ldr	r3, [pc, #396]	@ (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0b8      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c04:	4b59      	ldr	r3, [pc, #356]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4a58      	ldr	r2, [pc, #352]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c1c:	4b53      	ldr	r3, [pc, #332]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4a52      	ldr	r2, [pc, #328]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	4b50      	ldr	r3, [pc, #320]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	494d      	ldr	r1, [pc, #308]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d044      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b47      	ldr	r3, [pc, #284]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d119      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e07f      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e06f      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e067      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8e:	4b37      	ldr	r3, [pc, #220]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f023 0203 	bic.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4934      	ldr	r1, [pc, #208]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca0:	f7ff f9d6 	bl	8001050 <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca8:	f7ff f9d2 	bl	8001050 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e04f      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 020c 	and.w	r2, r3, #12
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d1eb      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b25      	ldr	r3, [pc, #148]	@ (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d20c      	bcs.n	8001cf8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b22      	ldr	r3, [pc, #136]	@ (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e032      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d04:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4916      	ldr	r1, [pc, #88]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d22:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	490e      	ldr	r1, [pc, #56]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d36:	f000 f821 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	490a      	ldr	r1, [pc, #40]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	5ccb      	ldrb	r3, [r1, r3]
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	4a09      	ldr	r2, [pc, #36]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d52:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f830 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023c00 	.word	0x40023c00
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	08008484 	.word	0x08008484
 8001d74:	2000001c 	.word	0x2000001c
 8001d78:	20000020 	.word	0x20000020

08001d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d80:	b094      	sub	sp, #80	@ 0x50
 8001d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d94:	4b79      	ldr	r3, [pc, #484]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d00d      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x40>
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	f200 80e1 	bhi.w	8001f68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x34>
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d003      	beq.n	8001db6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dae:	e0db      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001db0:	4b73      	ldr	r3, [pc, #460]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x204>)
 8001db2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001db4:	e0db      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001db6:	4b73      	ldr	r3, [pc, #460]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x208>)
 8001db8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dba:	e0d8      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001dc4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d063      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	099b      	lsrs	r3, r3, #6
 8001dd8:	2200      	movs	r2, #0
 8001dda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ddc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001de6:	2300      	movs	r3, #0
 8001de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001dee:	4622      	mov	r2, r4
 8001df0:	462b      	mov	r3, r5
 8001df2:	f04f 0000 	mov.w	r0, #0
 8001df6:	f04f 0100 	mov.w	r1, #0
 8001dfa:	0159      	lsls	r1, r3, #5
 8001dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e00:	0150      	lsls	r0, r2, #5
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4621      	mov	r1, r4
 8001e08:	1a51      	subs	r1, r2, r1
 8001e0a:	6139      	str	r1, [r7, #16]
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e20:	4659      	mov	r1, fp
 8001e22:	018b      	lsls	r3, r1, #6
 8001e24:	4651      	mov	r1, sl
 8001e26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e2a:	4651      	mov	r1, sl
 8001e2c:	018a      	lsls	r2, r1, #6
 8001e2e:	4651      	mov	r1, sl
 8001e30:	ebb2 0801 	subs.w	r8, r2, r1
 8001e34:	4659      	mov	r1, fp
 8001e36:	eb63 0901 	sbc.w	r9, r3, r1
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e4e:	4690      	mov	r8, r2
 8001e50:	4699      	mov	r9, r3
 8001e52:	4623      	mov	r3, r4
 8001e54:	eb18 0303 	adds.w	r3, r8, r3
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	462b      	mov	r3, r5
 8001e5c:	eb49 0303 	adc.w	r3, r9, r3
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e6e:	4629      	mov	r1, r5
 8001e70:	024b      	lsls	r3, r1, #9
 8001e72:	4621      	mov	r1, r4
 8001e74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e78:	4621      	mov	r1, r4
 8001e7a:	024a      	lsls	r2, r1, #9
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e82:	2200      	movs	r2, #0
 8001e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e8c:	f7fe f9ba 	bl	8000204 <__aeabi_uldivmod>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4613      	mov	r3, r2
 8001e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e98:	e058      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9a:	4b38      	ldr	r3, [pc, #224]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	099b      	lsrs	r3, r3, #6
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001eb4:	4642      	mov	r2, r8
 8001eb6:	464b      	mov	r3, r9
 8001eb8:	f04f 0000 	mov.w	r0, #0
 8001ebc:	f04f 0100 	mov.w	r1, #0
 8001ec0:	0159      	lsls	r1, r3, #5
 8001ec2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ec6:	0150      	lsls	r0, r2, #5
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4641      	mov	r1, r8
 8001ece:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ed2:	4649      	mov	r1, r9
 8001ed4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ee4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ee8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eec:	ebb2 040a 	subs.w	r4, r2, sl
 8001ef0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	00eb      	lsls	r3, r5, #3
 8001efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f02:	00e2      	lsls	r2, r4, #3
 8001f04:	4614      	mov	r4, r2
 8001f06:	461d      	mov	r5, r3
 8001f08:	4643      	mov	r3, r8
 8001f0a:	18e3      	adds	r3, r4, r3
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	464b      	mov	r3, r9
 8001f10:	eb45 0303 	adc.w	r3, r5, r3
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f22:	4629      	mov	r1, r5
 8001f24:	028b      	lsls	r3, r1, #10
 8001f26:	4621      	mov	r1, r4
 8001f28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	028a      	lsls	r2, r1, #10
 8001f30:	4610      	mov	r0, r2
 8001f32:	4619      	mov	r1, r3
 8001f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f36:	2200      	movs	r2, #0
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	61fa      	str	r2, [r7, #28]
 8001f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f40:	f7fe f960 	bl	8000204 <__aeabi_uldivmod>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4613      	mov	r3, r2
 8001f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	3301      	adds	r3, #1
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001f5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f66:	e002      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3750      	adds	r7, #80	@ 0x50
 8001f74:	46bd      	mov	sp, r7
 8001f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	00f42400 	.word	0x00f42400
 8001f84:	007a1200 	.word	0x007a1200

08001f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	2000001c 	.word	0x2000001c

08001fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fa4:	f7ff fff0 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	0a9b      	lsrs	r3, r3, #10
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4903      	ldr	r1, [pc, #12]	@ (8001fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	08008494 	.word	0x08008494

08001fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fcc:	f7ff ffdc 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0b5b      	lsrs	r3, r3, #13
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4903      	ldr	r1, [pc, #12]	@ (8001fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	08008494 	.word	0x08008494

08001ff0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002000:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_RCC_GetClockConfig+0x5c>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0203 	and.w	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800200c:	4b0f      	ldr	r3, [pc, #60]	@ (800204c <HAL_RCC_GetClockConfig+0x5c>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002018:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <HAL_RCC_GetClockConfig+0x5c>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002024:	4b09      	ldr	r3, [pc, #36]	@ (800204c <HAL_RCC_GetClockConfig+0x5c>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	08db      	lsrs	r3, r3, #3
 800202a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002032:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <HAL_RCC_GetClockConfig+0x60>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0207 	and.w	r2, r3, #7
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	601a      	str	r2, [r3, #0]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40023c00 	.word	0x40023c00

08002054 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002078:	2b00      	cmp	r3, #0
 800207a:	d035      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800207c:	4b67      	ldr	r3, [pc, #412]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002082:	f7fe ffe5 	bl	8001050 <HAL_GetTick>
 8002086:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002088:	e008      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800208a:	f7fe ffe1 	bl	8001050 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e0ba      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800209c:	4b60      	ldr	r3, [pc, #384]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	019a      	lsls	r2, r3, #6
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	071b      	lsls	r3, r3, #28
 80020b4:	495a      	ldr	r1, [pc, #360]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020bc:	4b57      	ldr	r3, [pc, #348]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020c2:	f7fe ffc5 	bl	8001050 <HAL_GetTick>
 80020c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020ca:	f7fe ffc1 	bl	8001050 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e09a      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020dc:	4b50      	ldr	r3, [pc, #320]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8083 	beq.w	80021fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b49      	ldr	r3, [pc, #292]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	4a48      	ldr	r2, [pc, #288]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	@ 0x40
 8002106:	4b46      	ldr	r3, [pc, #280]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002112:	4b44      	ldr	r3, [pc, #272]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a43      	ldr	r2, [pc, #268]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800211c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800211e:	f7fe ff97 	bl	8001050 <HAL_GetTick>
 8002122:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002126:	f7fe ff93 	bl	8001050 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e06c      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002138:	4b3a      	ldr	r3, [pc, #232]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002144:	4b36      	ldr	r3, [pc, #216]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800214c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d02f      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	429a      	cmp	r2, r3
 8002160:	d028      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002162:	4b2f      	ldr	r3, [pc, #188]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800216a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800216c:	4b2e      	ldr	r3, [pc, #184]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002172:	4b2d      	ldr	r3, [pc, #180]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002178:	4a29      	ldr	r2, [pc, #164]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800217e:	4b28      	ldr	r3, [pc, #160]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d114      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800218a:	f7fe ff61 	bl	8001050 <HAL_GetTick>
 800218e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	e00a      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe ff5d 	bl	8001050 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e034      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ee      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80021c0:	d10d      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80021c2:	4b17      	ldr	r3, [pc, #92]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80021d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d6:	4912      	ldr	r1, [pc, #72]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]
 80021dc:	e005      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 80021de:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021e4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80021e8:	6093      	str	r3, [r2, #8]
 80021ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f6:	490a      	ldr	r1, [pc, #40]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7c1a      	ldrb	r2, [r3, #16]
 800220c:	4b07      	ldr	r3, [pc, #28]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800220e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	42470068 	.word	0x42470068
 8002220:	40023800 	.word	0x40023800
 8002224:	40007000 	.word	0x40007000
 8002228:	42470e40 	.word	0x42470e40
 800222c:	424711e0 	.word	0x424711e0

08002230 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e073      	b.n	800232a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	7f5b      	ldrb	r3, [r3, #29]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d105      	bne.n	8002258 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe fd36 	bl	8000cc4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b10      	cmp	r3, #16
 800226a:	d055      	beq.n	8002318 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	22ca      	movs	r2, #202	@ 0xca
 8002272:	625a      	str	r2, [r3, #36]	@ 0x24
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2253      	movs	r2, #83	@ 0x53
 800227a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f87f 	bl	8002380 <RTC_EnterInitMode>
 8002282:	4603      	mov	r3, r0
 8002284:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d12c      	bne.n	80022e6 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800229a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800229e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6899      	ldr	r1, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68d2      	ldr	r2, [r2, #12]
 80022c6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6919      	ldr	r1, [r3, #16]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	041a      	lsls	r2, r3, #16
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f886 	bl	80023ee <RTC_ExitInitMode>
 80022e2:	4603      	mov	r3, r0
 80022e4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d110      	bne.n	800230e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022fa:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	22ff      	movs	r2, #255	@ 0xff
 8002314:	625a      	str	r2, [r3, #36]	@ 0x24
 8002316:	e001      	b.n	800231c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d102      	bne.n	8002328 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0d      	ldr	r2, [pc, #52]	@ (800237c <HAL_RTC_WaitForSynchro+0x48>)
 8002346:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002348:	f7fe fe82 	bl	8001050 <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800234e:	e009      	b.n	8002364 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002350:	f7fe fe7e 	bl	8001050 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800235e:	d901      	bls.n	8002364 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e007      	b.n	8002374 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0ee      	beq.n	8002350 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	00013f5f 	.word	0x00013f5f

08002380 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239a:	2b00      	cmp	r3, #0
 800239c:	d122      	bne.n	80023e4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023ac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023ae:	f7fe fe4f 	bl	8001050 <HAL_GetTick>
 80023b2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80023b4:	e00c      	b.n	80023d0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023b6:	f7fe fe4b 	bl	8001050 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023c4:	d904      	bls.n	80023d0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2204      	movs	r2, #4
 80023ca:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <RTC_EnterInitMode+0x64>
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d1e8      	bne.n	80023b6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002408:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff8b 	bl	8002334 <HAL_RTC_WaitForSynchro>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2204      	movs	r2, #4
 8002428:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e041      	b.n	80024ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f839 	bl	80024d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3304      	adds	r3, #4
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f000 f9b2 	bl	80027e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d001      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e044      	b.n	800258e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1e      	ldr	r2, [pc, #120]	@ (800259c <HAL_TIM_Base_Start_IT+0xb0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d018      	beq.n	8002558 <HAL_TIM_Base_Start_IT+0x6c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800252e:	d013      	beq.n	8002558 <HAL_TIM_Base_Start_IT+0x6c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1a      	ldr	r2, [pc, #104]	@ (80025a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00e      	beq.n	8002558 <HAL_TIM_Base_Start_IT+0x6c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a19      	ldr	r2, [pc, #100]	@ (80025a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d009      	beq.n	8002558 <HAL_TIM_Base_Start_IT+0x6c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a17      	ldr	r2, [pc, #92]	@ (80025a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d004      	beq.n	8002558 <HAL_TIM_Base_Start_IT+0x6c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a16      	ldr	r2, [pc, #88]	@ (80025ac <HAL_TIM_Base_Start_IT+0xc0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d111      	bne.n	800257c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b06      	cmp	r3, #6
 8002568:	d010      	beq.n	800258c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0201 	orr.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257a:	e007      	b.n	800258c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40010000 	.word	0x40010000
 80025a0:	40000400 	.word	0x40000400
 80025a4:	40000800 	.word	0x40000800
 80025a8:	40000c00 	.word	0x40000c00
 80025ac:	40014000 	.word	0x40014000

080025b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d020      	beq.n	8002614 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0202 	mvn.w	r2, #2
 80025e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f8d2 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8c4 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f8d5 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d020      	beq.n	8002660 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0204 	mvn.w	r2, #4
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2202      	movs	r2, #2
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f8ac 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f89e 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f8af 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d020      	beq.n	80026ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01b      	beq.n	80026ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0208 	mvn.w	r2, #8
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2204      	movs	r2, #4
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f886 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f878 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f889 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d020      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01b      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0210 	mvn.w	r2, #16
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2208      	movs	r2, #8
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f860 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f852 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f863 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00c      	beq.n	800271c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0201 	mvn.w	r2, #1
 8002714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe fa90 	bl	8000c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f8e0 	bl	8002900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00c      	beq.n	8002764 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f834 	bl	80027cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0220 	mvn.w	r2, #32
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8b2 	bl	80028ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a37      	ldr	r2, [pc, #220]	@ (80028d0 <TIM_Base_SetConfig+0xf0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00f      	beq.n	8002818 <TIM_Base_SetConfig+0x38>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027fe:	d00b      	beq.n	8002818 <TIM_Base_SetConfig+0x38>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a34      	ldr	r2, [pc, #208]	@ (80028d4 <TIM_Base_SetConfig+0xf4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d007      	beq.n	8002818 <TIM_Base_SetConfig+0x38>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a33      	ldr	r2, [pc, #204]	@ (80028d8 <TIM_Base_SetConfig+0xf8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d003      	beq.n	8002818 <TIM_Base_SetConfig+0x38>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a32      	ldr	r2, [pc, #200]	@ (80028dc <TIM_Base_SetConfig+0xfc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d108      	bne.n	800282a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800281e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a28      	ldr	r2, [pc, #160]	@ (80028d0 <TIM_Base_SetConfig+0xf0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01b      	beq.n	800286a <TIM_Base_SetConfig+0x8a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002838:	d017      	beq.n	800286a <TIM_Base_SetConfig+0x8a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a25      	ldr	r2, [pc, #148]	@ (80028d4 <TIM_Base_SetConfig+0xf4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <TIM_Base_SetConfig+0x8a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a24      	ldr	r2, [pc, #144]	@ (80028d8 <TIM_Base_SetConfig+0xf8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00f      	beq.n	800286a <TIM_Base_SetConfig+0x8a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a23      	ldr	r2, [pc, #140]	@ (80028dc <TIM_Base_SetConfig+0xfc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00b      	beq.n	800286a <TIM_Base_SetConfig+0x8a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a22      	ldr	r2, [pc, #136]	@ (80028e0 <TIM_Base_SetConfig+0x100>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d007      	beq.n	800286a <TIM_Base_SetConfig+0x8a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a21      	ldr	r2, [pc, #132]	@ (80028e4 <TIM_Base_SetConfig+0x104>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d003      	beq.n	800286a <TIM_Base_SetConfig+0x8a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a20      	ldr	r2, [pc, #128]	@ (80028e8 <TIM_Base_SetConfig+0x108>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d108      	bne.n	800287c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a0c      	ldr	r2, [pc, #48]	@ (80028d0 <TIM_Base_SetConfig+0xf0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d103      	bne.n	80028aa <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f043 0204 	orr.w	r2, r3, #4
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	601a      	str	r2, [r3, #0]
}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40010000 	.word	0x40010000
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40000800 	.word	0x40000800
 80028dc:	40000c00 	.word	0x40000c00
 80028e0:	40014000 	.word	0x40014000
 80028e4:	40014400 	.word	0x40014400
 80028e8:	40014800 	.word	0x40014800

080028ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e042      	b.n	80029ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe f9ee 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	@ 0x24
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002956:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fe6b 	bl	8003634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800296c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800297c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800298c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	@ 0x28
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d175      	bne.n	8002ac0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_UART_Transmit+0x2c>
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e06e      	b.n	8002ac2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2221      	movs	r2, #33	@ 0x21
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029f2:	f7fe fb2d 	bl	8001050 <HAL_GetTick>
 80029f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	88fa      	ldrh	r2, [r7, #6]
 80029fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	88fa      	ldrh	r2, [r7, #6]
 8002a02:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a0c:	d108      	bne.n	8002a20 <HAL_UART_Transmit+0x6c>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d104      	bne.n	8002a20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	e003      	b.n	8002a28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a28:	e02e      	b.n	8002a88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2180      	movs	r1, #128	@ 0x80
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fbcf 	bl	80031d8 <UART_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e03a      	b.n	8002ac2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10b      	bne.n	8002a6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	3302      	adds	r3, #2
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	e007      	b.n	8002a7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	781a      	ldrb	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	3301      	adds	r3, #1
 8002a78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1cb      	bne.n	8002a2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2140      	movs	r1, #64	@ 0x40
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 fb9b 	bl	80031d8 <UART_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e006      	b.n	8002ac2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	e000      	b.n	8002ac2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ac0:	2302      	movs	r3, #2
  }
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b08a      	sub	sp, #40	@ 0x28
 8002ace:	af02      	add	r7, sp, #8
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	f040 8081 	bne.w	8002bee <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <HAL_UART_Receive+0x2e>
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e079      	b.n	8002bf0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2222      	movs	r2, #34	@ 0x22
 8002b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b10:	f7fe fa9e 	bl	8001050 <HAL_GetTick>
 8002b14:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	88fa      	ldrh	r2, [r7, #6]
 8002b1a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	88fa      	ldrh	r2, [r7, #6]
 8002b20:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b2a:	d108      	bne.n	8002b3e <HAL_UART_Receive+0x74>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d104      	bne.n	8002b3e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	e003      	b.n	8002b46 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b46:	e047      	b.n	8002bd8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2120      	movs	r1, #32
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fb40 	bl	80031d8 <UART_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e042      	b.n	8002bf0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10c      	bne.n	8002b8a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	3302      	adds	r3, #2
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	e01f      	b.n	8002bca <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b92:	d007      	beq.n	8002ba4 <HAL_UART_Receive+0xda>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_UART_Receive+0xe8>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d106      	bne.n	8002bb2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e008      	b.n	8002bc4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1b2      	bne.n	8002b48 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e000      	b.n	8002bf0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3720      	adds	r7, #32
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	d112      	bne.n	8002c38 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_UART_Receive_IT+0x26>
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00b      	b.n	8002c3a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fb2b 	bl	800328a <UART_Start_Receive_IT>
 8002c34:	4603      	mov	r3, r0
 8002c36:	e000      	b.n	8002c3a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b0ba      	sub	sp, #232	@ 0xe8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10f      	bne.n	8002caa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_UART_IRQHandler+0x66>
 8002c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fc07 	bl	80034b6 <UART_Receive_IT>
      return;
 8002ca8:	e273      	b.n	8003192 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002caa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80de 	beq.w	8002e70 <HAL_UART_IRQHandler+0x22c>
 8002cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d106      	bne.n	8002cce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80d1 	beq.w	8002e70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_UART_IRQHandler+0xae>
 8002cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	f043 0201 	orr.w	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <HAL_UART_IRQHandler+0xd2>
 8002cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	f043 0202 	orr.w	r2, r3, #2
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_UART_IRQHandler+0xf6>
 8002d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	f043 0204 	orr.w	r2, r3, #4
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d011      	beq.n	8002d6a <HAL_UART_IRQHandler+0x126>
 8002d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d105      	bne.n	8002d5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d62:	f043 0208 	orr.w	r2, r3, #8
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 820a 	beq.w	8003188 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_UART_IRQHandler+0x14e>
 8002d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fb92 	bl	80034b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9c:	2b40      	cmp	r3, #64	@ 0x40
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <HAL_UART_IRQHandler+0x17a>
 8002db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d04f      	beq.n	8002e5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fa9d 	bl	80032fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dce:	2b40      	cmp	r3, #64	@ 0x40
 8002dd0:	d141      	bne.n	8002e56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3314      	adds	r3, #20
 8002dd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3314      	adds	r3, #20
 8002dfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002dfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e0e:	e841 2300 	strex	r3, r2, [r1]
 8002e12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1d9      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d013      	beq.n	8002e4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2a:	4a8a      	ldr	r2, [pc, #552]	@ (8003054 <HAL_UART_IRQHandler+0x410>)
 8002e2c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe fa6a 	bl	800130c <HAL_DMA_Abort_IT>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d016      	beq.n	8002e6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e4c:	e00e      	b.n	8002e6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f9ac 	bl	80031ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e54:	e00a      	b.n	8002e6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f9a8 	bl	80031ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e5c:	e006      	b.n	8002e6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f9a4 	bl	80031ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002e6a:	e18d      	b.n	8003188 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	bf00      	nop
    return;
 8002e6e:	e18b      	b.n	8003188 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	f040 8167 	bne.w	8003148 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8160 	beq.w	8003148 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8159 	beq.w	8003148 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb6:	2b40      	cmp	r3, #64	@ 0x40
 8002eb8:	f040 80ce 	bne.w	8003058 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ec8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80a9 	beq.w	8003024 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ed6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002eda:	429a      	cmp	r2, r3
 8002edc:	f080 80a2 	bcs.w	8003024 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ee6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ef2:	f000 8088 	beq.w	8003006 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	330c      	adds	r3, #12
 8002efc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f04:	e853 3f00 	ldrex	r3, [r3]
 8002f08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f32:	e841 2300 	strex	r3, r2, [r1]
 8002f36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1d9      	bne.n	8002ef6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3314      	adds	r3, #20
 8002f48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3314      	adds	r3, #20
 8002f62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f72:	e841 2300 	strex	r3, r2, [r1]
 8002f76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1e1      	bne.n	8002f42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3314      	adds	r3, #20
 8002f84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3314      	adds	r3, #20
 8002f9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002fa2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002fa8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002faa:	e841 2300 	strex	r3, r2, [r1]
 8002fae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002fb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1e3      	bne.n	8002f7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fce:	e853 3f00 	ldrex	r3, [r3]
 8002fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002fd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fd6:	f023 0310 	bic.w	r3, r3, #16
 8002fda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002fe8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002fea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ff0:	e841 2300 	strex	r3, r2, [r1]
 8002ff4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e3      	bne.n	8002fc4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003000:	4618      	mov	r0, r3
 8003002:	f7fe f913 	bl	800122c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003014:	b29b      	uxth	r3, r3
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	b29b      	uxth	r3, r3
 800301a:	4619      	mov	r1, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f8cf 	bl	80031c0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003022:	e0b3      	b.n	800318c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003028:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800302c:	429a      	cmp	r2, r3
 800302e:	f040 80ad 	bne.w	800318c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800303c:	f040 80a6 	bne.w	800318c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800304a:	4619      	mov	r1, r3
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f8b7 	bl	80031c0 <HAL_UARTEx_RxEventCallback>
      return;
 8003052:	e09b      	b.n	800318c <HAL_UART_IRQHandler+0x548>
 8003054:	080033c5 	.word	0x080033c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003060:	b29b      	uxth	r3, r3
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 808e 	beq.w	8003190 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8089 	beq.w	8003190 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	330c      	adds	r3, #12
 8003084:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003088:	e853 3f00 	ldrex	r3, [r3]
 800308c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800308e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003094:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	330c      	adds	r3, #12
 800309e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80030a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80030a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e3      	bne.n	800307e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3314      	adds	r3, #20
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	623b      	str	r3, [r7, #32]
   return(result);
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3314      	adds	r3, #20
 80030d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80030da:	633a      	str	r2, [r7, #48]	@ 0x30
 80030dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030e2:	e841 2300 	strex	r3, r2, [r1]
 80030e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1e3      	bne.n	80030b6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	330c      	adds	r3, #12
 8003102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	e853 3f00 	ldrex	r3, [r3]
 800310a:	60fb      	str	r3, [r7, #12]
   return(result);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0310 	bic.w	r3, r3, #16
 8003112:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	330c      	adds	r3, #12
 800311c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003120:	61fa      	str	r2, [r7, #28]
 8003122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003124:	69b9      	ldr	r1, [r7, #24]
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	e841 2300 	strex	r3, r2, [r1]
 800312c:	617b      	str	r3, [r7, #20]
   return(result);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e3      	bne.n	80030fc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800313a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800313e:	4619      	mov	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f83d 	bl	80031c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003146:	e023      	b.n	8003190 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d009      	beq.n	8003168 <HAL_UART_IRQHandler+0x524>
 8003154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f940 	bl	80033e6 <UART_Transmit_IT>
    return;
 8003166:	e014      	b.n	8003192 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800316c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00e      	beq.n	8003192 <HAL_UART_IRQHandler+0x54e>
 8003174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f980 	bl	8003486 <UART_EndTransmit_IT>
    return;
 8003186:	e004      	b.n	8003192 <HAL_UART_IRQHandler+0x54e>
    return;
 8003188:	bf00      	nop
 800318a:	e002      	b.n	8003192 <HAL_UART_IRQHandler+0x54e>
      return;
 800318c:	bf00      	nop
 800318e:	e000      	b.n	8003192 <HAL_UART_IRQHandler+0x54e>
      return;
 8003190:	bf00      	nop
  }
}
 8003192:	37e8      	adds	r7, #232	@ 0xe8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e8:	e03b      	b.n	8003262 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d037      	beq.n	8003262 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f2:	f7fd ff2d 	bl	8001050 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	6a3a      	ldr	r2, [r7, #32]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d302      	bcc.n	8003208 <UART_WaitOnFlagUntilTimeout+0x30>
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e03a      	b.n	8003282 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d023      	beq.n	8003262 <UART_WaitOnFlagUntilTimeout+0x8a>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b80      	cmp	r3, #128	@ 0x80
 800321e:	d020      	beq.n	8003262 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b40      	cmp	r3, #64	@ 0x40
 8003224:	d01d      	beq.n	8003262 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b08      	cmp	r3, #8
 8003232:	d116      	bne.n	8003262 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f857 	bl	80032fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2208      	movs	r2, #8
 8003254:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e00f      	b.n	8003282 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4013      	ands	r3, r2
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	429a      	cmp	r2, r3
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	429a      	cmp	r2, r3
 800327e:	d0b4      	beq.n	80031ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800328a:	b480      	push	{r7}
 800328c:	b085      	sub	sp, #20
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	4613      	mov	r3, r2
 8003296:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	88fa      	ldrh	r2, [r7, #6]
 80032a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	88fa      	ldrh	r2, [r7, #6]
 80032a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2222      	movs	r2, #34	@ 0x22
 80032b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0220 	orr.w	r2, r2, #32
 80032ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032fe:	b480      	push	{r7}
 8003300:	b095      	sub	sp, #84	@ 0x54
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	330c      	adds	r3, #12
 800330c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003318:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800331c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	330c      	adds	r3, #12
 8003324:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003326:	643a      	str	r2, [r7, #64]	@ 0x40
 8003328:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800332c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e5      	bne.n	8003306 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3314      	adds	r3, #20
 8003340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	61fb      	str	r3, [r7, #28]
   return(result);
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3314      	adds	r3, #20
 8003358:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800335a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800335c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e5      	bne.n	800333a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	2b01      	cmp	r3, #1
 8003374:	d119      	bne.n	80033aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	60bb      	str	r3, [r7, #8]
   return(result);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f023 0310 	bic.w	r3, r3, #16
 800338c:	647b      	str	r3, [r7, #68]	@ 0x44
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	330c      	adds	r3, #12
 8003394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003396:	61ba      	str	r2, [r7, #24]
 8003398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339a:	6979      	ldr	r1, [r7, #20]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	e841 2300 	strex	r3, r2, [r1]
 80033a2:	613b      	str	r3, [r7, #16]
   return(result);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e5      	bne.n	8003376 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033b8:	bf00      	nop
 80033ba:	3754      	adds	r7, #84	@ 0x54
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7ff fee7 	bl	80031ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b085      	sub	sp, #20
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b21      	cmp	r3, #33	@ 0x21
 80033f8:	d13e      	bne.n	8003478 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003402:	d114      	bne.n	800342e <UART_Transmit_IT+0x48>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d110      	bne.n	800342e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003420:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	1c9a      	adds	r2, r3, #2
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	621a      	str	r2, [r3, #32]
 800342c:	e008      	b.n	8003440 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	1c59      	adds	r1, r3, #1
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6211      	str	r1, [r2, #32]
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29b      	uxth	r3, r3
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4619      	mov	r1, r3
 800344e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10f      	bne.n	8003474 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003462:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003472:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	e000      	b.n	800347a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003478:	2302      	movs	r3, #2
  }
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800349c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff fe76 	bl	8003198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b08c      	sub	sp, #48	@ 0x30
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b22      	cmp	r3, #34	@ 0x22
 80034d0:	f040 80aa 	bne.w	8003628 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034dc:	d115      	bne.n	800350a <UART_Receive_IT+0x54>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d111      	bne.n	800350a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003502:	1c9a      	adds	r2, r3, #2
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	@ 0x28
 8003508:	e024      	b.n	8003554 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003518:	d007      	beq.n	800352a <UART_Receive_IT+0x74>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10a      	bne.n	8003538 <UART_Receive_IT+0x82>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e008      	b.n	800354a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003544:	b2da      	uxtb	r2, r3
 8003546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003548:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29b      	uxth	r3, r3
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4619      	mov	r1, r3
 8003562:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003564:	2b00      	cmp	r3, #0
 8003566:	d15d      	bne.n	8003624 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0220 	bic.w	r2, r2, #32
 8003576:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003586:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d135      	bne.n	800361a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	330c      	adds	r3, #12
 80035ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	613b      	str	r3, [r7, #16]
   return(result);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f023 0310 	bic.w	r3, r3, #16
 80035ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	330c      	adds	r3, #12
 80035d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d4:	623a      	str	r2, [r7, #32]
 80035d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	69f9      	ldr	r1, [r7, #28]
 80035da:	6a3a      	ldr	r2, [r7, #32]
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e5      	bne.n	80035b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d10a      	bne.n	800360c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003610:	4619      	mov	r1, r3
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fdd4 	bl	80031c0 <HAL_UARTEx_RxEventCallback>
 8003618:	e002      	b.n	8003620 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fc ff88 	bl	8000530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e002      	b.n	800362a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	e000      	b.n	800362a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003628:	2302      	movs	r3, #2
  }
}
 800362a:	4618      	mov	r0, r3
 800362c:	3730      	adds	r7, #48	@ 0x30
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003638:	b0c0      	sub	sp, #256	@ 0x100
 800363a:	af00      	add	r7, sp, #0
 800363c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800364c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003650:	68d9      	ldr	r1, [r3, #12]
 8003652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	ea40 0301 	orr.w	r3, r0, r1
 800365c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	431a      	orrs	r2, r3
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	431a      	orrs	r2, r3
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800368c:	f021 010c 	bic.w	r1, r1, #12
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800369a:	430b      	orrs	r3, r1
 800369c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800369e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ae:	6999      	ldr	r1, [r3, #24]
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	ea40 0301 	orr.w	r3, r0, r1
 80036ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4b8f      	ldr	r3, [pc, #572]	@ (8003900 <UART_SetConfig+0x2cc>)
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d005      	beq.n	80036d4 <UART_SetConfig+0xa0>
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b8d      	ldr	r3, [pc, #564]	@ (8003904 <UART_SetConfig+0x2d0>)
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d104      	bne.n	80036de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036d4:	f7fe fc78 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 80036d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036dc:	e003      	b.n	80036e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036de:	f7fe fc5f 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 80036e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036f0:	f040 810c 	bne.w	800390c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003702:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003706:	4622      	mov	r2, r4
 8003708:	462b      	mov	r3, r5
 800370a:	1891      	adds	r1, r2, r2
 800370c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800370e:	415b      	adcs	r3, r3
 8003710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003712:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003716:	4621      	mov	r1, r4
 8003718:	eb12 0801 	adds.w	r8, r2, r1
 800371c:	4629      	mov	r1, r5
 800371e:	eb43 0901 	adc.w	r9, r3, r1
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800372e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003736:	4690      	mov	r8, r2
 8003738:	4699      	mov	r9, r3
 800373a:	4623      	mov	r3, r4
 800373c:	eb18 0303 	adds.w	r3, r8, r3
 8003740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003744:	462b      	mov	r3, r5
 8003746:	eb49 0303 	adc.w	r3, r9, r3
 800374a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800375a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800375e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003762:	460b      	mov	r3, r1
 8003764:	18db      	adds	r3, r3, r3
 8003766:	653b      	str	r3, [r7, #80]	@ 0x50
 8003768:	4613      	mov	r3, r2
 800376a:	eb42 0303 	adc.w	r3, r2, r3
 800376e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003770:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003774:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003778:	f7fc fd44 	bl	8000204 <__aeabi_uldivmod>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4b61      	ldr	r3, [pc, #388]	@ (8003908 <UART_SetConfig+0x2d4>)
 8003782:	fba3 2302 	umull	r2, r3, r3, r2
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	011c      	lsls	r4, r3, #4
 800378a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800378e:	2200      	movs	r2, #0
 8003790:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003794:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003798:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800379c:	4642      	mov	r2, r8
 800379e:	464b      	mov	r3, r9
 80037a0:	1891      	adds	r1, r2, r2
 80037a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80037a4:	415b      	adcs	r3, r3
 80037a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037ac:	4641      	mov	r1, r8
 80037ae:	eb12 0a01 	adds.w	sl, r2, r1
 80037b2:	4649      	mov	r1, r9
 80037b4:	eb43 0b01 	adc.w	fp, r3, r1
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037cc:	4692      	mov	sl, r2
 80037ce:	469b      	mov	fp, r3
 80037d0:	4643      	mov	r3, r8
 80037d2:	eb1a 0303 	adds.w	r3, sl, r3
 80037d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037da:	464b      	mov	r3, r9
 80037dc:	eb4b 0303 	adc.w	r3, fp, r3
 80037e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037f8:	460b      	mov	r3, r1
 80037fa:	18db      	adds	r3, r3, r3
 80037fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80037fe:	4613      	mov	r3, r2
 8003800:	eb42 0303 	adc.w	r3, r2, r3
 8003804:	647b      	str	r3, [r7, #68]	@ 0x44
 8003806:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800380a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800380e:	f7fc fcf9 	bl	8000204 <__aeabi_uldivmod>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4611      	mov	r1, r2
 8003818:	4b3b      	ldr	r3, [pc, #236]	@ (8003908 <UART_SetConfig+0x2d4>)
 800381a:	fba3 2301 	umull	r2, r3, r3, r1
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2264      	movs	r2, #100	@ 0x64
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	1acb      	subs	r3, r1, r3
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800382e:	4b36      	ldr	r3, [pc, #216]	@ (8003908 <UART_SetConfig+0x2d4>)
 8003830:	fba3 2302 	umull	r2, r3, r3, r2
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800383c:	441c      	add	r4, r3
 800383e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003842:	2200      	movs	r2, #0
 8003844:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003848:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800384c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003850:	4642      	mov	r2, r8
 8003852:	464b      	mov	r3, r9
 8003854:	1891      	adds	r1, r2, r2
 8003856:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003858:	415b      	adcs	r3, r3
 800385a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800385c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003860:	4641      	mov	r1, r8
 8003862:	1851      	adds	r1, r2, r1
 8003864:	6339      	str	r1, [r7, #48]	@ 0x30
 8003866:	4649      	mov	r1, r9
 8003868:	414b      	adcs	r3, r1
 800386a:	637b      	str	r3, [r7, #52]	@ 0x34
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003878:	4659      	mov	r1, fp
 800387a:	00cb      	lsls	r3, r1, #3
 800387c:	4651      	mov	r1, sl
 800387e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003882:	4651      	mov	r1, sl
 8003884:	00ca      	lsls	r2, r1, #3
 8003886:	4610      	mov	r0, r2
 8003888:	4619      	mov	r1, r3
 800388a:	4603      	mov	r3, r0
 800388c:	4642      	mov	r2, r8
 800388e:	189b      	adds	r3, r3, r2
 8003890:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003894:	464b      	mov	r3, r9
 8003896:	460a      	mov	r2, r1
 8003898:	eb42 0303 	adc.w	r3, r2, r3
 800389c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038b4:	460b      	mov	r3, r1
 80038b6:	18db      	adds	r3, r3, r3
 80038b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ba:	4613      	mov	r3, r2
 80038bc:	eb42 0303 	adc.w	r3, r2, r3
 80038c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038ca:	f7fc fc9b 	bl	8000204 <__aeabi_uldivmod>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <UART_SetConfig+0x2d4>)
 80038d4:	fba3 1302 	umull	r1, r3, r3, r2
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	2164      	movs	r1, #100	@ 0x64
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	3332      	adds	r3, #50	@ 0x32
 80038e6:	4a08      	ldr	r2, [pc, #32]	@ (8003908 <UART_SetConfig+0x2d4>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	f003 0207 	and.w	r2, r3, #7
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4422      	add	r2, r4
 80038fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038fc:	e106      	b.n	8003b0c <UART_SetConfig+0x4d8>
 80038fe:	bf00      	nop
 8003900:	40011000 	.word	0x40011000
 8003904:	40011400 	.word	0x40011400
 8003908:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800390c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003910:	2200      	movs	r2, #0
 8003912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003916:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800391a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800391e:	4642      	mov	r2, r8
 8003920:	464b      	mov	r3, r9
 8003922:	1891      	adds	r1, r2, r2
 8003924:	6239      	str	r1, [r7, #32]
 8003926:	415b      	adcs	r3, r3
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24
 800392a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800392e:	4641      	mov	r1, r8
 8003930:	1854      	adds	r4, r2, r1
 8003932:	4649      	mov	r1, r9
 8003934:	eb43 0501 	adc.w	r5, r3, r1
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	00eb      	lsls	r3, r5, #3
 8003942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003946:	00e2      	lsls	r2, r4, #3
 8003948:	4614      	mov	r4, r2
 800394a:	461d      	mov	r5, r3
 800394c:	4643      	mov	r3, r8
 800394e:	18e3      	adds	r3, r4, r3
 8003950:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003954:	464b      	mov	r3, r9
 8003956:	eb45 0303 	adc.w	r3, r5, r3
 800395a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800396a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800397a:	4629      	mov	r1, r5
 800397c:	008b      	lsls	r3, r1, #2
 800397e:	4621      	mov	r1, r4
 8003980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003984:	4621      	mov	r1, r4
 8003986:	008a      	lsls	r2, r1, #2
 8003988:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800398c:	f7fc fc3a 	bl	8000204 <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4b60      	ldr	r3, [pc, #384]	@ (8003b18 <UART_SetConfig+0x4e4>)
 8003996:	fba3 2302 	umull	r2, r3, r3, r2
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	011c      	lsls	r4, r3, #4
 800399e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039b0:	4642      	mov	r2, r8
 80039b2:	464b      	mov	r3, r9
 80039b4:	1891      	adds	r1, r2, r2
 80039b6:	61b9      	str	r1, [r7, #24]
 80039b8:	415b      	adcs	r3, r3
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c0:	4641      	mov	r1, r8
 80039c2:	1851      	adds	r1, r2, r1
 80039c4:	6139      	str	r1, [r7, #16]
 80039c6:	4649      	mov	r1, r9
 80039c8:	414b      	adcs	r3, r1
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039d8:	4659      	mov	r1, fp
 80039da:	00cb      	lsls	r3, r1, #3
 80039dc:	4651      	mov	r1, sl
 80039de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039e2:	4651      	mov	r1, sl
 80039e4:	00ca      	lsls	r2, r1, #3
 80039e6:	4610      	mov	r0, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	4603      	mov	r3, r0
 80039ec:	4642      	mov	r2, r8
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039f4:	464b      	mov	r3, r9
 80039f6:	460a      	mov	r2, r1
 80039f8:	eb42 0303 	adc.w	r3, r2, r3
 80039fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a18:	4649      	mov	r1, r9
 8003a1a:	008b      	lsls	r3, r1, #2
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a22:	4641      	mov	r1, r8
 8003a24:	008a      	lsls	r2, r1, #2
 8003a26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a2a:	f7fc fbeb 	bl	8000204 <__aeabi_uldivmod>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4611      	mov	r1, r2
 8003a34:	4b38      	ldr	r3, [pc, #224]	@ (8003b18 <UART_SetConfig+0x4e4>)
 8003a36:	fba3 2301 	umull	r2, r3, r3, r1
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	2264      	movs	r2, #100	@ 0x64
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	1acb      	subs	r3, r1, r3
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	3332      	adds	r3, #50	@ 0x32
 8003a48:	4a33      	ldr	r2, [pc, #204]	@ (8003b18 <UART_SetConfig+0x4e4>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a54:	441c      	add	r4, r3
 8003a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a64:	4642      	mov	r2, r8
 8003a66:	464b      	mov	r3, r9
 8003a68:	1891      	adds	r1, r2, r2
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	415b      	adcs	r3, r3
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a74:	4641      	mov	r1, r8
 8003a76:	1851      	adds	r1, r2, r1
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	414b      	adcs	r3, r1
 8003a7e:	607b      	str	r3, [r7, #4]
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a8c:	4659      	mov	r1, fp
 8003a8e:	00cb      	lsls	r3, r1, #3
 8003a90:	4651      	mov	r1, sl
 8003a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a96:	4651      	mov	r1, sl
 8003a98:	00ca      	lsls	r2, r1, #3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	189b      	adds	r3, r3, r2
 8003aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	460a      	mov	r2, r1
 8003aaa:	eb42 0303 	adc.w	r3, r2, r3
 8003aae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003aba:	667a      	str	r2, [r7, #100]	@ 0x64
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ac8:	4649      	mov	r1, r9
 8003aca:	008b      	lsls	r3, r1, #2
 8003acc:	4641      	mov	r1, r8
 8003ace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ad2:	4641      	mov	r1, r8
 8003ad4:	008a      	lsls	r2, r1, #2
 8003ad6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ada:	f7fc fb93 	bl	8000204 <__aeabi_uldivmod>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b18 <UART_SetConfig+0x4e4>)
 8003ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	2164      	movs	r1, #100	@ 0x64
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	3332      	adds	r3, #50	@ 0x32
 8003af6:	4a08      	ldr	r2, [pc, #32]	@ (8003b18 <UART_SetConfig+0x4e4>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	f003 020f 	and.w	r2, r3, #15
 8003b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4422      	add	r2, r4
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b12:	46bd      	mov	sp, r7
 8003b14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b18:	51eb851f 	.word	0x51eb851f

08003b1c <__NVIC_SetPriority>:
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	6039      	str	r1, [r7, #0]
 8003b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	db0a      	blt.n	8003b46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	490c      	ldr	r1, [pc, #48]	@ (8003b68 <__NVIC_SetPriority+0x4c>)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	0112      	lsls	r2, r2, #4
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003b44:	e00a      	b.n	8003b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	4908      	ldr	r1, [pc, #32]	@ (8003b6c <__NVIC_SetPriority+0x50>)
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	3b04      	subs	r3, #4
 8003b54:	0112      	lsls	r2, r2, #4
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	440b      	add	r3, r1
 8003b5a:	761a      	strb	r2, [r3, #24]
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000e100 	.word	0xe000e100
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003b74:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <SysTick_Handler+0x1c>)
 8003b76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003b78:	f002 ffbe 	bl	8006af8 <xTaskGetSchedulerState>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d001      	beq.n	8003b86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003b82:	f003 ffd9 	bl	8007b38 <xPortSysTickHandler>
  }
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	e000e010 	.word	0xe000e010

08003b90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b94:	2100      	movs	r1, #0
 8003b96:	f06f 0004 	mvn.w	r0, #4
 8003b9a:	f7ff ffbf 	bl	8003b1c <__NVIC_SetPriority>
#endif
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003baa:	f3ef 8305 	mrs	r3, IPSR
 8003bae:	603b      	str	r3, [r7, #0]
  return(result);
 8003bb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003bb6:	f06f 0305 	mvn.w	r3, #5
 8003bba:	607b      	str	r3, [r7, #4]
 8003bbc:	e00c      	b.n	8003bd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003be8 <osKernelInitialize+0x44>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d105      	bne.n	8003bd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003bc6:	4b08      	ldr	r3, [pc, #32]	@ (8003be8 <osKernelInitialize+0x44>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	607b      	str	r3, [r7, #4]
 8003bd0:	e002      	b.n	8003bd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003bd8:	687b      	ldr	r3, [r7, #4]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000198 	.word	0x20000198

08003bec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bf2:	f3ef 8305 	mrs	r3, IPSR
 8003bf6:	603b      	str	r3, [r7, #0]
  return(result);
 8003bf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003bfe:	f06f 0305 	mvn.w	r3, #5
 8003c02:	607b      	str	r3, [r7, #4]
 8003c04:	e010      	b.n	8003c28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c06:	4b0b      	ldr	r3, [pc, #44]	@ (8003c34 <osKernelStart+0x48>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d109      	bne.n	8003c22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003c0e:	f7ff ffbf 	bl	8003b90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003c12:	4b08      	ldr	r3, [pc, #32]	@ (8003c34 <osKernelStart+0x48>)
 8003c14:	2202      	movs	r2, #2
 8003c16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003c18:	f002 fa7e 	bl	8006118 <vTaskStartScheduler>
      stat = osOK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	607b      	str	r3, [r7, #4]
 8003c20:	e002      	b.n	8003c28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003c22:	f04f 33ff 	mov.w	r3, #4294967295
 8003c26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c28:	687b      	ldr	r3, [r7, #4]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000198 	.word	0x20000198

08003c38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08e      	sub	sp, #56	@ 0x38
 8003c3c:	af04      	add	r7, sp, #16
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c48:	f3ef 8305 	mrs	r3, IPSR
 8003c4c:	617b      	str	r3, [r7, #20]
  return(result);
 8003c4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d17e      	bne.n	8003d52 <osThreadNew+0x11a>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d07b      	beq.n	8003d52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003c5a:	2380      	movs	r3, #128	@ 0x80
 8003c5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003c5e:	2318      	movs	r3, #24
 8003c60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003c66:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d045      	beq.n	8003cfe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <osThreadNew+0x48>
        name = attr->name;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <osThreadNew+0x6e>
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b38      	cmp	r3, #56	@ 0x38
 8003c98:	d805      	bhi.n	8003ca6 <osThreadNew+0x6e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <osThreadNew+0x72>
        return (NULL);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e054      	b.n	8003d54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	089b      	lsrs	r3, r3, #2
 8003cb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00e      	beq.n	8003ce0 <osThreadNew+0xa8>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b5b      	cmp	r3, #91	@ 0x5b
 8003cc8:	d90a      	bls.n	8003ce0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d006      	beq.n	8003ce0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <osThreadNew+0xa8>
        mem = 1;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	e010      	b.n	8003d02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10c      	bne.n	8003d02 <osThreadNew+0xca>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d108      	bne.n	8003d02 <osThreadNew+0xca>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d104      	bne.n	8003d02 <osThreadNew+0xca>
          mem = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	e001      	b.n	8003d02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d110      	bne.n	8003d2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d10:	9202      	str	r2, [sp, #8]
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6a3a      	ldr	r2, [r7, #32]
 8003d1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f002 f81e 	bl	8005d60 <xTaskCreateStatic>
 8003d24:	4603      	mov	r3, r0
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	e013      	b.n	8003d52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d110      	bne.n	8003d52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	f107 0310 	add.w	r3, r7, #16
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f002 f86c 	bl	8005e20 <xTaskCreate>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d001      	beq.n	8003d52 <osThreadNew+0x11a>
            hTask = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d52:	693b      	ldr	r3, [r7, #16]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3728      	adds	r7, #40	@ 0x28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d64:	f3ef 8305 	mrs	r3, IPSR
 8003d68:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <osDelay+0x1c>
    stat = osErrorISR;
 8003d70:	f06f 0305 	mvn.w	r3, #5
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e007      	b.n	8003d88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f002 f992 	bl	80060ac <vTaskDelay>
    }
  }

  return (stat);
 8003d88:	68fb      	ldr	r3, [r7, #12]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f003 fcc8 	bl	8007730 <pvTimerGetTimerID>
 8003da0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <TimerCallback+0x22>
    callb->func (callb->arg);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	6852      	ldr	r2, [r2, #4]
 8003db0:	4610      	mov	r0, r2
 8003db2:	4798      	blx	r3
  }
}
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08c      	sub	sp, #48	@ 0x30
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dd0:	f3ef 8305 	mrs	r3, IPSR
 8003dd4:	613b      	str	r3, [r7, #16]
  return(result);
 8003dd6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d163      	bne.n	8003ea4 <osTimerNew+0xe8>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d060      	beq.n	8003ea4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8003de2:	2008      	movs	r0, #8
 8003de4:	f003 ff3a 	bl	8007c5c <pvPortMalloc>
 8003de8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d059      	beq.n	8003ea4 <osTimerNew+0xe8>
      callb->func = func;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8003dfc:	7afb      	ldrb	r3, [r7, #11]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <osTimerNew+0x4c>
        reload = pdFALSE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	e001      	b.n	8003e0c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8003e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e10:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01c      	beq.n	8003e56 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <osTimerNew+0x6e>
          name = attr->name;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d006      	beq.n	8003e40 <osTimerNew+0x84>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	2b2b      	cmp	r3, #43	@ 0x2b
 8003e38:	d902      	bls.n	8003e40 <osTimerNew+0x84>
          mem = 1;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	e00c      	b.n	8003e5a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d108      	bne.n	8003e5a <osTimerNew+0x9e>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <osTimerNew+0x9e>
            mem = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61bb      	str	r3, [r7, #24]
 8003e54:	e001      	b.n	8003e5a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d10c      	bne.n	8003e7a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	9301      	str	r3, [sp, #4]
 8003e66:	4b12      	ldr	r3, [pc, #72]	@ (8003eb0 <osTimerNew+0xf4>)
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	2101      	movs	r1, #1
 8003e70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e72:	f003 f8a6 	bl	8006fc2 <xTimerCreateStatic>
 8003e76:	6238      	str	r0, [r7, #32]
 8003e78:	e00b      	b.n	8003e92 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d108      	bne.n	8003e92 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8003e80:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <osTimerNew+0xf4>)
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	2101      	movs	r1, #1
 8003e8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e8c:	f003 f878 	bl	8006f80 <xTimerCreate>
 8003e90:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <osTimerNew+0xe8>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <osTimerNew+0xe8>
        vPortFree (callb);
 8003e9e:	6978      	ldr	r0, [r7, #20]
 8003ea0:	f003 ffaa 	bl	8007df8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3728      	adds	r7, #40	@ 0x28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	08003d93 	.word	0x08003d93

08003eb4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ec2:	f3ef 8305 	mrs	r3, IPSR
 8003ec6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <osTimerStart+0x22>
    stat = osErrorISR;
 8003ece:	f06f 0305 	mvn.w	r3, #5
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	e017      	b.n	8003f06 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d103      	bne.n	8003ee4 <osTimerStart+0x30>
    stat = osErrorParameter;
 8003edc:	f06f 0303 	mvn.w	r3, #3
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	e010      	b.n	8003f06 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	2104      	movs	r1, #4
 8003eee:	6938      	ldr	r0, [r7, #16]
 8003ef0:	f003 f8e4 	bl	80070bc <xTimerGenericCommand>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d102      	bne.n	8003f00 <osTimerStart+0x4c>
      stat = osOK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	e002      	b.n	8003f06 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8003f00:	f06f 0302 	mvn.w	r3, #2
 8003f04:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003f06:	697b      	ldr	r3, [r7, #20]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f1c:	f3ef 8305 	mrs	r3, IPSR
 8003f20:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f22:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <osTimerStop+0x20>
    stat = osErrorISR;
 8003f28:	f06f 0305 	mvn.w	r3, #5
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e021      	b.n	8003f74 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <osTimerStop+0x2e>
    stat = osErrorParameter;
 8003f36:	f06f 0303 	mvn.w	r3, #3
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	e01a      	b.n	8003f74 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8003f3e:	6938      	ldr	r0, [r7, #16]
 8003f40:	f003 fbcc 	bl	80076dc <xTimerIsTimerActive>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d103      	bne.n	8003f52 <osTimerStop+0x42>
      stat = osErrorResource;
 8003f4a:	f06f 0302 	mvn.w	r3, #2
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	e010      	b.n	8003f74 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8003f52:	2300      	movs	r3, #0
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	2300      	movs	r3, #0
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2103      	movs	r1, #3
 8003f5c:	6938      	ldr	r0, [r7, #16]
 8003f5e:	f003 f8ad 	bl	80070bc <xTimerGenericCommand>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d102      	bne.n	8003f6e <osTimerStop+0x5e>
        stat = osOK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	e002      	b.n	8003f74 <osTimerStop+0x64>
      } else {
        stat = osError;
 8003f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f72:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003f74:	697b      	ldr	r3, [r7, #20]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f8a:	f3ef 8305 	mrs	r3, IPSR
 8003f8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f90:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d12d      	bne.n	8003ff2 <osEventFlagsNew+0x74>
    mem = -1;
 8003f96:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d015      	beq.n	8003fce <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d006      	beq.n	8003fb8 <osEventFlagsNew+0x3a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b1f      	cmp	r3, #31
 8003fb0:	d902      	bls.n	8003fb8 <osEventFlagsNew+0x3a>
        mem = 1;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	e00c      	b.n	8003fd2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d108      	bne.n	8003fd2 <osEventFlagsNew+0x54>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d104      	bne.n	8003fd2 <osEventFlagsNew+0x54>
          mem = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	e001      	b.n	8003fd2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d106      	bne.n	8003fe6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fb6b 	bl	80046b8 <xEventGroupCreateStatic>
 8003fe2:	6178      	str	r0, [r7, #20]
 8003fe4:	e005      	b.n	8003ff2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8003fec:	f000 fb9d 	bl	800472a <xEventGroupCreate>
 8003ff0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8003ff2:	697b      	ldr	r3, [r7, #20]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <osEventFlagsSet+0x1c>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004016:	d303      	bcc.n	8004020 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8004018:	f06f 0303 	mvn.w	r3, #3
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	e028      	b.n	8004072 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004020:	f3ef 8305 	mrs	r3, IPSR
 8004024:	60fb      	str	r3, [r7, #12]
  return(result);
 8004026:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01d      	beq.n	8004068 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800402c:	2300      	movs	r3, #0
 800402e:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004030:	f107 0308 	add.w	r3, r7, #8
 8004034:	461a      	mov	r2, r3
 8004036:	6839      	ldr	r1, [r7, #0]
 8004038:	6938      	ldr	r0, [r7, #16]
 800403a:	f000 fd9d 	bl	8004b78 <xEventGroupSetBitsFromISR>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d103      	bne.n	800404c <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8004044:	f06f 0302 	mvn.w	r3, #2
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	e012      	b.n	8004072 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00d      	beq.n	8004072 <osEventFlagsSet+0x76>
 8004056:	4b09      	ldr	r3, [pc, #36]	@ (800407c <osEventFlagsSet+0x80>)
 8004058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	e004      	b.n	8004072 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004068:	6839      	ldr	r1, [r7, #0]
 800406a:	6938      	ldr	r0, [r7, #16]
 800406c:	f000 fcbc 	bl	80049e8 <xEventGroupSetBits>
 8004070:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004072:	697b      	ldr	r3, [r7, #20]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	e000ed04 	.word	0xe000ed04

08004080 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <osEventFlagsClear+0x1c>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800409a:	d303      	bcc.n	80040a4 <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 800409c:	f06f 0303 	mvn.w	r3, #3
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e019      	b.n	80040d8 <osEventFlagsClear+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040a4:	f3ef 8305 	mrs	r3, IPSR
 80040a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80040aa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00e      	beq.n	80040ce <osEventFlagsClear+0x4e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80040b0:	6938      	ldr	r0, [r7, #16]
 80040b2:	f000 fc75 	bl	80049a0 <xEventGroupGetBitsFromISR>
 80040b6:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80040b8:	6839      	ldr	r1, [r7, #0]
 80040ba:	6938      	ldr	r0, [r7, #16]
 80040bc:	f000 fc5c 	bl	8004978 <xEventGroupClearBitsFromISR>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d108      	bne.n	80040d8 <osEventFlagsClear+0x58>
      rflags = (uint32_t)osErrorResource;
 80040c6:	f06f 0302 	mvn.w	r3, #2
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	e004      	b.n	80040d8 <osEventFlagsClear+0x58>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80040ce:	6839      	ldr	r1, [r7, #0]
 80040d0:	6938      	ldr	r0, [r7, #16]
 80040d2:	f000 fc17 	bl	8004904 <xEventGroupClearBits>
 80040d6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80040d8:	697b      	ldr	r3, [r7, #20]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b08c      	sub	sp, #48	@ 0x30
 80040e6:	af02      	add	r7, sp, #8
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <osEventFlagsWait+0x20>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004100:	d303      	bcc.n	800410a <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8004102:	f06f 0303 	mvn.w	r3, #3
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	e04b      	b.n	80041a2 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800410a:	f3ef 8305 	mrs	r3, IPSR
 800410e:	617b      	str	r3, [r7, #20]
  return(result);
 8004110:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8004116:	f06f 0305 	mvn.w	r3, #5
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	e041      	b.n	80041a2 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8004128:	2301      	movs	r3, #1
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24
 800412c:	e001      	b.n	8004132 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 800412e:	2300      	movs	r3, #0
 8004130:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800413c:	2300      	movs	r3, #0
 800413e:	623b      	str	r3, [r7, #32]
 8004140:	e001      	b.n	8004146 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8004142:	2301      	movs	r3, #1
 8004144:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	69b8      	ldr	r0, [r7, #24]
 8004152:	f000 fb05 	bl	8004760 <xEventGroupWaitBits>
 8004156:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d010      	beq.n	8004184 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4013      	ands	r3, r2
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	429a      	cmp	r2, r3
 800416c:	d019      	beq.n	80041a2 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8004174:	f06f 0301 	mvn.w	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
 800417a:	e012      	b.n	80041a2 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800417c:	f06f 0302 	mvn.w	r3, #2
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	e00e      	b.n	80041a2 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8004194:	f06f 0301 	mvn.w	r3, #1
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	e002      	b.n	80041a2 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800419c:	f06f 0302 	mvn.w	r3, #2
 80041a0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80041a2:	69fb      	ldr	r3, [r7, #28]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3728      	adds	r7, #40	@ 0x28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	@ 0x28
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041bc:	f3ef 8305 	mrs	r3, IPSR
 80041c0:	613b      	str	r3, [r7, #16]
  return(result);
 80041c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d175      	bne.n	80042b4 <osSemaphoreNew+0x108>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d072      	beq.n	80042b4 <osSemaphoreNew+0x108>
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d86e      	bhi.n	80042b4 <osSemaphoreNew+0x108>
    mem = -1;
 80041d6:	f04f 33ff 	mov.w	r3, #4294967295
 80041da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d015      	beq.n	800420e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d006      	beq.n	80041f8 <osSemaphoreNew+0x4c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b4f      	cmp	r3, #79	@ 0x4f
 80041f0:	d902      	bls.n	80041f8 <osSemaphoreNew+0x4c>
        mem = 1;
 80041f2:	2301      	movs	r3, #1
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	e00c      	b.n	8004212 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d108      	bne.n	8004212 <osSemaphoreNew+0x66>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d104      	bne.n	8004212 <osSemaphoreNew+0x66>
          mem = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	61bb      	str	r3, [r7, #24]
 800420c:	e001      	b.n	8004212 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004218:	d04c      	beq.n	80042b4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d128      	bne.n	8004272 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d10a      	bne.n	800423c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2203      	movs	r2, #3
 800422c:	9200      	str	r2, [sp, #0]
 800422e:	2200      	movs	r2, #0
 8004230:	2100      	movs	r1, #0
 8004232:	2001      	movs	r0, #1
 8004234:	f000 fdd2 	bl	8004ddc <xQueueGenericCreateStatic>
 8004238:	61f8      	str	r0, [r7, #28]
 800423a:	e005      	b.n	8004248 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800423c:	2203      	movs	r2, #3
 800423e:	2100      	movs	r1, #0
 8004240:	2001      	movs	r0, #1
 8004242:	f000 fe48 	bl	8004ed6 <xQueueGenericCreate>
 8004246:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d022      	beq.n	8004294 <osSemaphoreNew+0xe8>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01f      	beq.n	8004294 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004254:	2300      	movs	r3, #0
 8004256:	2200      	movs	r2, #0
 8004258:	2100      	movs	r1, #0
 800425a:	69f8      	ldr	r0, [r7, #28]
 800425c:	f000 ff08 	bl	8005070 <xQueueGenericSend>
 8004260:	4603      	mov	r3, r0
 8004262:	2b01      	cmp	r3, #1
 8004264:	d016      	beq.n	8004294 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004266:	69f8      	ldr	r0, [r7, #28]
 8004268:	f001 fba6 	bl	80059b8 <vQueueDelete>
            hSemaphore = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	e010      	b.n	8004294 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d108      	bne.n	800428a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	461a      	mov	r2, r3
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fe86 	bl	8004f92 <xQueueCreateCountingSemaphoreStatic>
 8004286:	61f8      	str	r0, [r7, #28]
 8004288:	e004      	b.n	8004294 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 feb9 	bl	8005004 <xQueueCreateCountingSemaphore>
 8004292:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00c      	beq.n	80042b4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	e001      	b.n	80042ac <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80042ac:	6979      	ldr	r1, [r7, #20]
 80042ae:	69f8      	ldr	r0, [r7, #28]
 80042b0:	f001 fcce 	bl	8005c50 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80042b4:	69fb      	ldr	r3, [r7, #28]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3720      	adds	r7, #32
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d103      	bne.n	80042e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80042d8:	f06f 0303 	mvn.w	r3, #3
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	e039      	b.n	8004354 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042e0:	f3ef 8305 	mrs	r3, IPSR
 80042e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80042e6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d022      	beq.n	8004332 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80042f2:	f06f 0303 	mvn.w	r3, #3
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e02c      	b.n	8004354 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80042fe:	f107 0308 	add.w	r3, r7, #8
 8004302:	461a      	mov	r2, r3
 8004304:	2100      	movs	r1, #0
 8004306:	6938      	ldr	r0, [r7, #16]
 8004308:	f001 fad4 	bl	80058b4 <xQueueReceiveFromISR>
 800430c:	4603      	mov	r3, r0
 800430e:	2b01      	cmp	r3, #1
 8004310:	d003      	beq.n	800431a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004312:	f06f 0302 	mvn.w	r3, #2
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	e01c      	b.n	8004354 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d019      	beq.n	8004354 <osSemaphoreAcquire+0x94>
 8004320:	4b0f      	ldr	r3, [pc, #60]	@ (8004360 <osSemaphoreAcquire+0xa0>)
 8004322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	e010      	b.n	8004354 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004332:	6839      	ldr	r1, [r7, #0]
 8004334:	6938      	ldr	r0, [r7, #16]
 8004336:	f001 f9ad 	bl	8005694 <xQueueSemaphoreTake>
 800433a:	4603      	mov	r3, r0
 800433c:	2b01      	cmp	r3, #1
 800433e:	d009      	beq.n	8004354 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004346:	f06f 0301 	mvn.w	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e002      	b.n	8004354 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800434e:	f06f 0302 	mvn.w	r3, #2
 8004352:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004354:	697b      	ldr	r3, [r7, #20]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	e000ed04 	.word	0xe000ed04

08004364 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d103      	bne.n	8004382 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800437a:	f06f 0303 	mvn.w	r3, #3
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e02c      	b.n	80043dc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004382:	f3ef 8305 	mrs	r3, IPSR
 8004386:	60fb      	str	r3, [r7, #12]
  return(result);
 8004388:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800438a:	2b00      	cmp	r3, #0
 800438c:	d01a      	beq.n	80043c4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004392:	f107 0308 	add.w	r3, r7, #8
 8004396:	4619      	mov	r1, r3
 8004398:	6938      	ldr	r0, [r7, #16]
 800439a:	f001 f809 	bl	80053b0 <xQueueGiveFromISR>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d003      	beq.n	80043ac <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80043a4:	f06f 0302 	mvn.w	r3, #2
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e017      	b.n	80043dc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d014      	beq.n	80043dc <osSemaphoreRelease+0x78>
 80043b2:	4b0d      	ldr	r3, [pc, #52]	@ (80043e8 <osSemaphoreRelease+0x84>)
 80043b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	e00b      	b.n	80043dc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80043c4:	2300      	movs	r3, #0
 80043c6:	2200      	movs	r2, #0
 80043c8:	2100      	movs	r1, #0
 80043ca:	6938      	ldr	r0, [r7, #16]
 80043cc:	f000 fe50 	bl	8005070 <xQueueGenericSend>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d002      	beq.n	80043dc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80043d6:	f06f 0302 	mvn.w	r3, #2
 80043da:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80043dc:	697b      	ldr	r3, [r7, #20]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	@ 0x28
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043fc:	f3ef 8305 	mrs	r3, IPSR
 8004400:	613b      	str	r3, [r7, #16]
  return(result);
 8004402:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004404:	2b00      	cmp	r3, #0
 8004406:	d15f      	bne.n	80044c8 <osMessageQueueNew+0xdc>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d05c      	beq.n	80044c8 <osMessageQueueNew+0xdc>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d059      	beq.n	80044c8 <osMessageQueueNew+0xdc>
    mem = -1;
 8004414:	f04f 33ff 	mov.w	r3, #4294967295
 8004418:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d029      	beq.n	8004474 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d012      	beq.n	800444e <osMessageQueueNew+0x62>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b4f      	cmp	r3, #79	@ 0x4f
 800442e:	d90e      	bls.n	800444e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	429a      	cmp	r2, r3
 8004446:	d302      	bcc.n	800444e <osMessageQueueNew+0x62>
        mem = 1;
 8004448:	2301      	movs	r3, #1
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	e014      	b.n	8004478 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d110      	bne.n	8004478 <osMessageQueueNew+0x8c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004462:	2b00      	cmp	r3, #0
 8004464:	d108      	bne.n	8004478 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d104      	bne.n	8004478 <osMessageQueueNew+0x8c>
          mem = 0;
 800446e:	2300      	movs	r3, #0
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	e001      	b.n	8004478 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d10b      	bne.n	8004496 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2100      	movs	r1, #0
 8004488:	9100      	str	r1, [sp, #0]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fca5 	bl	8004ddc <xQueueGenericCreateStatic>
 8004492:	61f8      	str	r0, [r7, #28]
 8004494:	e008      	b.n	80044a8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800449c:	2200      	movs	r2, #0
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fd18 	bl	8004ed6 <xQueueGenericCreate>
 80044a6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00c      	beq.n	80044c8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <osMessageQueueNew+0xd0>
        name = attr->name;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	e001      	b.n	80044c0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80044c0:	6979      	ldr	r1, [r7, #20]
 80044c2:	69f8      	ldr	r0, [r7, #28]
 80044c4:	f001 fbc4 	bl	8005c50 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80044c8:	69fb      	ldr	r3, [r7, #28]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3720      	adds	r7, #32
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044ec:	f3ef 8305 	mrs	r3, IPSR
 80044f0:	617b      	str	r3, [r7, #20]
  return(result);
 80044f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d028      	beq.n	800454a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <osMessageQueuePut+0x36>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <osMessageQueuePut+0x36>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800450a:	f06f 0303 	mvn.w	r3, #3
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	e038      	b.n	8004584 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004516:	f107 0210 	add.w	r2, r7, #16
 800451a:	2300      	movs	r3, #0
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	69b8      	ldr	r0, [r7, #24]
 8004520:	f000 fea8 	bl	8005274 <xQueueGenericSendFromISR>
 8004524:	4603      	mov	r3, r0
 8004526:	2b01      	cmp	r3, #1
 8004528:	d003      	beq.n	8004532 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800452a:	f06f 0302 	mvn.w	r3, #2
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	e028      	b.n	8004584 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d025      	beq.n	8004584 <osMessageQueuePut+0xb0>
 8004538:	4b15      	ldr	r3, [pc, #84]	@ (8004590 <osMessageQueuePut+0xbc>)
 800453a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	e01c      	b.n	8004584 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <osMessageQueuePut+0x82>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d103      	bne.n	800455e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004556:	f06f 0303 	mvn.w	r3, #3
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	e012      	b.n	8004584 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800455e:	2300      	movs	r3, #0
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	69b8      	ldr	r0, [r7, #24]
 8004566:	f000 fd83 	bl	8005070 <xQueueGenericSend>
 800456a:	4603      	mov	r3, r0
 800456c:	2b01      	cmp	r3, #1
 800456e:	d009      	beq.n	8004584 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004576:	f06f 0301 	mvn.w	r3, #1
 800457a:	61fb      	str	r3, [r7, #28]
 800457c:	e002      	b.n	8004584 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800457e:	f06f 0302 	mvn.w	r3, #2
 8004582:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004584:	69fb      	ldr	r3, [r7, #28]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	e000ed04 	.word	0xe000ed04

08004594 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045aa:	f3ef 8305 	mrs	r3, IPSR
 80045ae:	617b      	str	r3, [r7, #20]
  return(result);
 80045b0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d028      	beq.n	8004608 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <osMessageQueueGet+0x34>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <osMessageQueueGet+0x34>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80045c8:	f06f 0303 	mvn.w	r3, #3
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	e037      	b.n	8004640 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80045d4:	f107 0310 	add.w	r3, r7, #16
 80045d8:	461a      	mov	r2, r3
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	69b8      	ldr	r0, [r7, #24]
 80045de:	f001 f969 	bl	80058b4 <xQueueReceiveFromISR>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d003      	beq.n	80045f0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80045e8:	f06f 0302 	mvn.w	r3, #2
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	e027      	b.n	8004640 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d024      	beq.n	8004640 <osMessageQueueGet+0xac>
 80045f6:	4b15      	ldr	r3, [pc, #84]	@ (800464c <osMessageQueueGet+0xb8>)
 80045f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	e01b      	b.n	8004640 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <osMessageQueueGet+0x80>
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d103      	bne.n	800461c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004614:	f06f 0303 	mvn.w	r3, #3
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	e011      	b.n	8004640 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	69b8      	ldr	r0, [r7, #24]
 8004622:	f000 ff55 	bl	80054d0 <xQueueReceive>
 8004626:	4603      	mov	r3, r0
 8004628:	2b01      	cmp	r3, #1
 800462a:	d009      	beq.n	8004640 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004632:	f06f 0301 	mvn.w	r3, #1
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	e002      	b.n	8004640 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800463a:	f06f 0302 	mvn.w	r3, #2
 800463e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004640:	69fb      	ldr	r3, [r7, #28]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	e000ed04 	.word	0xe000ed04

08004650 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4a07      	ldr	r2, [pc, #28]	@ (800467c <vApplicationGetIdleTaskMemory+0x2c>)
 8004660:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	4a06      	ldr	r2, [pc, #24]	@ (8004680 <vApplicationGetIdleTaskMemory+0x30>)
 8004666:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2280      	movs	r2, #128	@ 0x80
 800466c:	601a      	str	r2, [r3, #0]
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	2000019c 	.word	0x2000019c
 8004680:	200001f8 	.word	0x200001f8

08004684 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4a07      	ldr	r2, [pc, #28]	@ (80046b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004694:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4a06      	ldr	r2, [pc, #24]	@ (80046b4 <vApplicationGetTimerTaskMemory+0x30>)
 800469a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046a2:	601a      	str	r2, [r3, #0]
}
 80046a4:	bf00      	nop
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	200003f8 	.word	0x200003f8
 80046b4:	20000454 	.word	0x20000454

080046b8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
 80046dc:	e7fd      	b.n	80046da <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80046de:	2320      	movs	r3, #32
 80046e0:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d00b      	beq.n	8004700 <xEventGroupCreateStatic+0x48>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	60fb      	str	r3, [r7, #12]
}
 80046fa:	bf00      	nop
 80046fc:	bf00      	nop
 80046fe:	e7fd      	b.n	80046fc <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	3304      	adds	r3, #4
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fa43 	bl	8004ba0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2201      	movs	r2, #1
 800471e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004720:	697b      	ldr	r3, [r7, #20]
	}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004730:	2020      	movs	r0, #32
 8004732:	f003 fa93 	bl	8007c5c <pvPortMalloc>
 8004736:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fa29 	bl	8004ba0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004754:	687b      	ldr	r3, [r7, #4]
	}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b090      	sub	sp, #64	@ 0x40
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004776:	2300      	movs	r3, #0
 8004778:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10b      	bne.n	8004798 <xEventGroupWaitBits+0x38>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	623b      	str	r3, [r7, #32]
}
 8004792:	bf00      	nop
 8004794:	bf00      	nop
 8004796:	e7fd      	b.n	8004794 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800479e:	d30b      	bcc.n	80047b8 <xEventGroupWaitBits+0x58>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	61fb      	str	r3, [r7, #28]
}
 80047b2:	bf00      	nop
 80047b4:	bf00      	nop
 80047b6:	e7fd      	b.n	80047b4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10b      	bne.n	80047d6 <xEventGroupWaitBits+0x76>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	61bb      	str	r3, [r7, #24]
}
 80047d0:	bf00      	nop
 80047d2:	bf00      	nop
 80047d4:	e7fd      	b.n	80047d2 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047d6:	f002 f98f 	bl	8006af8 <xTaskGetSchedulerState>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <xEventGroupWaitBits+0x86>
 80047e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <xEventGroupWaitBits+0x8a>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <xEventGroupWaitBits+0x8c>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <xEventGroupWaitBits+0xa8>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	617b      	str	r3, [r7, #20]
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8004808:	f001 fcee 	bl	80061e8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800480c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004818:	f000 f98c 	bl	8004b34 <prvTestWaitCondition>
 800481c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800481e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00e      	beq.n	8004842 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004826:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004828:	2300      	movs	r3, #0
 800482a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d028      	beq.n	8004884 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	43db      	mvns	r3, r3
 800483a:	401a      	ands	r2, r3
 800483c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e020      	b.n	8004884 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004844:	2b00      	cmp	r3, #0
 8004846:	d104      	bne.n	8004852 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800484a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800484c:	2301      	movs	r3, #1
 800484e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004850:	e018      	b.n	8004884 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800485e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004868:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800486c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800486e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004870:	1d18      	adds	r0, r3, #4
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004876:	4313      	orrs	r3, r2
 8004878:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800487a:	4619      	mov	r1, r3
 800487c:	f001 feae 	bl	80065dc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004884:	f001 fcbe 	bl	8006204 <xTaskResumeAll>
 8004888:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800488a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800488c:	2b00      	cmp	r3, #0
 800488e:	d031      	beq.n	80048f4 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8004890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004892:	2b00      	cmp	r3, #0
 8004894:	d107      	bne.n	80048a6 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8004896:	4b1a      	ldr	r3, [pc, #104]	@ (8004900 <xEventGroupWaitBits+0x1a0>)
 8004898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80048a6:	f002 faa1 	bl	8006dec <uxTaskResetEventItemValue>
 80048aa:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80048ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d11a      	bne.n	80048ec <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80048b6:	f003 f8af 	bl	8007a18 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80048ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	68b9      	ldr	r1, [r7, #8]
 80048c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80048c6:	f000 f935 	bl	8004b34 <prvTestWaitCondition>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d009      	beq.n	80048e4 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d006      	beq.n	80048e4 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80048d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	43db      	mvns	r3, r3
 80048de:	401a      	ands	r2, r3
 80048e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80048e4:	2301      	movs	r3, #1
 80048e6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80048e8:	f003 f8c8 	bl	8007a7c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80048ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80048f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80048f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3740      	adds	r7, #64	@ 0x40
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10b      	bne.n	8004930 <xEventGroupClearBits+0x2c>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	60fb      	str	r3, [r7, #12]
}
 800492a:	bf00      	nop
 800492c:	bf00      	nop
 800492e:	e7fd      	b.n	800492c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004936:	d30b      	bcc.n	8004950 <xEventGroupClearBits+0x4c>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	60bb      	str	r3, [r7, #8]
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	e7fd      	b.n	800494c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8004950:	f003 f862 	bl	8007a18 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	43db      	mvns	r3, r3
 8004962:	401a      	ands	r2, r3
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8004968:	f003 f888 	bl	8007a7c <vPortExitCritical>

	return uxReturn;
 800496c:	693b      	ldr	r3, [r7, #16]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004982:	2300      	movs	r3, #0
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4804      	ldr	r0, [pc, #16]	@ (800499c <xEventGroupClearBitsFromISR+0x24>)
 800498a:	f002 fef3 	bl	8007774 <xTimerPendFunctionCallFromISR>
 800498e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8004990:	68fb      	ldr	r3, [r7, #12]
	}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	08004b1b 	.word	0x08004b1b

080049a0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80049a0:	b480      	push	{r7}
 80049a2:	b089      	sub	sp, #36	@ 0x24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049ac:	f3ef 8211 	mrs	r2, BASEPRI
 80049b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	60fa      	str	r2, [r7, #12]
 80049c2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049c4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049c6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049d8:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80049da:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80049dc:	4618      	mov	r0, r3
 80049de:	3724      	adds	r7, #36	@ 0x24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08e      	sub	sp, #56	@ 0x38
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80049f2:	2300      	movs	r3, #0
 80049f4:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10b      	bne.n	8004a1c <xEventGroupSetBits+0x34>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	613b      	str	r3, [r7, #16]
}
 8004a16:	bf00      	nop
 8004a18:	bf00      	nop
 8004a1a:	e7fd      	b.n	8004a18 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a22:	d30b      	bcc.n	8004a3c <xEventGroupSetBits+0x54>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	60fb      	str	r3, [r7, #12]
}
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
 8004a3a:	e7fd      	b.n	8004a38 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3e:	3304      	adds	r3, #4
 8004a40:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	3308      	adds	r3, #8
 8004a46:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004a48:	f001 fbce 	bl	80061e8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004a5e:	e03c      	b.n	8004ada <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004a76:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a7e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d108      	bne.n	8004a9c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8004a96:	2301      	movs	r3, #1
 8004a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a9a:	e008      	b.n	8004aae <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d101      	bne.n	8004aae <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d010      	beq.n	8004ad6 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004ad2:	f001 fe51 	bl	8006778 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8004ada:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d1be      	bne.n	8004a60 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	401a      	ands	r2, r3
 8004aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aee:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004af0:	f001 fb88 	bl	8006204 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af6:	681b      	ldr	r3, [r3, #0]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3738      	adds	r7, #56	@ 0x38
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004b0a:	6839      	ldr	r1, [r7, #0]
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff ff6b 	bl	80049e8 <xEventGroupSetBits>
}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004b24:	6839      	ldr	r1, [r7, #0]
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff feec 	bl	8004904 <xEventGroupClearBits>
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d107      	bne.n	8004b5a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e007      	b.n	8004b6a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d101      	bne.n	8004b6a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004b66:	2301      	movs	r3, #1
 8004b68:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004b6a:	697b      	ldr	r3, [r7, #20]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	68f9      	ldr	r1, [r7, #12]
 8004b8a:	4804      	ldr	r0, [pc, #16]	@ (8004b9c <xEventGroupSetBitsFromISR+0x24>)
 8004b8c:	f002 fdf2 	bl	8007774 <xTimerPendFunctionCallFromISR>
 8004b90:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004b92:	697b      	ldr	r3, [r7, #20]
	}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	08004b01 	.word	0x08004b01

08004ba0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f103 0208 	add.w	r2, r3, #8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f103 0208 	add.w	r2, r3, #8
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f103 0208 	add.w	r2, r3, #8
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	601a      	str	r2, [r3, #0]
}
 8004c36:	bf00      	nop
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c58:	d103      	bne.n	8004c62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	e00c      	b.n	8004c7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3308      	adds	r3, #8
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	e002      	b.n	8004c70 <vListInsert+0x2e>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d2f6      	bcs.n	8004c6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	601a      	str	r2, [r3, #0]
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6892      	ldr	r2, [r2, #8]
 8004cca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6852      	ldr	r2, [r2, #4]
 8004cd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d103      	bne.n	8004ce8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	1e5a      	subs	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10b      	bne.n	8004d34 <xQueueGenericReset+0x2c>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	60bb      	str	r3, [r7, #8]
}
 8004d2e:	bf00      	nop
 8004d30:	bf00      	nop
 8004d32:	e7fd      	b.n	8004d30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d34:	f002 fe70 	bl	8007a18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d40:	68f9      	ldr	r1, [r7, #12]
 8004d42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	441a      	add	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d64:	3b01      	subs	r3, #1
 8004d66:	68f9      	ldr	r1, [r7, #12]
 8004d68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d6a:	fb01 f303 	mul.w	r3, r1, r3
 8004d6e:	441a      	add	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	22ff      	movs	r2, #255	@ 0xff
 8004d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	22ff      	movs	r2, #255	@ 0xff
 8004d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d114      	bne.n	8004db4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d01a      	beq.n	8004dc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3310      	adds	r3, #16
 8004d96:	4618      	mov	r0, r3
 8004d98:	f001 fc8a 	bl	80066b0 <xTaskRemoveFromEventList>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d012      	beq.n	8004dc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004da2:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd8 <xQueueGenericReset+0xd0>)
 8004da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	e009      	b.n	8004dc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3310      	adds	r3, #16
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff fef1 	bl	8004ba0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3324      	adds	r3, #36	@ 0x24
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff feec 	bl	8004ba0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dc8:	f002 fe58 	bl	8007a7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dcc:	2301      	movs	r3, #1
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08e      	sub	sp, #56	@ 0x38
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10b      	bne.n	8004e08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e02:	bf00      	nop
 8004e04:	bf00      	nop
 8004e06:	e7fd      	b.n	8004e04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10b      	bne.n	8004e26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	e7fd      	b.n	8004e22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <xQueueGenericCreateStatic+0x56>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <xQueueGenericCreateStatic+0x5a>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <xQueueGenericCreateStatic+0x5c>
 8004e36:	2300      	movs	r3, #0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10b      	bne.n	8004e54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	623b      	str	r3, [r7, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	bf00      	nop
 8004e52:	e7fd      	b.n	8004e50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d102      	bne.n	8004e60 <xQueueGenericCreateStatic+0x84>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <xQueueGenericCreateStatic+0x88>
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <xQueueGenericCreateStatic+0x8a>
 8004e64:	2300      	movs	r3, #0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	61fb      	str	r3, [r7, #28]
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	e7fd      	b.n	8004e7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e82:	2350      	movs	r3, #80	@ 0x50
 8004e84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b50      	cmp	r3, #80	@ 0x50
 8004e8a:	d00b      	beq.n	8004ea4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	61bb      	str	r3, [r7, #24]
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	e7fd      	b.n	8004ea0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ea4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004eb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f840 	bl	8004f4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3730      	adds	r7, #48	@ 0x30
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b08a      	sub	sp, #40	@ 0x28
 8004eda:	af02      	add	r7, sp, #8
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10b      	bne.n	8004f02 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	613b      	str	r3, [r7, #16]
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	e7fd      	b.n	8004efe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	fb02 f303 	mul.w	r3, r2, r3
 8004f0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	3350      	adds	r3, #80	@ 0x50
 8004f10:	4618      	mov	r0, r3
 8004f12:	f002 fea3 	bl	8007c5c <pvPortMalloc>
 8004f16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d011      	beq.n	8004f42 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	3350      	adds	r3, #80	@ 0x50
 8004f26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f30:	79fa      	ldrb	r2, [r7, #7]
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	4613      	mov	r3, r2
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 f805 	bl	8004f4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f42:	69bb      	ldr	r3, [r7, #24]
	}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d103      	bne.n	8004f68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	e002      	b.n	8004f6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	69b8      	ldr	r0, [r7, #24]
 8004f7e:	f7ff fec3 	bl	8004d08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	78fa      	ldrb	r2, [r7, #3]
 8004f86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f8a:	bf00      	nop
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b08a      	sub	sp, #40	@ 0x28
 8004f96:	af02      	add	r7, sp, #8
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10b      	bne.n	8004fbc <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	61bb      	str	r3, [r7, #24]
}
 8004fb6:	bf00      	nop
 8004fb8:	bf00      	nop
 8004fba:	e7fd      	b.n	8004fb8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d90b      	bls.n	8004fdc <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	617b      	str	r3, [r7, #20]
}
 8004fd6:	bf00      	nop
 8004fd8:	bf00      	nop
 8004fda:	e7fd      	b.n	8004fd8 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004fdc:	2302      	movs	r3, #2
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff fef8 	bl	8004ddc <xQueueGenericCreateStatic>
 8004fec:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
	}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3720      	adds	r7, #32
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10b      	bne.n	800502c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	613b      	str	r3, [r7, #16]
}
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	e7fd      	b.n	8005028 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d90b      	bls.n	800504c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	60fb      	str	r3, [r7, #12]
}
 8005046:	bf00      	nop
 8005048:	bf00      	nop
 800504a:	e7fd      	b.n	8005048 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800504c:	2202      	movs	r2, #2
 800504e:	2100      	movs	r1, #0
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff ff40 	bl	8004ed6 <xQueueGenericCreate>
 8005056:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005064:	697b      	ldr	r3, [r7, #20]
	}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08e      	sub	sp, #56	@ 0x38
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800507e:	2300      	movs	r3, #0
 8005080:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10b      	bne.n	80050a4 <xQueueGenericSend+0x34>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800509e:	bf00      	nop
 80050a0:	bf00      	nop
 80050a2:	e7fd      	b.n	80050a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <xQueueGenericSend+0x42>
 80050aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <xQueueGenericSend+0x46>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <xQueueGenericSend+0x48>
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <xQueueGenericSend+0x64>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d103      	bne.n	80050e2 <xQueueGenericSend+0x72>
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <xQueueGenericSend+0x76>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <xQueueGenericSend+0x78>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10b      	bne.n	8005104 <xQueueGenericSend+0x94>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	623b      	str	r3, [r7, #32]
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	e7fd      	b.n	8005100 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005104:	f001 fcf8 	bl	8006af8 <xTaskGetSchedulerState>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d102      	bne.n	8005114 <xQueueGenericSend+0xa4>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <xQueueGenericSend+0xa8>
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <xQueueGenericSend+0xaa>
 8005118:	2300      	movs	r3, #0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10b      	bne.n	8005136 <xQueueGenericSend+0xc6>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	61fb      	str	r3, [r7, #28]
}
 8005130:	bf00      	nop
 8005132:	bf00      	nop
 8005134:	e7fd      	b.n	8005132 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005136:	f002 fc6f 	bl	8007a18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005142:	429a      	cmp	r2, r3
 8005144:	d302      	bcc.n	800514c <xQueueGenericSend+0xdc>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d129      	bne.n	80051a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005152:	f000 fc6d 	bl	8005a30 <prvCopyDataToQueue>
 8005156:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d010      	beq.n	8005182 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005162:	3324      	adds	r3, #36	@ 0x24
 8005164:	4618      	mov	r0, r3
 8005166:	f001 faa3 	bl	80066b0 <xTaskRemoveFromEventList>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d013      	beq.n	8005198 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005170:	4b3f      	ldr	r3, [pc, #252]	@ (8005270 <xQueueGenericSend+0x200>)
 8005172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	e00a      	b.n	8005198 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005188:	4b39      	ldr	r3, [pc, #228]	@ (8005270 <xQueueGenericSend+0x200>)
 800518a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005198:	f002 fc70 	bl	8007a7c <vPortExitCritical>
				return pdPASS;
 800519c:	2301      	movs	r3, #1
 800519e:	e063      	b.n	8005268 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d103      	bne.n	80051ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051a6:	f002 fc69 	bl	8007a7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e05c      	b.n	8005268 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d106      	bne.n	80051c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051b4:	f107 0314 	add.w	r3, r7, #20
 80051b8:	4618      	mov	r0, r3
 80051ba:	f001 fb41 	bl	8006840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051be:	2301      	movs	r3, #1
 80051c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051c2:	f002 fc5b 	bl	8007a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051c6:	f001 f80f 	bl	80061e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051ca:	f002 fc25 	bl	8007a18 <vPortEnterCritical>
 80051ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051d4:	b25b      	sxtb	r3, r3
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051da:	d103      	bne.n	80051e4 <xQueueGenericSend+0x174>
 80051dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051ea:	b25b      	sxtb	r3, r3
 80051ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f0:	d103      	bne.n	80051fa <xQueueGenericSend+0x18a>
 80051f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051fa:	f002 fc3f 	bl	8007a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051fe:	1d3a      	adds	r2, r7, #4
 8005200:	f107 0314 	add.w	r3, r7, #20
 8005204:	4611      	mov	r1, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f001 fb30 	bl	800686c <xTaskCheckForTimeOut>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d124      	bne.n	800525c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005212:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005214:	f000 fd04 	bl	8005c20 <prvIsQueueFull>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d018      	beq.n	8005250 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	3310      	adds	r3, #16
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4611      	mov	r1, r2
 8005226:	4618      	mov	r0, r3
 8005228:	f001 f9b2 	bl	8006590 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800522c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800522e:	f000 fc8f 	bl	8005b50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005232:	f000 ffe7 	bl	8006204 <xTaskResumeAll>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	f47f af7c 	bne.w	8005136 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800523e:	4b0c      	ldr	r3, [pc, #48]	@ (8005270 <xQueueGenericSend+0x200>)
 8005240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	e772      	b.n	8005136 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005252:	f000 fc7d 	bl	8005b50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005256:	f000 ffd5 	bl	8006204 <xTaskResumeAll>
 800525a:	e76c      	b.n	8005136 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800525c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800525e:	f000 fc77 	bl	8005b50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005262:	f000 ffcf 	bl	8006204 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005266:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005268:	4618      	mov	r0, r3
 800526a:	3738      	adds	r7, #56	@ 0x38
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	e000ed04 	.word	0xe000ed04

08005274 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b090      	sub	sp, #64	@ 0x40
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10b      	bne.n	80052a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800529e:	bf00      	nop
 80052a0:	bf00      	nop
 80052a2:	e7fd      	b.n	80052a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <xQueueGenericSendFromISR+0x3e>
 80052aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <xQueueGenericSendFromISR+0x42>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <xQueueGenericSendFromISR+0x44>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10b      	bne.n	80052d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	e7fd      	b.n	80052d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d103      	bne.n	80052e2 <xQueueGenericSendFromISR+0x6e>
 80052da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <xQueueGenericSendFromISR+0x72>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <xQueueGenericSendFromISR+0x74>
 80052e6:	2300      	movs	r3, #0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10b      	bne.n	8005304 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	623b      	str	r3, [r7, #32]
}
 80052fe:	bf00      	nop
 8005300:	bf00      	nop
 8005302:	e7fd      	b.n	8005300 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005304:	f002 fc68 	bl	8007bd8 <vPortValidateInterruptPriority>
	__asm volatile
 8005308:	f3ef 8211 	mrs	r2, BASEPRI
 800530c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	61fa      	str	r2, [r7, #28]
 800531e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005320:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005322:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005326:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532c:	429a      	cmp	r2, r3
 800532e:	d302      	bcc.n	8005336 <xQueueGenericSendFromISR+0xc2>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d12f      	bne.n	8005396 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005338:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800533c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005344:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800534c:	f000 fb70 	bl	8005a30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005350:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005358:	d112      	bne.n	8005380 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535e:	2b00      	cmp	r3, #0
 8005360:	d016      	beq.n	8005390 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005364:	3324      	adds	r3, #36	@ 0x24
 8005366:	4618      	mov	r0, r3
 8005368:	f001 f9a2 	bl	80066b0 <xTaskRemoveFromEventList>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00e      	beq.n	8005390 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00b      	beq.n	8005390 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e007      	b.n	8005390 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005380:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005384:	3301      	adds	r3, #1
 8005386:	b2db      	uxtb	r3, r3
 8005388:	b25a      	sxtb	r2, r3
 800538a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005390:	2301      	movs	r3, #1
 8005392:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005394:	e001      	b.n	800539a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005396:	2300      	movs	r3, #0
 8005398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800539a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f383 8811 	msr	BASEPRI, r3
}
 80053a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3740      	adds	r7, #64	@ 0x40
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08e      	sub	sp, #56	@ 0x38
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10b      	bne.n	80053dc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	623b      	str	r3, [r7, #32]
}
 80053d6:	bf00      	nop
 80053d8:	bf00      	nop
 80053da:	e7fd      	b.n	80053d8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <xQueueGiveFromISR+0x4c>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	61fb      	str	r3, [r7, #28]
}
 80053f6:	bf00      	nop
 80053f8:	bf00      	nop
 80053fa:	e7fd      	b.n	80053f8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80053fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d103      	bne.n	800540c <xQueueGiveFromISR+0x5c>
 8005404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <xQueueGiveFromISR+0x60>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <xQueueGiveFromISR+0x62>
 8005410:	2300      	movs	r3, #0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10b      	bne.n	800542e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	61bb      	str	r3, [r7, #24]
}
 8005428:	bf00      	nop
 800542a:	bf00      	nop
 800542c:	e7fd      	b.n	800542a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800542e:	f002 fbd3 	bl	8007bd8 <vPortValidateInterruptPriority>
	__asm volatile
 8005432:	f3ef 8211 	mrs	r2, BASEPRI
 8005436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	617a      	str	r2, [r7, #20]
 8005448:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800544a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800544c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005452:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005458:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800545a:	429a      	cmp	r2, r3
 800545c:	d22b      	bcs.n	80054b6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005470:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d112      	bne.n	80054a0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800547a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	2b00      	cmp	r3, #0
 8005480:	d016      	beq.n	80054b0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005484:	3324      	adds	r3, #36	@ 0x24
 8005486:	4618      	mov	r0, r3
 8005488:	f001 f912 	bl	80066b0 <xTaskRemoveFromEventList>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00e      	beq.n	80054b0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00b      	beq.n	80054b0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2201      	movs	r2, #1
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e007      	b.n	80054b0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054a4:	3301      	adds	r3, #1
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	b25a      	sxtb	r2, r3
 80054aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80054b0:	2301      	movs	r3, #1
 80054b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054b4:	e001      	b.n	80054ba <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f383 8811 	msr	BASEPRI, r3
}
 80054c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3738      	adds	r7, #56	@ 0x38
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08c      	sub	sp, #48	@ 0x30
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054dc:	2300      	movs	r3, #0
 80054de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10b      	bne.n	8005502 <xQueueReceive+0x32>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	623b      	str	r3, [r7, #32]
}
 80054fc:	bf00      	nop
 80054fe:	bf00      	nop
 8005500:	e7fd      	b.n	80054fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d103      	bne.n	8005510 <xQueueReceive+0x40>
 8005508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <xQueueReceive+0x44>
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <xQueueReceive+0x46>
 8005514:	2300      	movs	r3, #0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10b      	bne.n	8005532 <xQueueReceive+0x62>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	61fb      	str	r3, [r7, #28]
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	e7fd      	b.n	800552e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005532:	f001 fae1 	bl	8006af8 <xTaskGetSchedulerState>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d102      	bne.n	8005542 <xQueueReceive+0x72>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <xQueueReceive+0x76>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <xQueueReceive+0x78>
 8005546:	2300      	movs	r3, #0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10b      	bne.n	8005564 <xQueueReceive+0x94>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	61bb      	str	r3, [r7, #24]
}
 800555e:	bf00      	nop
 8005560:	bf00      	nop
 8005562:	e7fd      	b.n	8005560 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005564:	f002 fa58 	bl	8007a18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01f      	beq.n	80055b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005578:	f000 fac4 	bl	8005b04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	1e5a      	subs	r2, r3, #1
 8005580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005582:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00f      	beq.n	80055ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558e:	3310      	adds	r3, #16
 8005590:	4618      	mov	r0, r3
 8005592:	f001 f88d 	bl	80066b0 <xTaskRemoveFromEventList>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d007      	beq.n	80055ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800559c:	4b3c      	ldr	r3, [pc, #240]	@ (8005690 <xQueueReceive+0x1c0>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055ac:	f002 fa66 	bl	8007a7c <vPortExitCritical>
				return pdPASS;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e069      	b.n	8005688 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d103      	bne.n	80055c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055ba:	f002 fa5f 	bl	8007a7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055be:	2300      	movs	r3, #0
 80055c0:	e062      	b.n	8005688 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d106      	bne.n	80055d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055c8:	f107 0310 	add.w	r3, r7, #16
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 f937 	bl	8006840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055d2:	2301      	movs	r3, #1
 80055d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055d6:	f002 fa51 	bl	8007a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055da:	f000 fe05 	bl	80061e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055de:	f002 fa1b 	bl	8007a18 <vPortEnterCritical>
 80055e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055e8:	b25b      	sxtb	r3, r3
 80055ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ee:	d103      	bne.n	80055f8 <xQueueReceive+0x128>
 80055f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055fe:	b25b      	sxtb	r3, r3
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d103      	bne.n	800560e <xQueueReceive+0x13e>
 8005606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800560e:	f002 fa35 	bl	8007a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005612:	1d3a      	adds	r2, r7, #4
 8005614:	f107 0310 	add.w	r3, r7, #16
 8005618:	4611      	mov	r1, r2
 800561a:	4618      	mov	r0, r3
 800561c:	f001 f926 	bl	800686c <xTaskCheckForTimeOut>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d123      	bne.n	800566e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005628:	f000 fae4 	bl	8005bf4 <prvIsQueueEmpty>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d017      	beq.n	8005662 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	3324      	adds	r3, #36	@ 0x24
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	4611      	mov	r1, r2
 800563a:	4618      	mov	r0, r3
 800563c:	f000 ffa8 	bl	8006590 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005640:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005642:	f000 fa85 	bl	8005b50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005646:	f000 fddd 	bl	8006204 <xTaskResumeAll>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d189      	bne.n	8005564 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005650:	4b0f      	ldr	r3, [pc, #60]	@ (8005690 <xQueueReceive+0x1c0>)
 8005652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	e780      	b.n	8005564 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005662:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005664:	f000 fa74 	bl	8005b50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005668:	f000 fdcc 	bl	8006204 <xTaskResumeAll>
 800566c:	e77a      	b.n	8005564 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800566e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005670:	f000 fa6e 	bl	8005b50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005674:	f000 fdc6 	bl	8006204 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005678:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800567a:	f000 fabb 	bl	8005bf4 <prvIsQueueEmpty>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	f43f af6f 	beq.w	8005564 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005686:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005688:	4618      	mov	r0, r3
 800568a:	3730      	adds	r7, #48	@ 0x30
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08e      	sub	sp, #56	@ 0x38
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800569e:	2300      	movs	r3, #0
 80056a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	623b      	str	r3, [r7, #32]
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	61fb      	str	r3, [r7, #28]
}
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
 80056e6:	e7fd      	b.n	80056e4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056e8:	f001 fa06 	bl	8006af8 <xTaskGetSchedulerState>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d102      	bne.n	80056f8 <xQueueSemaphoreTake+0x64>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <xQueueSemaphoreTake+0x68>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <xQueueSemaphoreTake+0x6a>
 80056fc:	2300      	movs	r3, #0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10b      	bne.n	800571a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	61bb      	str	r3, [r7, #24]
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	e7fd      	b.n	8005716 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800571a:	f002 f97d 	bl	8007a18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800571e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005722:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005726:	2b00      	cmp	r3, #0
 8005728:	d024      	beq.n	8005774 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800572a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572c:	1e5a      	subs	r2, r3, #1
 800572e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005730:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d104      	bne.n	8005744 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800573a:	f001 fb6f 	bl	8006e1c <pvTaskIncrementMutexHeldCount>
 800573e:	4602      	mov	r2, r0
 8005740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005742:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00f      	beq.n	800576c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800574c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574e:	3310      	adds	r3, #16
 8005750:	4618      	mov	r0, r3
 8005752:	f000 ffad 	bl	80066b0 <xTaskRemoveFromEventList>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800575c:	4b54      	ldr	r3, [pc, #336]	@ (80058b0 <xQueueSemaphoreTake+0x21c>)
 800575e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800576c:	f002 f986 	bl	8007a7c <vPortExitCritical>
				return pdPASS;
 8005770:	2301      	movs	r3, #1
 8005772:	e098      	b.n	80058a6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d112      	bne.n	80057a0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	617b      	str	r3, [r7, #20]
}
 8005792:	bf00      	nop
 8005794:	bf00      	nop
 8005796:	e7fd      	b.n	8005794 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005798:	f002 f970 	bl	8007a7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800579c:	2300      	movs	r3, #0
 800579e:	e082      	b.n	80058a6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057a6:	f107 030c 	add.w	r3, r7, #12
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 f848 	bl	8006840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057b0:	2301      	movs	r3, #1
 80057b2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057b4:	f002 f962 	bl	8007a7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057b8:	f000 fd16 	bl	80061e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057bc:	f002 f92c 	bl	8007a18 <vPortEnterCritical>
 80057c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057c6:	b25b      	sxtb	r3, r3
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d103      	bne.n	80057d6 <xQueueSemaphoreTake+0x142>
 80057ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057dc:	b25b      	sxtb	r3, r3
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	d103      	bne.n	80057ec <xQueueSemaphoreTake+0x158>
 80057e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057ec:	f002 f946 	bl	8007a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057f0:	463a      	mov	r2, r7
 80057f2:	f107 030c 	add.w	r3, r7, #12
 80057f6:	4611      	mov	r1, r2
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 f837 	bl	800686c <xTaskCheckForTimeOut>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d132      	bne.n	800586a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005804:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005806:	f000 f9f5 	bl	8005bf4 <prvIsQueueEmpty>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d026      	beq.n	800585e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d109      	bne.n	800582c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005818:	f002 f8fe 	bl	8007a18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800581c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	4618      	mov	r0, r3
 8005822:	f001 f987 	bl	8006b34 <xTaskPriorityInherit>
 8005826:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005828:	f002 f928 	bl	8007a7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800582c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800582e:	3324      	adds	r3, #36	@ 0x24
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	4611      	mov	r1, r2
 8005834:	4618      	mov	r0, r3
 8005836:	f000 feab 	bl	8006590 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800583a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800583c:	f000 f988 	bl	8005b50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005840:	f000 fce0 	bl	8006204 <xTaskResumeAll>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	f47f af67 	bne.w	800571a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800584c:	4b18      	ldr	r3, [pc, #96]	@ (80058b0 <xQueueSemaphoreTake+0x21c>)
 800584e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	e75d      	b.n	800571a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800585e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005860:	f000 f976 	bl	8005b50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005864:	f000 fcce 	bl	8006204 <xTaskResumeAll>
 8005868:	e757      	b.n	800571a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800586a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800586c:	f000 f970 	bl	8005b50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005870:	f000 fcc8 	bl	8006204 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005874:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005876:	f000 f9bd 	bl	8005bf4 <prvIsQueueEmpty>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	f43f af4c 	beq.w	800571a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00d      	beq.n	80058a4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005888:	f002 f8c6 	bl	8007a18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800588c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800588e:	f000 f8b7 	bl	8005a00 <prvGetDisinheritPriorityAfterTimeout>
 8005892:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800589a:	4618      	mov	r0, r3
 800589c:	f001 fa22 	bl	8006ce4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80058a0:	f002 f8ec 	bl	8007a7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3738      	adds	r7, #56	@ 0x38
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	e000ed04 	.word	0xe000ed04

080058b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08e      	sub	sp, #56	@ 0x38
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10b      	bne.n	80058e2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	623b      	str	r3, [r7, #32]
}
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	e7fd      	b.n	80058de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d103      	bne.n	80058f0 <xQueueReceiveFromISR+0x3c>
 80058e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <xQueueReceiveFromISR+0x40>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <xQueueReceiveFromISR+0x42>
 80058f4:	2300      	movs	r3, #0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	61fb      	str	r3, [r7, #28]
}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	e7fd      	b.n	800590e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005912:	f002 f961 	bl	8007bd8 <vPortValidateInterruptPriority>
	__asm volatile
 8005916:	f3ef 8211 	mrs	r2, BASEPRI
 800591a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	61ba      	str	r2, [r7, #24]
 800592c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800592e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005930:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005936:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d02f      	beq.n	800599e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800594c:	f000 f8da 	bl	8005b04 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005952:	1e5a      	subs	r2, r3, #1
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005958:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d112      	bne.n	8005988 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d016      	beq.n	8005998 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800596a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596c:	3310      	adds	r3, #16
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fe9e 	bl	80066b0 <xTaskRemoveFromEventList>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00e      	beq.n	8005998 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00b      	beq.n	8005998 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	e007      	b.n	8005998 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800598c:	3301      	adds	r3, #1
 800598e:	b2db      	uxtb	r3, r3
 8005990:	b25a      	sxtb	r2, r3
 8005992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005998:	2301      	movs	r3, #1
 800599a:	637b      	str	r3, [r7, #52]	@ 0x34
 800599c:	e001      	b.n	80059a2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800599e:	2300      	movs	r3, #0
 80059a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f383 8811 	msr	BASEPRI, r3
}
 80059ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3738      	adds	r7, #56	@ 0x38
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10b      	bne.n	80059e2 <vQueueDelete+0x2a>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	60bb      	str	r3, [r7, #8]
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	e7fd      	b.n	80059de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 f95e 	bl	8005ca4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f002 fa00 	bl	8007df8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80059f8:	bf00      	nop
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d006      	beq.n	8005a1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	e001      	b.n	8005a22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005a22:	68fb      	ldr	r3, [r7, #12]
	}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10d      	bne.n	8005a6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d14d      	bne.n	8005af2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 f8d2 	bl	8006c04 <xTaskPriorityDisinherit>
 8005a60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	609a      	str	r2, [r3, #8]
 8005a68:	e043      	b.n	8005af2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d119      	bne.n	8005aa4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6858      	ldr	r0, [r3, #4]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a78:	461a      	mov	r2, r3
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	f002 fbfc 	bl	8008278 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a88:	441a      	add	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d32b      	bcc.n	8005af2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	605a      	str	r2, [r3, #4]
 8005aa2:	e026      	b.n	8005af2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	68d8      	ldr	r0, [r3, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aac:	461a      	mov	r2, r3
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	f002 fbe2 	bl	8008278 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abc:	425b      	negs	r3, r3
 8005abe:	441a      	add	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d207      	bcs.n	8005ae0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad8:	425b      	negs	r3, r3
 8005ada:	441a      	add	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d105      	bne.n	8005af2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005afa:	697b      	ldr	r3, [r7, #20]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d018      	beq.n	8005b48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1e:	441a      	add	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d303      	bcc.n	8005b38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68d9      	ldr	r1, [r3, #12]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b40:	461a      	mov	r2, r3
 8005b42:	6838      	ldr	r0, [r7, #0]
 8005b44:	f002 fb98 	bl	8008278 <memcpy>
	}
}
 8005b48:	bf00      	nop
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b58:	f001 ff5e 	bl	8007a18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b64:	e011      	b.n	8005b8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d012      	beq.n	8005b94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	3324      	adds	r3, #36	@ 0x24
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fd9c 	bl	80066b0 <xTaskRemoveFromEventList>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b7e:	f000 fed9 	bl	8006934 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	dce9      	bgt.n	8005b66 <prvUnlockQueue+0x16>
 8005b92:	e000      	b.n	8005b96 <prvUnlockQueue+0x46>
					break;
 8005b94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	22ff      	movs	r2, #255	@ 0xff
 8005b9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b9e:	f001 ff6d 	bl	8007a7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ba2:	f001 ff39 	bl	8007a18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bae:	e011      	b.n	8005bd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d012      	beq.n	8005bde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3310      	adds	r3, #16
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fd77 	bl	80066b0 <xTaskRemoveFromEventList>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bc8:	f000 feb4 	bl	8006934 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bcc:	7bbb      	ldrb	r3, [r7, #14]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	dce9      	bgt.n	8005bb0 <prvUnlockQueue+0x60>
 8005bdc:	e000      	b.n	8005be0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	22ff      	movs	r2, #255	@ 0xff
 8005be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005be8:	f001 ff48 	bl	8007a7c <vPortExitCritical>
}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bfc:	f001 ff0c 	bl	8007a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	e001      	b.n	8005c12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c12:	f001 ff33 	bl	8007a7c <vPortExitCritical>

	return xReturn;
 8005c16:	68fb      	ldr	r3, [r7, #12]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c28:	f001 fef6 	bl	8007a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d102      	bne.n	8005c3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	e001      	b.n	8005c42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c42:	f001 ff1b 	bl	8007a7c <vPortExitCritical>

	return xReturn;
 8005c46:	68fb      	ldr	r3, [r7, #12]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	e014      	b.n	8005c8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c60:	4a0f      	ldr	r2, [pc, #60]	@ (8005ca0 <vQueueAddToRegistry+0x50>)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10b      	bne.n	8005c84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c6c:	490c      	ldr	r1, [pc, #48]	@ (8005ca0 <vQueueAddToRegistry+0x50>)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c76:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca0 <vQueueAddToRegistry+0x50>)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	4413      	add	r3, r2
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c82:	e006      	b.n	8005c92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b07      	cmp	r3, #7
 8005c8e:	d9e7      	bls.n	8005c60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	20000854 	.word	0x20000854

08005ca4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e016      	b.n	8005ce0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005cb2:	4a10      	ldr	r2, [pc, #64]	@ (8005cf4 <vQueueUnregisterQueue+0x50>)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4413      	add	r3, r2
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d10b      	bne.n	8005cda <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8005cf4 <vQueueUnregisterQueue+0x50>)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005ccc:	4a09      	ldr	r2, [pc, #36]	@ (8005cf4 <vQueueUnregisterQueue+0x50>)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	605a      	str	r2, [r3, #4]
				break;
 8005cd8:	e006      	b.n	8005ce8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b07      	cmp	r3, #7
 8005ce4:	d9e5      	bls.n	8005cb2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005ce6:	bf00      	nop
 8005ce8:	bf00      	nop
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20000854 	.word	0x20000854

08005cf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d08:	f001 fe86 	bl	8007a18 <vPortEnterCritical>
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d12:	b25b      	sxtb	r3, r3
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d103      	bne.n	8005d22 <vQueueWaitForMessageRestricted+0x2a>
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d28:	b25b      	sxtb	r3, r3
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2e:	d103      	bne.n	8005d38 <vQueueWaitForMessageRestricted+0x40>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d38:	f001 fea0 	bl	8007a7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	3324      	adds	r3, #36	@ 0x24
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	68b9      	ldr	r1, [r7, #8]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 fc83 	bl	8006658 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d52:	6978      	ldr	r0, [r7, #20]
 8005d54:	f7ff fefc 	bl	8005b50 <prvUnlockQueue>
	}
 8005d58:	bf00      	nop
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08e      	sub	sp, #56	@ 0x38
 8005d64:	af04      	add	r7, sp, #16
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10b      	bne.n	8005d8c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	623b      	str	r3, [r7, #32]
}
 8005d86:	bf00      	nop
 8005d88:	bf00      	nop
 8005d8a:	e7fd      	b.n	8005d88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10b      	bne.n	8005daa <xTaskCreateStatic+0x4a>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	61fb      	str	r3, [r7, #28]
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop
 8005da8:	e7fd      	b.n	8005da6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005daa:	235c      	movs	r3, #92	@ 0x5c
 8005dac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b5c      	cmp	r3, #92	@ 0x5c
 8005db2:	d00b      	beq.n	8005dcc <xTaskCreateStatic+0x6c>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	61bb      	str	r3, [r7, #24]
}
 8005dc6:	bf00      	nop
 8005dc8:	bf00      	nop
 8005dca:	e7fd      	b.n	8005dc8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005dcc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01e      	beq.n	8005e12 <xTaskCreateStatic+0xb2>
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d01b      	beq.n	8005e12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ddc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005de2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005dec:	2300      	movs	r3, #0
 8005dee:	9303      	str	r3, [sp, #12]
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	9302      	str	r3, [sp, #8]
 8005df4:	f107 0314 	add.w	r3, r7, #20
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	68b9      	ldr	r1, [r7, #8]
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 f850 	bl	8005eaa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e0c:	f000 f8de 	bl	8005fcc <prvAddNewTaskToReadyList>
 8005e10:	e001      	b.n	8005e16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e16:	697b      	ldr	r3, [r7, #20]
	}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3728      	adds	r7, #40	@ 0x28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08c      	sub	sp, #48	@ 0x30
 8005e24:	af04      	add	r7, sp, #16
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e30:	88fb      	ldrh	r3, [r7, #6]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 ff11 	bl	8007c5c <pvPortMalloc>
 8005e3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00e      	beq.n	8005e60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e42:	205c      	movs	r0, #92	@ 0x5c
 8005e44:	f001 ff0a 	bl	8007c5c <pvPortMalloc>
 8005e48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e56:	e005      	b.n	8005e64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e58:	6978      	ldr	r0, [r7, #20]
 8005e5a:	f001 ffcd 	bl	8007df8 <vPortFree>
 8005e5e:	e001      	b.n	8005e64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d017      	beq.n	8005e9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e72:	88fa      	ldrh	r2, [r7, #6]
 8005e74:	2300      	movs	r3, #0
 8005e76:	9303      	str	r3, [sp, #12]
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	9302      	str	r3, [sp, #8]
 8005e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f80e 	bl	8005eaa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e8e:	69f8      	ldr	r0, [r7, #28]
 8005e90:	f000 f89c 	bl	8005fcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e94:	2301      	movs	r3, #1
 8005e96:	61bb      	str	r3, [r7, #24]
 8005e98:	e002      	b.n	8005ea0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
	}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3720      	adds	r7, #32
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b088      	sub	sp, #32
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	607a      	str	r2, [r7, #4]
 8005eb6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	21a5      	movs	r1, #165	@ 0xa5
 8005ec4:	f002 f96e 	bl	80081a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	f023 0307 	bic.w	r3, r3, #7
 8005ee0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	617b      	str	r3, [r7, #20]
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	e7fd      	b.n	8005f00 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d01f      	beq.n	8005f4a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]
 8005f0e:	e012      	b.n	8005f36 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	7819      	ldrb	r1, [r3, #0]
 8005f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3334      	adds	r3, #52	@ 0x34
 8005f20:	460a      	mov	r2, r1
 8005f22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4413      	add	r3, r2
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d006      	beq.n	8005f3e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	3301      	adds	r3, #1
 8005f34:	61fb      	str	r3, [r7, #28]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	2b0f      	cmp	r3, #15
 8005f3a:	d9e9      	bls.n	8005f10 <prvInitialiseNewTask+0x66>
 8005f3c:	e000      	b.n	8005f40 <prvInitialiseNewTask+0x96>
			{
				break;
 8005f3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f48:	e003      	b.n	8005f52 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f54:	2b37      	cmp	r3, #55	@ 0x37
 8005f56:	d901      	bls.n	8005f5c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f58:	2337      	movs	r3, #55	@ 0x37
 8005f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f60:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f66:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f70:	3304      	adds	r3, #4
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe fe34 	bl	8004be0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	3318      	adds	r3, #24
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fe fe2f 	bl	8004be0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f96:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	68f9      	ldr	r1, [r7, #12]
 8005faa:	69b8      	ldr	r0, [r7, #24]
 8005fac:	f001 fc02 	bl	80077b4 <pxPortInitialiseStack>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fc2:	bf00      	nop
 8005fc4:	3720      	adds	r7, #32
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fd4:	f001 fd20 	bl	8007a18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8006090 <prvAddNewTaskToReadyList+0xc4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	4a2c      	ldr	r2, [pc, #176]	@ (8006090 <prvAddNewTaskToReadyList+0xc4>)
 8005fe0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8006094 <prvAddNewTaskToReadyList+0xc8>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fea:	4a2a      	ldr	r2, [pc, #168]	@ (8006094 <prvAddNewTaskToReadyList+0xc8>)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ff0:	4b27      	ldr	r3, [pc, #156]	@ (8006090 <prvAddNewTaskToReadyList+0xc4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d110      	bne.n	800601a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ff8:	f000 fcc0 	bl	800697c <prvInitialiseTaskLists>
 8005ffc:	e00d      	b.n	800601a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ffe:	4b26      	ldr	r3, [pc, #152]	@ (8006098 <prvAddNewTaskToReadyList+0xcc>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006006:	4b23      	ldr	r3, [pc, #140]	@ (8006094 <prvAddNewTaskToReadyList+0xc8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006010:	429a      	cmp	r2, r3
 8006012:	d802      	bhi.n	800601a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006014:	4a1f      	ldr	r2, [pc, #124]	@ (8006094 <prvAddNewTaskToReadyList+0xc8>)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800601a:	4b20      	ldr	r3, [pc, #128]	@ (800609c <prvAddNewTaskToReadyList+0xd0>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	4a1e      	ldr	r2, [pc, #120]	@ (800609c <prvAddNewTaskToReadyList+0xd0>)
 8006022:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006024:	4b1d      	ldr	r3, [pc, #116]	@ (800609c <prvAddNewTaskToReadyList+0xd0>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006030:	4b1b      	ldr	r3, [pc, #108]	@ (80060a0 <prvAddNewTaskToReadyList+0xd4>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d903      	bls.n	8006040 <prvAddNewTaskToReadyList+0x74>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603c:	4a18      	ldr	r2, [pc, #96]	@ (80060a0 <prvAddNewTaskToReadyList+0xd4>)
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4a15      	ldr	r2, [pc, #84]	@ (80060a4 <prvAddNewTaskToReadyList+0xd8>)
 800604e:	441a      	add	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3304      	adds	r3, #4
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f7fe fdcf 	bl	8004bfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800605c:	f001 fd0e 	bl	8007a7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006060:	4b0d      	ldr	r3, [pc, #52]	@ (8006098 <prvAddNewTaskToReadyList+0xcc>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00e      	beq.n	8006086 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006068:	4b0a      	ldr	r3, [pc, #40]	@ (8006094 <prvAddNewTaskToReadyList+0xc8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006072:	429a      	cmp	r2, r3
 8006074:	d207      	bcs.n	8006086 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006076:	4b0c      	ldr	r3, [pc, #48]	@ (80060a8 <prvAddNewTaskToReadyList+0xdc>)
 8006078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006086:	bf00      	nop
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000d68 	.word	0x20000d68
 8006094:	20000894 	.word	0x20000894
 8006098:	20000d74 	.word	0x20000d74
 800609c:	20000d84 	.word	0x20000d84
 80060a0:	20000d70 	.word	0x20000d70
 80060a4:	20000898 	.word	0x20000898
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d018      	beq.n	80060f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060be:	4b14      	ldr	r3, [pc, #80]	@ (8006110 <vTaskDelay+0x64>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00b      	beq.n	80060de <vTaskDelay+0x32>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	60bb      	str	r3, [r7, #8]
}
 80060d8:	bf00      	nop
 80060da:	bf00      	nop
 80060dc:	e7fd      	b.n	80060da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060de:	f000 f883 	bl	80061e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060e2:	2100      	movs	r1, #0
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fead 	bl	8006e44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060ea:	f000 f88b 	bl	8006204 <xTaskResumeAll>
 80060ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d107      	bne.n	8006106 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80060f6:	4b07      	ldr	r3, [pc, #28]	@ (8006114 <vTaskDelay+0x68>)
 80060f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006106:	bf00      	nop
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000d90 	.word	0x20000d90
 8006114:	e000ed04 	.word	0xe000ed04

08006118 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08a      	sub	sp, #40	@ 0x28
 800611c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006122:	2300      	movs	r3, #0
 8006124:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006126:	463a      	mov	r2, r7
 8006128:	1d39      	adds	r1, r7, #4
 800612a:	f107 0308 	add.w	r3, r7, #8
 800612e:	4618      	mov	r0, r3
 8006130:	f7fe fa8e 	bl	8004650 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	9202      	str	r2, [sp, #8]
 800613c:	9301      	str	r3, [sp, #4]
 800613e:	2300      	movs	r3, #0
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	2300      	movs	r3, #0
 8006144:	460a      	mov	r2, r1
 8006146:	4922      	ldr	r1, [pc, #136]	@ (80061d0 <vTaskStartScheduler+0xb8>)
 8006148:	4822      	ldr	r0, [pc, #136]	@ (80061d4 <vTaskStartScheduler+0xbc>)
 800614a:	f7ff fe09 	bl	8005d60 <xTaskCreateStatic>
 800614e:	4603      	mov	r3, r0
 8006150:	4a21      	ldr	r2, [pc, #132]	@ (80061d8 <vTaskStartScheduler+0xc0>)
 8006152:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006154:	4b20      	ldr	r3, [pc, #128]	@ (80061d8 <vTaskStartScheduler+0xc0>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800615c:	2301      	movs	r3, #1
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	e001      	b.n	8006166 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d102      	bne.n	8006172 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800616c:	f000 febe 	bl	8006eec <xTimerCreateTimerTask>
 8006170:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d116      	bne.n	80061a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	613b      	str	r3, [r7, #16]
}
 800618a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800618c:	4b13      	ldr	r3, [pc, #76]	@ (80061dc <vTaskStartScheduler+0xc4>)
 800618e:	f04f 32ff 	mov.w	r2, #4294967295
 8006192:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006194:	4b12      	ldr	r3, [pc, #72]	@ (80061e0 <vTaskStartScheduler+0xc8>)
 8006196:	2201      	movs	r2, #1
 8006198:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800619a:	4b12      	ldr	r3, [pc, #72]	@ (80061e4 <vTaskStartScheduler+0xcc>)
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061a0:	f001 fb96 	bl	80078d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061a4:	e00f      	b.n	80061c6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d10b      	bne.n	80061c6 <vTaskStartScheduler+0xae>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60fb      	str	r3, [r7, #12]
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <vTaskStartScheduler+0xaa>
}
 80061c6:	bf00      	nop
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	08008384 	.word	0x08008384
 80061d4:	0800694d 	.word	0x0800694d
 80061d8:	20000d8c 	.word	0x20000d8c
 80061dc:	20000d88 	.word	0x20000d88
 80061e0:	20000d74 	.word	0x20000d74
 80061e4:	20000d6c 	.word	0x20000d6c

080061e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80061ec:	4b04      	ldr	r3, [pc, #16]	@ (8006200 <vTaskSuspendAll+0x18>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3301      	adds	r3, #1
 80061f2:	4a03      	ldr	r2, [pc, #12]	@ (8006200 <vTaskSuspendAll+0x18>)
 80061f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80061f6:	bf00      	nop
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	20000d90 	.word	0x20000d90

08006204 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800620e:	2300      	movs	r3, #0
 8006210:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006212:	4b42      	ldr	r3, [pc, #264]	@ (800631c <xTaskResumeAll+0x118>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <xTaskResumeAll+0x2e>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	603b      	str	r3, [r7, #0]
}
 800622c:	bf00      	nop
 800622e:	bf00      	nop
 8006230:	e7fd      	b.n	800622e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006232:	f001 fbf1 	bl	8007a18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006236:	4b39      	ldr	r3, [pc, #228]	@ (800631c <xTaskResumeAll+0x118>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3b01      	subs	r3, #1
 800623c:	4a37      	ldr	r2, [pc, #220]	@ (800631c <xTaskResumeAll+0x118>)
 800623e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006240:	4b36      	ldr	r3, [pc, #216]	@ (800631c <xTaskResumeAll+0x118>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d162      	bne.n	800630e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006248:	4b35      	ldr	r3, [pc, #212]	@ (8006320 <xTaskResumeAll+0x11c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d05e      	beq.n	800630e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006250:	e02f      	b.n	80062b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006252:	4b34      	ldr	r3, [pc, #208]	@ (8006324 <xTaskResumeAll+0x120>)
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3318      	adds	r3, #24
 800625e:	4618      	mov	r0, r3
 8006260:	f7fe fd28 	bl	8004cb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3304      	adds	r3, #4
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe fd23 	bl	8004cb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006272:	4b2d      	ldr	r3, [pc, #180]	@ (8006328 <xTaskResumeAll+0x124>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d903      	bls.n	8006282 <xTaskResumeAll+0x7e>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627e:	4a2a      	ldr	r2, [pc, #168]	@ (8006328 <xTaskResumeAll+0x124>)
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4a27      	ldr	r2, [pc, #156]	@ (800632c <xTaskResumeAll+0x128>)
 8006290:	441a      	add	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3304      	adds	r3, #4
 8006296:	4619      	mov	r1, r3
 8006298:	4610      	mov	r0, r2
 800629a:	f7fe fcae 	bl	8004bfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a2:	4b23      	ldr	r3, [pc, #140]	@ (8006330 <xTaskResumeAll+0x12c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d302      	bcc.n	80062b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80062ac:	4b21      	ldr	r3, [pc, #132]	@ (8006334 <xTaskResumeAll+0x130>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006324 <xTaskResumeAll+0x120>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1cb      	bne.n	8006252 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062c0:	f000 fbfa 	bl	8006ab8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006338 <xTaskResumeAll+0x134>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d010      	beq.n	80062f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062d0:	f000 f846 	bl	8006360 <xTaskIncrementTick>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80062da:	4b16      	ldr	r3, [pc, #88]	@ (8006334 <xTaskResumeAll+0x130>)
 80062dc:	2201      	movs	r2, #1
 80062de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1f1      	bne.n	80062d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80062ec:	4b12      	ldr	r3, [pc, #72]	@ (8006338 <xTaskResumeAll+0x134>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062f2:	4b10      	ldr	r3, [pc, #64]	@ (8006334 <xTaskResumeAll+0x130>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062fa:	2301      	movs	r3, #1
 80062fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062fe:	4b0f      	ldr	r3, [pc, #60]	@ (800633c <xTaskResumeAll+0x138>)
 8006300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800630e:	f001 fbb5 	bl	8007a7c <vPortExitCritical>

	return xAlreadyYielded;
 8006312:	68bb      	ldr	r3, [r7, #8]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	20000d90 	.word	0x20000d90
 8006320:	20000d68 	.word	0x20000d68
 8006324:	20000d28 	.word	0x20000d28
 8006328:	20000d70 	.word	0x20000d70
 800632c:	20000898 	.word	0x20000898
 8006330:	20000894 	.word	0x20000894
 8006334:	20000d7c 	.word	0x20000d7c
 8006338:	20000d78 	.word	0x20000d78
 800633c:	e000ed04 	.word	0xe000ed04

08006340 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006346:	4b05      	ldr	r3, [pc, #20]	@ (800635c <xTaskGetTickCount+0x1c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800634c:	687b      	ldr	r3, [r7, #4]
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20000d6c 	.word	0x20000d6c

08006360 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006366:	2300      	movs	r3, #0
 8006368:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800636a:	4b4f      	ldr	r3, [pc, #316]	@ (80064a8 <xTaskIncrementTick+0x148>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 8090 	bne.w	8006494 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006374:	4b4d      	ldr	r3, [pc, #308]	@ (80064ac <xTaskIncrementTick+0x14c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3301      	adds	r3, #1
 800637a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800637c:	4a4b      	ldr	r2, [pc, #300]	@ (80064ac <xTaskIncrementTick+0x14c>)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d121      	bne.n	80063cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006388:	4b49      	ldr	r3, [pc, #292]	@ (80064b0 <xTaskIncrementTick+0x150>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00b      	beq.n	80063aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	603b      	str	r3, [r7, #0]
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	e7fd      	b.n	80063a6 <xTaskIncrementTick+0x46>
 80063aa:	4b41      	ldr	r3, [pc, #260]	@ (80064b0 <xTaskIncrementTick+0x150>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	4b40      	ldr	r3, [pc, #256]	@ (80064b4 <xTaskIncrementTick+0x154>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a3e      	ldr	r2, [pc, #248]	@ (80064b0 <xTaskIncrementTick+0x150>)
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	4a3e      	ldr	r2, [pc, #248]	@ (80064b4 <xTaskIncrementTick+0x154>)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	4b3e      	ldr	r3, [pc, #248]	@ (80064b8 <xTaskIncrementTick+0x158>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3301      	adds	r3, #1
 80063c4:	4a3c      	ldr	r2, [pc, #240]	@ (80064b8 <xTaskIncrementTick+0x158>)
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	f000 fb76 	bl	8006ab8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063cc:	4b3b      	ldr	r3, [pc, #236]	@ (80064bc <xTaskIncrementTick+0x15c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d349      	bcc.n	800646a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063d6:	4b36      	ldr	r3, [pc, #216]	@ (80064b0 <xTaskIncrementTick+0x150>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d104      	bne.n	80063ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e0:	4b36      	ldr	r3, [pc, #216]	@ (80064bc <xTaskIncrementTick+0x15c>)
 80063e2:	f04f 32ff 	mov.w	r2, #4294967295
 80063e6:	601a      	str	r2, [r3, #0]
					break;
 80063e8:	e03f      	b.n	800646a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ea:	4b31      	ldr	r3, [pc, #196]	@ (80064b0 <xTaskIncrementTick+0x150>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d203      	bcs.n	800640a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006402:	4a2e      	ldr	r2, [pc, #184]	@ (80064bc <xTaskIncrementTick+0x15c>)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006408:	e02f      	b.n	800646a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	3304      	adds	r3, #4
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fc50 	bl	8004cb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006418:	2b00      	cmp	r3, #0
 800641a:	d004      	beq.n	8006426 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	3318      	adds	r3, #24
 8006420:	4618      	mov	r0, r3
 8006422:	f7fe fc47 	bl	8004cb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800642a:	4b25      	ldr	r3, [pc, #148]	@ (80064c0 <xTaskIncrementTick+0x160>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	429a      	cmp	r2, r3
 8006430:	d903      	bls.n	800643a <xTaskIncrementTick+0xda>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006436:	4a22      	ldr	r2, [pc, #136]	@ (80064c0 <xTaskIncrementTick+0x160>)
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4a1f      	ldr	r2, [pc, #124]	@ (80064c4 <xTaskIncrementTick+0x164>)
 8006448:	441a      	add	r2, r3
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	3304      	adds	r3, #4
 800644e:	4619      	mov	r1, r3
 8006450:	4610      	mov	r0, r2
 8006452:	f7fe fbd2 	bl	8004bfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800645a:	4b1b      	ldr	r3, [pc, #108]	@ (80064c8 <xTaskIncrementTick+0x168>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006460:	429a      	cmp	r2, r3
 8006462:	d3b8      	bcc.n	80063d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006464:	2301      	movs	r3, #1
 8006466:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006468:	e7b5      	b.n	80063d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800646a:	4b17      	ldr	r3, [pc, #92]	@ (80064c8 <xTaskIncrementTick+0x168>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006470:	4914      	ldr	r1, [pc, #80]	@ (80064c4 <xTaskIncrementTick+0x164>)
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d901      	bls.n	8006486 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006482:	2301      	movs	r3, #1
 8006484:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006486:	4b11      	ldr	r3, [pc, #68]	@ (80064cc <xTaskIncrementTick+0x16c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800648e:	2301      	movs	r3, #1
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e004      	b.n	800649e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006494:	4b0e      	ldr	r3, [pc, #56]	@ (80064d0 <xTaskIncrementTick+0x170>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3301      	adds	r3, #1
 800649a:	4a0d      	ldr	r2, [pc, #52]	@ (80064d0 <xTaskIncrementTick+0x170>)
 800649c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800649e:	697b      	ldr	r3, [r7, #20]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20000d90 	.word	0x20000d90
 80064ac:	20000d6c 	.word	0x20000d6c
 80064b0:	20000d20 	.word	0x20000d20
 80064b4:	20000d24 	.word	0x20000d24
 80064b8:	20000d80 	.word	0x20000d80
 80064bc:	20000d88 	.word	0x20000d88
 80064c0:	20000d70 	.word	0x20000d70
 80064c4:	20000898 	.word	0x20000898
 80064c8:	20000894 	.word	0x20000894
 80064cc:	20000d7c 	.word	0x20000d7c
 80064d0:	20000d78 	.word	0x20000d78

080064d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064da:	4b28      	ldr	r3, [pc, #160]	@ (800657c <vTaskSwitchContext+0xa8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064e2:	4b27      	ldr	r3, [pc, #156]	@ (8006580 <vTaskSwitchContext+0xac>)
 80064e4:	2201      	movs	r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064e8:	e042      	b.n	8006570 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80064ea:	4b25      	ldr	r3, [pc, #148]	@ (8006580 <vTaskSwitchContext+0xac>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f0:	4b24      	ldr	r3, [pc, #144]	@ (8006584 <vTaskSwitchContext+0xb0>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e011      	b.n	800651c <vTaskSwitchContext+0x48>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10b      	bne.n	8006516 <vTaskSwitchContext+0x42>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	607b      	str	r3, [r7, #4]
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	e7fd      	b.n	8006512 <vTaskSwitchContext+0x3e>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3b01      	subs	r3, #1
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	491a      	ldr	r1, [pc, #104]	@ (8006588 <vTaskSwitchContext+0xb4>)
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0e3      	beq.n	80064f8 <vTaskSwitchContext+0x24>
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4a13      	ldr	r2, [pc, #76]	@ (8006588 <vTaskSwitchContext+0xb4>)
 800653c:	4413      	add	r3, r2
 800653e:	60bb      	str	r3, [r7, #8]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	605a      	str	r2, [r3, #4]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	3308      	adds	r3, #8
 8006552:	429a      	cmp	r2, r3
 8006554:	d104      	bne.n	8006560 <vTaskSwitchContext+0x8c>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	605a      	str	r2, [r3, #4]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	4a09      	ldr	r2, [pc, #36]	@ (800658c <vTaskSwitchContext+0xb8>)
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	4a06      	ldr	r2, [pc, #24]	@ (8006584 <vTaskSwitchContext+0xb0>)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6013      	str	r3, [r2, #0]
}
 8006570:	bf00      	nop
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	20000d90 	.word	0x20000d90
 8006580:	20000d7c 	.word	0x20000d7c
 8006584:	20000d70 	.word	0x20000d70
 8006588:	20000898 	.word	0x20000898
 800658c:	20000894 	.word	0x20000894

08006590 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10b      	bne.n	80065b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	60fb      	str	r3, [r7, #12]
}
 80065b2:	bf00      	nop
 80065b4:	bf00      	nop
 80065b6:	e7fd      	b.n	80065b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065b8:	4b07      	ldr	r3, [pc, #28]	@ (80065d8 <vTaskPlaceOnEventList+0x48>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3318      	adds	r3, #24
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7fe fb3e 	bl	8004c42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065c6:	2101      	movs	r1, #1
 80065c8:	6838      	ldr	r0, [r7, #0]
 80065ca:	f000 fc3b 	bl	8006e44 <prvAddCurrentTaskToDelayedList>
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000894 	.word	0x20000894

080065dc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	617b      	str	r3, [r7, #20]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006606:	4b12      	ldr	r3, [pc, #72]	@ (8006650 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10b      	bne.n	8006626 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	613b      	str	r3, [r7, #16]
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop
 8006624:	e7fd      	b.n	8006622 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006626:	4b0b      	ldr	r3, [pc, #44]	@ (8006654 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006630:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006632:	4b08      	ldr	r3, [pc, #32]	@ (8006654 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3318      	adds	r3, #24
 8006638:	4619      	mov	r1, r3
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f7fe fadd 	bl	8004bfa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006640:	2101      	movs	r1, #1
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fbfe 	bl	8006e44 <prvAddCurrentTaskToDelayedList>
}
 8006648:	bf00      	nop
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20000d90 	.word	0x20000d90
 8006654:	20000894 	.word	0x20000894

08006658 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10b      	bne.n	8006682 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	617b      	str	r3, [r7, #20]
}
 800667c:	bf00      	nop
 800667e:	bf00      	nop
 8006680:	e7fd      	b.n	800667e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006682:	4b0a      	ldr	r3, [pc, #40]	@ (80066ac <vTaskPlaceOnEventListRestricted+0x54>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3318      	adds	r3, #24
 8006688:	4619      	mov	r1, r3
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7fe fab5 	bl	8004bfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006696:	f04f 33ff 	mov.w	r3, #4294967295
 800669a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	68b8      	ldr	r0, [r7, #8]
 80066a0:	f000 fbd0 	bl	8006e44 <prvAddCurrentTaskToDelayedList>
	}
 80066a4:	bf00      	nop
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000894 	.word	0x20000894

080066b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10b      	bne.n	80066de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	60fb      	str	r3, [r7, #12]
}
 80066d8:	bf00      	nop
 80066da:	bf00      	nop
 80066dc:	e7fd      	b.n	80066da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	3318      	adds	r3, #24
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fe fae6 	bl	8004cb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006760 <xTaskRemoveFromEventList+0xb0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d11d      	bne.n	800672c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	3304      	adds	r3, #4
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fe fadd 	bl	8004cb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066fe:	4b19      	ldr	r3, [pc, #100]	@ (8006764 <xTaskRemoveFromEventList+0xb4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d903      	bls.n	800670e <xTaskRemoveFromEventList+0x5e>
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670a:	4a16      	ldr	r2, [pc, #88]	@ (8006764 <xTaskRemoveFromEventList+0xb4>)
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4a13      	ldr	r2, [pc, #76]	@ (8006768 <xTaskRemoveFromEventList+0xb8>)
 800671c:	441a      	add	r2, r3
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	3304      	adds	r3, #4
 8006722:	4619      	mov	r1, r3
 8006724:	4610      	mov	r0, r2
 8006726:	f7fe fa68 	bl	8004bfa <vListInsertEnd>
 800672a:	e005      	b.n	8006738 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3318      	adds	r3, #24
 8006730:	4619      	mov	r1, r3
 8006732:	480e      	ldr	r0, [pc, #56]	@ (800676c <xTaskRemoveFromEventList+0xbc>)
 8006734:	f7fe fa61 	bl	8004bfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800673c:	4b0c      	ldr	r3, [pc, #48]	@ (8006770 <xTaskRemoveFromEventList+0xc0>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006742:	429a      	cmp	r2, r3
 8006744:	d905      	bls.n	8006752 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006746:	2301      	movs	r3, #1
 8006748:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800674a:	4b0a      	ldr	r3, [pc, #40]	@ (8006774 <xTaskRemoveFromEventList+0xc4>)
 800674c:	2201      	movs	r2, #1
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	e001      	b.n	8006756 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006756:	697b      	ldr	r3, [r7, #20]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20000d90 	.word	0x20000d90
 8006764:	20000d70 	.word	0x20000d70
 8006768:	20000898 	.word	0x20000898
 800676c:	20000d28 	.word	0x20000d28
 8006770:	20000894 	.word	0x20000894
 8006774:	20000d7c 	.word	0x20000d7c

08006778 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006782:	4b2a      	ldr	r3, [pc, #168]	@ (800682c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10b      	bne.n	80067a2 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	613b      	str	r3, [r7, #16]
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	e7fd      	b.n	800679e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10b      	bne.n	80067d0 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	60fb      	str	r3, [r7, #12]
}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	e7fd      	b.n	80067cc <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7fe fa6f 	bl	8004cb4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	3304      	adds	r3, #4
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe fa6a 	bl	8004cb4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e4:	4b12      	ldr	r3, [pc, #72]	@ (8006830 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d903      	bls.n	80067f4 <vTaskRemoveFromUnorderedEventList+0x7c>
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f0:	4a0f      	ldr	r2, [pc, #60]	@ (8006830 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4a0c      	ldr	r2, [pc, #48]	@ (8006834 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006802:	441a      	add	r2, r3
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	3304      	adds	r3, #4
 8006808:	4619      	mov	r1, r3
 800680a:	4610      	mov	r0, r2
 800680c:	f7fe f9f5 	bl	8004bfa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006814:	4b08      	ldr	r3, [pc, #32]	@ (8006838 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	429a      	cmp	r2, r3
 800681c:	d902      	bls.n	8006824 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800681e:	4b07      	ldr	r3, [pc, #28]	@ (800683c <vTaskRemoveFromUnorderedEventList+0xc4>)
 8006820:	2201      	movs	r2, #1
 8006822:	601a      	str	r2, [r3, #0]
	}
}
 8006824:	bf00      	nop
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	20000d90 	.word	0x20000d90
 8006830:	20000d70 	.word	0x20000d70
 8006834:	20000898 	.word	0x20000898
 8006838:	20000894 	.word	0x20000894
 800683c:	20000d7c 	.word	0x20000d7c

08006840 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006848:	4b06      	ldr	r3, [pc, #24]	@ (8006864 <vTaskInternalSetTimeOutState+0x24>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006850:	4b05      	ldr	r3, [pc, #20]	@ (8006868 <vTaskInternalSetTimeOutState+0x28>)
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	605a      	str	r2, [r3, #4]
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	20000d80 	.word	0x20000d80
 8006868:	20000d6c 	.word	0x20000d6c

0800686c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b088      	sub	sp, #32
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10b      	bne.n	8006894 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	613b      	str	r3, [r7, #16]
}
 800688e:	bf00      	nop
 8006890:	bf00      	nop
 8006892:	e7fd      	b.n	8006890 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10b      	bne.n	80068b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	60fb      	str	r3, [r7, #12]
}
 80068ac:	bf00      	nop
 80068ae:	bf00      	nop
 80068b0:	e7fd      	b.n	80068ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80068b2:	f001 f8b1 	bl	8007a18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068b6:	4b1d      	ldr	r3, [pc, #116]	@ (800692c <xTaskCheckForTimeOut+0xc0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ce:	d102      	bne.n	80068d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068d0:	2300      	movs	r3, #0
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	e023      	b.n	800691e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4b15      	ldr	r3, [pc, #84]	@ (8006930 <xTaskCheckForTimeOut+0xc4>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d007      	beq.n	80068f2 <xTaskCheckForTimeOut+0x86>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d302      	bcc.n	80068f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068ec:	2301      	movs	r3, #1
 80068ee:	61fb      	str	r3, [r7, #28]
 80068f0:	e015      	b.n	800691e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d20b      	bcs.n	8006914 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	1ad2      	subs	r2, r2, r3
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff ff99 	bl	8006840 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800690e:	2300      	movs	r3, #0
 8006910:	61fb      	str	r3, [r7, #28]
 8006912:	e004      	b.n	800691e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2200      	movs	r2, #0
 8006918:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800691a:	2301      	movs	r3, #1
 800691c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800691e:	f001 f8ad 	bl	8007a7c <vPortExitCritical>

	return xReturn;
 8006922:	69fb      	ldr	r3, [r7, #28]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3720      	adds	r7, #32
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000d6c 	.word	0x20000d6c
 8006930:	20000d80 	.word	0x20000d80

08006934 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006934:	b480      	push	{r7}
 8006936:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006938:	4b03      	ldr	r3, [pc, #12]	@ (8006948 <vTaskMissedYield+0x14>)
 800693a:	2201      	movs	r2, #1
 800693c:	601a      	str	r2, [r3, #0]
}
 800693e:	bf00      	nop
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	20000d7c 	.word	0x20000d7c

0800694c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006954:	f000 f852 	bl	80069fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006958:	4b06      	ldr	r3, [pc, #24]	@ (8006974 <prvIdleTask+0x28>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d9f9      	bls.n	8006954 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006960:	4b05      	ldr	r3, [pc, #20]	@ (8006978 <prvIdleTask+0x2c>)
 8006962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006970:	e7f0      	b.n	8006954 <prvIdleTask+0x8>
 8006972:	bf00      	nop
 8006974:	20000898 	.word	0x20000898
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006982:	2300      	movs	r3, #0
 8006984:	607b      	str	r3, [r7, #4]
 8006986:	e00c      	b.n	80069a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4a12      	ldr	r2, [pc, #72]	@ (80069dc <prvInitialiseTaskLists+0x60>)
 8006994:	4413      	add	r3, r2
 8006996:	4618      	mov	r0, r3
 8006998:	f7fe f902 	bl	8004ba0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3301      	adds	r3, #1
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b37      	cmp	r3, #55	@ 0x37
 80069a6:	d9ef      	bls.n	8006988 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069a8:	480d      	ldr	r0, [pc, #52]	@ (80069e0 <prvInitialiseTaskLists+0x64>)
 80069aa:	f7fe f8f9 	bl	8004ba0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069ae:	480d      	ldr	r0, [pc, #52]	@ (80069e4 <prvInitialiseTaskLists+0x68>)
 80069b0:	f7fe f8f6 	bl	8004ba0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069b4:	480c      	ldr	r0, [pc, #48]	@ (80069e8 <prvInitialiseTaskLists+0x6c>)
 80069b6:	f7fe f8f3 	bl	8004ba0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069ba:	480c      	ldr	r0, [pc, #48]	@ (80069ec <prvInitialiseTaskLists+0x70>)
 80069bc:	f7fe f8f0 	bl	8004ba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069c0:	480b      	ldr	r0, [pc, #44]	@ (80069f0 <prvInitialiseTaskLists+0x74>)
 80069c2:	f7fe f8ed 	bl	8004ba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069c6:	4b0b      	ldr	r3, [pc, #44]	@ (80069f4 <prvInitialiseTaskLists+0x78>)
 80069c8:	4a05      	ldr	r2, [pc, #20]	@ (80069e0 <prvInitialiseTaskLists+0x64>)
 80069ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069cc:	4b0a      	ldr	r3, [pc, #40]	@ (80069f8 <prvInitialiseTaskLists+0x7c>)
 80069ce:	4a05      	ldr	r2, [pc, #20]	@ (80069e4 <prvInitialiseTaskLists+0x68>)
 80069d0:	601a      	str	r2, [r3, #0]
}
 80069d2:	bf00      	nop
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20000898 	.word	0x20000898
 80069e0:	20000cf8 	.word	0x20000cf8
 80069e4:	20000d0c 	.word	0x20000d0c
 80069e8:	20000d28 	.word	0x20000d28
 80069ec:	20000d3c 	.word	0x20000d3c
 80069f0:	20000d54 	.word	0x20000d54
 80069f4:	20000d20 	.word	0x20000d20
 80069f8:	20000d24 	.word	0x20000d24

080069fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a02:	e019      	b.n	8006a38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a04:	f001 f808 	bl	8007a18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a08:	4b10      	ldr	r3, [pc, #64]	@ (8006a4c <prvCheckTasksWaitingTermination+0x50>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3304      	adds	r3, #4
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe f94d 	bl	8004cb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a50 <prvCheckTasksWaitingTermination+0x54>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	4a0b      	ldr	r2, [pc, #44]	@ (8006a50 <prvCheckTasksWaitingTermination+0x54>)
 8006a22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a24:	4b0b      	ldr	r3, [pc, #44]	@ (8006a54 <prvCheckTasksWaitingTermination+0x58>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8006a54 <prvCheckTasksWaitingTermination+0x58>)
 8006a2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a2e:	f001 f825 	bl	8007a7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f810 	bl	8006a58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a38:	4b06      	ldr	r3, [pc, #24]	@ (8006a54 <prvCheckTasksWaitingTermination+0x58>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e1      	bne.n	8006a04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a40:	bf00      	nop
 8006a42:	bf00      	nop
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20000d3c 	.word	0x20000d3c
 8006a50:	20000d68 	.word	0x20000d68
 8006a54:	20000d50 	.word	0x20000d50

08006a58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d108      	bne.n	8006a7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 f9c2 	bl	8007df8 <vPortFree>
				vPortFree( pxTCB );
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f001 f9bf 	bl	8007df8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a7a:	e019      	b.n	8006ab0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d103      	bne.n	8006a8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 f9b6 	bl	8007df8 <vPortFree>
	}
 8006a8c:	e010      	b.n	8006ab0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d00b      	beq.n	8006ab0 <prvDeleteTCB+0x58>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	60fb      	str	r3, [r7, #12]
}
 8006aaa:	bf00      	nop
 8006aac:	bf00      	nop
 8006aae:	e7fd      	b.n	8006aac <prvDeleteTCB+0x54>
	}
 8006ab0:	bf00      	nop
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006abe:	4b0c      	ldr	r3, [pc, #48]	@ (8006af0 <prvResetNextTaskUnblockTime+0x38>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d104      	bne.n	8006ad2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8006af4 <prvResetNextTaskUnblockTime+0x3c>)
 8006aca:	f04f 32ff 	mov.w	r2, #4294967295
 8006ace:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ad0:	e008      	b.n	8006ae4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad2:	4b07      	ldr	r3, [pc, #28]	@ (8006af0 <prvResetNextTaskUnblockTime+0x38>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4a04      	ldr	r2, [pc, #16]	@ (8006af4 <prvResetNextTaskUnblockTime+0x3c>)
 8006ae2:	6013      	str	r3, [r2, #0]
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	20000d20 	.word	0x20000d20
 8006af4:	20000d88 	.word	0x20000d88

08006af8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006afe:	4b0b      	ldr	r3, [pc, #44]	@ (8006b2c <xTaskGetSchedulerState+0x34>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d102      	bne.n	8006b0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b06:	2301      	movs	r3, #1
 8006b08:	607b      	str	r3, [r7, #4]
 8006b0a:	e008      	b.n	8006b1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b0c:	4b08      	ldr	r3, [pc, #32]	@ (8006b30 <xTaskGetSchedulerState+0x38>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d102      	bne.n	8006b1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b14:	2302      	movs	r3, #2
 8006b16:	607b      	str	r3, [r7, #4]
 8006b18:	e001      	b.n	8006b1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b1e:	687b      	ldr	r3, [r7, #4]
	}
 8006b20:	4618      	mov	r0, r3
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	20000d74 	.word	0x20000d74
 8006b30:	20000d90 	.word	0x20000d90

08006b34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006b40:	2300      	movs	r3, #0
 8006b42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d051      	beq.n	8006bee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8006bf8 <xTaskPriorityInherit+0xc4>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d241      	bcs.n	8006bdc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	db06      	blt.n	8006b6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b60:	4b25      	ldr	r3, [pc, #148]	@ (8006bf8 <xTaskPriorityInherit+0xc4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b66:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6959      	ldr	r1, [r3, #20]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8006bfc <xTaskPriorityInherit+0xc8>)
 8006b80:	4413      	add	r3, r2
 8006b82:	4299      	cmp	r1, r3
 8006b84:	d122      	bne.n	8006bcc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	3304      	adds	r3, #4
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fe f892 	bl	8004cb4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b90:	4b19      	ldr	r3, [pc, #100]	@ (8006bf8 <xTaskPriorityInherit+0xc4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b9e:	4b18      	ldr	r3, [pc, #96]	@ (8006c00 <xTaskPriorityInherit+0xcc>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d903      	bls.n	8006bae <xTaskPriorityInherit+0x7a>
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006baa:	4a15      	ldr	r2, [pc, #84]	@ (8006c00 <xTaskPriorityInherit+0xcc>)
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4a10      	ldr	r2, [pc, #64]	@ (8006bfc <xTaskPriorityInherit+0xc8>)
 8006bbc:	441a      	add	r2, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	f7fe f818 	bl	8004bfa <vListInsertEnd>
 8006bca:	e004      	b.n	8006bd6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf8 <xTaskPriorityInherit+0xc4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	e008      	b.n	8006bee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006be0:	4b05      	ldr	r3, [pc, #20]	@ (8006bf8 <xTaskPriorityInherit+0xc4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d201      	bcs.n	8006bee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006bea:	2301      	movs	r3, #1
 8006bec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bee:	68fb      	ldr	r3, [r7, #12]
	}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20000894 	.word	0x20000894
 8006bfc:	20000898 	.word	0x20000898
 8006c00:	20000d70 	.word	0x20000d70

08006c04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d058      	beq.n	8006ccc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006cd8 <xTaskPriorityDisinherit+0xd4>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d00b      	beq.n	8006c3c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60fb      	str	r3, [r7, #12]
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	e7fd      	b.n	8006c38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10b      	bne.n	8006c5c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	60bb      	str	r3, [r7, #8]
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	e7fd      	b.n	8006c58 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c60:	1e5a      	subs	r2, r3, #1
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d02c      	beq.n	8006ccc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d128      	bne.n	8006ccc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe f818 	bl	8004cb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c90:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8006cdc <xTaskPriorityDisinherit+0xd8>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d903      	bls.n	8006cac <xTaskPriorityDisinherit+0xa8>
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8006cdc <xTaskPriorityDisinherit+0xd8>)
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4a09      	ldr	r2, [pc, #36]	@ (8006ce0 <xTaskPriorityDisinherit+0xdc>)
 8006cba:	441a      	add	r2, r3
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	f7fd ff99 	bl	8004bfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ccc:	697b      	ldr	r3, [r7, #20]
	}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000894 	.word	0x20000894
 8006cdc:	20000d70 	.word	0x20000d70
 8006ce0:	20000898 	.word	0x20000898

08006ce4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d06c      	beq.n	8006dd6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10b      	bne.n	8006d1c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	60fb      	str	r3, [r7, #12]
}
 8006d16:	bf00      	nop
 8006d18:	bf00      	nop
 8006d1a:	e7fd      	b.n	8006d18 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d902      	bls.n	8006d2c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	61fb      	str	r3, [r7, #28]
 8006d2a:	e002      	b.n	8006d32 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d30:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d36:	69fa      	ldr	r2, [r7, #28]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d04c      	beq.n	8006dd6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d147      	bne.n	8006dd6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006d46:	4b26      	ldr	r3, [pc, #152]	@ (8006de0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d10b      	bne.n	8006d68 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	60bb      	str	r3, [r7, #8]
}
 8006d62:	bf00      	nop
 8006d64:	bf00      	nop
 8006d66:	e7fd      	b.n	8006d64 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	db04      	blt.n	8006d86 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	6959      	ldr	r1, [r3, #20]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4a13      	ldr	r2, [pc, #76]	@ (8006de4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006d96:	4413      	add	r3, r2
 8006d98:	4299      	cmp	r1, r3
 8006d9a:	d11c      	bne.n	8006dd6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fd ff87 	bl	8004cb4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006daa:	4b0f      	ldr	r3, [pc, #60]	@ (8006de8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d903      	bls.n	8006dba <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db6:	4a0c      	ldr	r2, [pc, #48]	@ (8006de8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4a07      	ldr	r2, [pc, #28]	@ (8006de4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006dc8:	441a      	add	r2, r3
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f7fd ff12 	bl	8004bfa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dd6:	bf00      	nop
 8006dd8:	3720      	adds	r7, #32
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20000894 	.word	0x20000894
 8006de4:	20000898 	.word	0x20000898
 8006de8:	20000d70 	.word	0x20000d70

08006dec <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006df2:	4b09      	ldr	r3, [pc, #36]	@ (8006e18 <uxTaskResetEventItemValue+0x2c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dfa:	4b07      	ldr	r3, [pc, #28]	@ (8006e18 <uxTaskResetEventItemValue+0x2c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e00:	4b05      	ldr	r3, [pc, #20]	@ (8006e18 <uxTaskResetEventItemValue+0x2c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8006e08:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006e0a:	687b      	ldr	r3, [r7, #4]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	20000894 	.word	0x20000894

08006e1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e20:	4b07      	ldr	r3, [pc, #28]	@ (8006e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d004      	beq.n	8006e32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e28:	4b05      	ldr	r3, [pc, #20]	@ (8006e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e2e:	3201      	adds	r2, #1
 8006e30:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006e32:	4b03      	ldr	r3, [pc, #12]	@ (8006e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e34:	681b      	ldr	r3, [r3, #0]
	}
 8006e36:	4618      	mov	r0, r3
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	20000894 	.word	0x20000894

08006e44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e4e:	4b21      	ldr	r3, [pc, #132]	@ (8006ed4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e54:	4b20      	ldr	r3, [pc, #128]	@ (8006ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fd ff2a 	bl	8004cb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e66:	d10a      	bne.n	8006e7e <prvAddCurrentTaskToDelayedList+0x3a>
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d007      	beq.n	8006e7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3304      	adds	r3, #4
 8006e74:	4619      	mov	r1, r3
 8006e76:	4819      	ldr	r0, [pc, #100]	@ (8006edc <prvAddCurrentTaskToDelayedList+0x98>)
 8006e78:	f7fd febf 	bl	8004bfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e7c:	e026      	b.n	8006ecc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4413      	add	r3, r2
 8006e84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e86:	4b14      	ldr	r3, [pc, #80]	@ (8006ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d209      	bcs.n	8006eaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e96:	4b12      	ldr	r3, [pc, #72]	@ (8006ee0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	f7fd fecd 	bl	8004c42 <vListInsert>
}
 8006ea8:	e010      	b.n	8006ecc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	f7fd fec3 	bl	8004c42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d202      	bcs.n	8006ecc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ec6:	4a08      	ldr	r2, [pc, #32]	@ (8006ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	6013      	str	r3, [r2, #0]
}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	20000d6c 	.word	0x20000d6c
 8006ed8:	20000894 	.word	0x20000894
 8006edc:	20000d54 	.word	0x20000d54
 8006ee0:	20000d24 	.word	0x20000d24
 8006ee4:	20000d20 	.word	0x20000d20
 8006ee8:	20000d88 	.word	0x20000d88

08006eec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08a      	sub	sp, #40	@ 0x28
 8006ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006ef6:	f000 fbb1 	bl	800765c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006efa:	4b1d      	ldr	r3, [pc, #116]	@ (8006f70 <xTimerCreateTimerTask+0x84>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d021      	beq.n	8006f46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f0a:	1d3a      	adds	r2, r7, #4
 8006f0c:	f107 0108 	add.w	r1, r7, #8
 8006f10:	f107 030c 	add.w	r3, r7, #12
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fd fbb5 	bl	8004684 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	9202      	str	r2, [sp, #8]
 8006f22:	9301      	str	r3, [sp, #4]
 8006f24:	2302      	movs	r3, #2
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	460a      	mov	r2, r1
 8006f2c:	4911      	ldr	r1, [pc, #68]	@ (8006f74 <xTimerCreateTimerTask+0x88>)
 8006f2e:	4812      	ldr	r0, [pc, #72]	@ (8006f78 <xTimerCreateTimerTask+0x8c>)
 8006f30:	f7fe ff16 	bl	8005d60 <xTaskCreateStatic>
 8006f34:	4603      	mov	r3, r0
 8006f36:	4a11      	ldr	r2, [pc, #68]	@ (8006f7c <xTimerCreateTimerTask+0x90>)
 8006f38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f3a:	4b10      	ldr	r3, [pc, #64]	@ (8006f7c <xTimerCreateTimerTask+0x90>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f42:	2301      	movs	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10b      	bne.n	8006f64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	613b      	str	r3, [r7, #16]
}
 8006f5e:	bf00      	nop
 8006f60:	bf00      	nop
 8006f62:	e7fd      	b.n	8006f60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f64:	697b      	ldr	r3, [r7, #20]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000dc4 	.word	0x20000dc4
 8006f74:	0800838c 	.word	0x0800838c
 8006f78:	080071f5 	.word	0x080071f5
 8006f7c:	20000dc8 	.word	0x20000dc8

08006f80 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006f8e:	202c      	movs	r0, #44	@ 0x2c
 8006f90:	f000 fe64 	bl	8007c5c <pvPortMalloc>
 8006f94:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00d      	beq.n	8006fb8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	9301      	str	r3, [sp, #4]
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	68b9      	ldr	r1, [r7, #8]
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 f845 	bl	8007042 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006fb8:	697b      	ldr	r3, [r7, #20]
	}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b08a      	sub	sp, #40	@ 0x28
 8006fc6:	af02      	add	r7, sp, #8
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
 8006fce:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006fd0:	232c      	movs	r3, #44	@ 0x2c
 8006fd2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	2b2c      	cmp	r3, #44	@ 0x2c
 8006fd8:	d00b      	beq.n	8006ff2 <xTimerCreateStatic+0x30>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	61bb      	str	r3, [r7, #24]
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	e7fd      	b.n	8006fee <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ff2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10b      	bne.n	8007012 <xTimerCreateStatic+0x50>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	617b      	str	r3, [r7, #20]
}
 800700c:	bf00      	nop
 800700e:	bf00      	nop
 8007010:	e7fd      	b.n	800700e <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007014:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00d      	beq.n	8007038 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	68b9      	ldr	r1, [r7, #8]
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 f805 	bl	8007042 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007038:	69fb      	ldr	r3, [r7, #28]
	}
 800703a:	4618      	mov	r0, r3
 800703c:	3720      	adds	r7, #32
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b086      	sub	sp, #24
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	607a      	str	r2, [r7, #4]
 800704e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10b      	bne.n	800706e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	617b      	str	r3, [r7, #20]
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	e7fd      	b.n	800706a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01e      	beq.n	80070b2 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007074:	f000 faf2 	bl	800765c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800708a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708c:	6a3a      	ldr	r2, [r7, #32]
 800708e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	3304      	adds	r3, #4
 8007094:	4618      	mov	r0, r3
 8007096:	f7fd fda3 	bl	8004be0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d008      	beq.n	80070b2 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070a6:	f043 0304 	orr.w	r3, r3, #4
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80070b2:	bf00      	nop
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08a      	sub	sp, #40	@ 0x28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <xTimerGenericCommand+0x30>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	623b      	str	r3, [r7, #32]
}
 80070e6:	bf00      	nop
 80070e8:	bf00      	nop
 80070ea:	e7fd      	b.n	80070e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070ec:	4b19      	ldr	r3, [pc, #100]	@ (8007154 <xTimerGenericCommand+0x98>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d02a      	beq.n	800714a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b05      	cmp	r3, #5
 8007104:	dc18      	bgt.n	8007138 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007106:	f7ff fcf7 	bl	8006af8 <xTaskGetSchedulerState>
 800710a:	4603      	mov	r3, r0
 800710c:	2b02      	cmp	r3, #2
 800710e:	d109      	bne.n	8007124 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007110:	4b10      	ldr	r3, [pc, #64]	@ (8007154 <xTimerGenericCommand+0x98>)
 8007112:	6818      	ldr	r0, [r3, #0]
 8007114:	f107 0110 	add.w	r1, r7, #16
 8007118:	2300      	movs	r3, #0
 800711a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800711c:	f7fd ffa8 	bl	8005070 <xQueueGenericSend>
 8007120:	6278      	str	r0, [r7, #36]	@ 0x24
 8007122:	e012      	b.n	800714a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007124:	4b0b      	ldr	r3, [pc, #44]	@ (8007154 <xTimerGenericCommand+0x98>)
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	f107 0110 	add.w	r1, r7, #16
 800712c:	2300      	movs	r3, #0
 800712e:	2200      	movs	r2, #0
 8007130:	f7fd ff9e 	bl	8005070 <xQueueGenericSend>
 8007134:	6278      	str	r0, [r7, #36]	@ 0x24
 8007136:	e008      	b.n	800714a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007138:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <xTimerGenericCommand+0x98>)
 800713a:	6818      	ldr	r0, [r3, #0]
 800713c:	f107 0110 	add.w	r1, r7, #16
 8007140:	2300      	movs	r3, #0
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	f7fe f896 	bl	8005274 <xQueueGenericSendFromISR>
 8007148:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800714c:	4618      	mov	r0, r3
 800714e:	3728      	adds	r7, #40	@ 0x28
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	20000dc4 	.word	0x20000dc4

08007158 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af02      	add	r7, sp, #8
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007162:	4b23      	ldr	r3, [pc, #140]	@ (80071f0 <prvProcessExpiredTimer+0x98>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	3304      	adds	r3, #4
 8007170:	4618      	mov	r0, r3
 8007172:	f7fd fd9f 	bl	8004cb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b00      	cmp	r3, #0
 8007182:	d023      	beq.n	80071cc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	699a      	ldr	r2, [r3, #24]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	18d1      	adds	r1, r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	6978      	ldr	r0, [r7, #20]
 8007192:	f000 f8d5 	bl	8007340 <prvInsertTimerInActiveList>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d020      	beq.n	80071de <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800719c:	2300      	movs	r3, #0
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	2300      	movs	r3, #0
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	2100      	movs	r1, #0
 80071a6:	6978      	ldr	r0, [r7, #20]
 80071a8:	f7ff ff88 	bl	80070bc <xTimerGenericCommand>
 80071ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d114      	bne.n	80071de <prvProcessExpiredTimer+0x86>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	60fb      	str	r3, [r7, #12]
}
 80071c6:	bf00      	nop
 80071c8:	bf00      	nop
 80071ca:	e7fd      	b.n	80071c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071d2:	f023 0301 	bic.w	r3, r3, #1
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	6978      	ldr	r0, [r7, #20]
 80071e4:	4798      	blx	r3
}
 80071e6:	bf00      	nop
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000dbc 	.word	0x20000dbc

080071f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071fc:	f107 0308 	add.w	r3, r7, #8
 8007200:	4618      	mov	r0, r3
 8007202:	f000 f859 	bl	80072b8 <prvGetNextExpireTime>
 8007206:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4619      	mov	r1, r3
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 f805 	bl	800721c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007212:	f000 f8d7 	bl	80073c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007216:	bf00      	nop
 8007218:	e7f0      	b.n	80071fc <prvTimerTask+0x8>
	...

0800721c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007226:	f7fe ffdf 	bl	80061e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800722a:	f107 0308 	add.w	r3, r7, #8
 800722e:	4618      	mov	r0, r3
 8007230:	f000 f866 	bl	8007300 <prvSampleTimeNow>
 8007234:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d130      	bne.n	800729e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <prvProcessTimerOrBlockTask+0x3c>
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	429a      	cmp	r2, r3
 8007248:	d806      	bhi.n	8007258 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800724a:	f7fe ffdb 	bl	8006204 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800724e:	68f9      	ldr	r1, [r7, #12]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7ff ff81 	bl	8007158 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007256:	e024      	b.n	80072a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d008      	beq.n	8007270 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800725e:	4b13      	ldr	r3, [pc, #76]	@ (80072ac <prvProcessTimerOrBlockTask+0x90>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <prvProcessTimerOrBlockTask+0x50>
 8007268:	2301      	movs	r3, #1
 800726a:	e000      	b.n	800726e <prvProcessTimerOrBlockTask+0x52>
 800726c:	2300      	movs	r3, #0
 800726e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007270:	4b0f      	ldr	r3, [pc, #60]	@ (80072b0 <prvProcessTimerOrBlockTask+0x94>)
 8007272:	6818      	ldr	r0, [r3, #0]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	4619      	mov	r1, r3
 800727e:	f7fe fd3b 	bl	8005cf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007282:	f7fe ffbf 	bl	8006204 <xTaskResumeAll>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10a      	bne.n	80072a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800728c:	4b09      	ldr	r3, [pc, #36]	@ (80072b4 <prvProcessTimerOrBlockTask+0x98>)
 800728e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	f3bf 8f6f 	isb	sy
}
 800729c:	e001      	b.n	80072a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800729e:	f7fe ffb1 	bl	8006204 <xTaskResumeAll>
}
 80072a2:	bf00      	nop
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20000dc0 	.word	0x20000dc0
 80072b0:	20000dc4 	.word	0x20000dc4
 80072b4:	e000ed04 	.word	0xe000ed04

080072b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072c0:	4b0e      	ldr	r3, [pc, #56]	@ (80072fc <prvGetNextExpireTime+0x44>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <prvGetNextExpireTime+0x16>
 80072ca:	2201      	movs	r2, #1
 80072cc:	e000      	b.n	80072d0 <prvGetNextExpireTime+0x18>
 80072ce:	2200      	movs	r2, #0
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d105      	bne.n	80072e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072dc:	4b07      	ldr	r3, [pc, #28]	@ (80072fc <prvGetNextExpireTime+0x44>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	e001      	b.n	80072ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072ec:	68fb      	ldr	r3, [r7, #12]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	20000dbc 	.word	0x20000dbc

08007300 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007308:	f7ff f81a 	bl	8006340 <xTaskGetTickCount>
 800730c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800730e:	4b0b      	ldr	r3, [pc, #44]	@ (800733c <prvSampleTimeNow+0x3c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	429a      	cmp	r2, r3
 8007316:	d205      	bcs.n	8007324 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007318:	f000 f93a 	bl	8007590 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e002      	b.n	800732a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800732a:	4a04      	ldr	r2, [pc, #16]	@ (800733c <prvSampleTimeNow+0x3c>)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007330:	68fb      	ldr	r3, [r7, #12]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20000dcc 	.word	0x20000dcc

08007340 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800734e:	2300      	movs	r3, #0
 8007350:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	429a      	cmp	r2, r3
 8007364:	d812      	bhi.n	800738c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	1ad2      	subs	r2, r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	429a      	cmp	r2, r3
 8007372:	d302      	bcc.n	800737a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007374:	2301      	movs	r3, #1
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	e01b      	b.n	80073b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800737a:	4b10      	ldr	r3, [pc, #64]	@ (80073bc <prvInsertTimerInActiveList+0x7c>)
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3304      	adds	r3, #4
 8007382:	4619      	mov	r1, r3
 8007384:	4610      	mov	r0, r2
 8007386:	f7fd fc5c 	bl	8004c42 <vListInsert>
 800738a:	e012      	b.n	80073b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	429a      	cmp	r2, r3
 8007392:	d206      	bcs.n	80073a2 <prvInsertTimerInActiveList+0x62>
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d302      	bcc.n	80073a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800739c:	2301      	movs	r3, #1
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	e007      	b.n	80073b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073a2:	4b07      	ldr	r3, [pc, #28]	@ (80073c0 <prvInsertTimerInActiveList+0x80>)
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3304      	adds	r3, #4
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f7fd fc48 	bl	8004c42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073b2:	697b      	ldr	r3, [r7, #20]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	20000dc0 	.word	0x20000dc0
 80073c0:	20000dbc 	.word	0x20000dbc

080073c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08e      	sub	sp, #56	@ 0x38
 80073c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073ca:	e0ce      	b.n	800756a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	da19      	bge.n	8007406 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073d2:	1d3b      	adds	r3, r7, #4
 80073d4:	3304      	adds	r3, #4
 80073d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10b      	bne.n	80073f6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	61fb      	str	r3, [r7, #28]
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
 80073f4:	e7fd      	b.n	80073f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073fc:	6850      	ldr	r0, [r2, #4]
 80073fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007400:	6892      	ldr	r2, [r2, #8]
 8007402:	4611      	mov	r1, r2
 8007404:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f2c0 80ae 	blt.w	800756a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d004      	beq.n	8007424 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800741a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741c:	3304      	adds	r3, #4
 800741e:	4618      	mov	r0, r3
 8007420:	f7fd fc48 	bl	8004cb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007424:	463b      	mov	r3, r7
 8007426:	4618      	mov	r0, r3
 8007428:	f7ff ff6a 	bl	8007300 <prvSampleTimeNow>
 800742c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b09      	cmp	r3, #9
 8007432:	f200 8097 	bhi.w	8007564 <prvProcessReceivedCommands+0x1a0>
 8007436:	a201      	add	r2, pc, #4	@ (adr r2, 800743c <prvProcessReceivedCommands+0x78>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	08007465 	.word	0x08007465
 8007440:	08007465 	.word	0x08007465
 8007444:	08007465 	.word	0x08007465
 8007448:	080074db 	.word	0x080074db
 800744c:	080074ef 	.word	0x080074ef
 8007450:	0800753b 	.word	0x0800753b
 8007454:	08007465 	.word	0x08007465
 8007458:	08007465 	.word	0x08007465
 800745c:	080074db 	.word	0x080074db
 8007460:	080074ef 	.word	0x080074ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007466:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800746a:	f043 0301 	orr.w	r3, r3, #1
 800746e:	b2da      	uxtb	r2, r3
 8007470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007472:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	18d1      	adds	r1, r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007484:	f7ff ff5c 	bl	8007340 <prvInsertTimerInActiveList>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d06c      	beq.n	8007568 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800748e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007494:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d061      	beq.n	8007568 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	441a      	add	r2, r3
 80074ac:	2300      	movs	r3, #0
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	2300      	movs	r3, #0
 80074b2:	2100      	movs	r1, #0
 80074b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074b6:	f7ff fe01 	bl	80070bc <xTimerGenericCommand>
 80074ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d152      	bne.n	8007568 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	61bb      	str	r3, [r7, #24]
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	e7fd      	b.n	80074d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074e0:	f023 0301 	bic.w	r3, r3, #1
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074ec:	e03d      	b.n	800756a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074f4:	f043 0301 	orr.w	r3, r3, #1
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007504:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10b      	bne.n	8007526 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	617b      	str	r3, [r7, #20]
}
 8007520:	bf00      	nop
 8007522:	bf00      	nop
 8007524:	e7fd      	b.n	8007522 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007528:	699a      	ldr	r2, [r3, #24]
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	18d1      	adds	r1, r2, r3
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007534:	f7ff ff04 	bl	8007340 <prvInsertTimerInActiveList>
					break;
 8007538:	e017      	b.n	800756a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800753a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d103      	bne.n	8007550 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007548:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800754a:	f000 fc55 	bl	8007df8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800754e:	e00c      	b.n	800756a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007552:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007556:	f023 0301 	bic.w	r3, r3, #1
 800755a:	b2da      	uxtb	r2, r3
 800755c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007562:	e002      	b.n	800756a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007564:	bf00      	nop
 8007566:	e000      	b.n	800756a <prvProcessReceivedCommands+0x1a6>
					break;
 8007568:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800756a:	4b08      	ldr	r3, [pc, #32]	@ (800758c <prvProcessReceivedCommands+0x1c8>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	1d39      	adds	r1, r7, #4
 8007570:	2200      	movs	r2, #0
 8007572:	4618      	mov	r0, r3
 8007574:	f7fd ffac 	bl	80054d0 <xQueueReceive>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	f47f af26 	bne.w	80073cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	3730      	adds	r7, #48	@ 0x30
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	20000dc4 	.word	0x20000dc4

08007590 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007596:	e049      	b.n	800762c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007598:	4b2e      	ldr	r3, [pc, #184]	@ (8007654 <prvSwitchTimerLists+0xc4>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007654 <prvSwitchTimerLists+0xc4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	3304      	adds	r3, #4
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fd fb7f 	bl	8004cb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d02f      	beq.n	800762c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	4413      	add	r3, r2
 80075d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d90e      	bls.n	80075fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075ea:	4b1a      	ldr	r3, [pc, #104]	@ (8007654 <prvSwitchTimerLists+0xc4>)
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3304      	adds	r3, #4
 80075f2:	4619      	mov	r1, r3
 80075f4:	4610      	mov	r0, r2
 80075f6:	f7fd fb24 	bl	8004c42 <vListInsert>
 80075fa:	e017      	b.n	800762c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075fc:	2300      	movs	r3, #0
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	2300      	movs	r3, #0
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	2100      	movs	r1, #0
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f7ff fd58 	bl	80070bc <xTimerGenericCommand>
 800760c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10b      	bne.n	800762c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	603b      	str	r3, [r7, #0]
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	e7fd      	b.n	8007628 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800762c:	4b09      	ldr	r3, [pc, #36]	@ (8007654 <prvSwitchTimerLists+0xc4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1b0      	bne.n	8007598 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007636:	4b07      	ldr	r3, [pc, #28]	@ (8007654 <prvSwitchTimerLists+0xc4>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800763c:	4b06      	ldr	r3, [pc, #24]	@ (8007658 <prvSwitchTimerLists+0xc8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a04      	ldr	r2, [pc, #16]	@ (8007654 <prvSwitchTimerLists+0xc4>)
 8007642:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007644:	4a04      	ldr	r2, [pc, #16]	@ (8007658 <prvSwitchTimerLists+0xc8>)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	6013      	str	r3, [r2, #0]
}
 800764a:	bf00      	nop
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20000dbc 	.word	0x20000dbc
 8007658:	20000dc0 	.word	0x20000dc0

0800765c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007662:	f000 f9d9 	bl	8007a18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007666:	4b15      	ldr	r3, [pc, #84]	@ (80076bc <prvCheckForValidListAndQueue+0x60>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d120      	bne.n	80076b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800766e:	4814      	ldr	r0, [pc, #80]	@ (80076c0 <prvCheckForValidListAndQueue+0x64>)
 8007670:	f7fd fa96 	bl	8004ba0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007674:	4813      	ldr	r0, [pc, #76]	@ (80076c4 <prvCheckForValidListAndQueue+0x68>)
 8007676:	f7fd fa93 	bl	8004ba0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800767a:	4b13      	ldr	r3, [pc, #76]	@ (80076c8 <prvCheckForValidListAndQueue+0x6c>)
 800767c:	4a10      	ldr	r2, [pc, #64]	@ (80076c0 <prvCheckForValidListAndQueue+0x64>)
 800767e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007680:	4b12      	ldr	r3, [pc, #72]	@ (80076cc <prvCheckForValidListAndQueue+0x70>)
 8007682:	4a10      	ldr	r2, [pc, #64]	@ (80076c4 <prvCheckForValidListAndQueue+0x68>)
 8007684:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007686:	2300      	movs	r3, #0
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	4b11      	ldr	r3, [pc, #68]	@ (80076d0 <prvCheckForValidListAndQueue+0x74>)
 800768c:	4a11      	ldr	r2, [pc, #68]	@ (80076d4 <prvCheckForValidListAndQueue+0x78>)
 800768e:	2110      	movs	r1, #16
 8007690:	200a      	movs	r0, #10
 8007692:	f7fd fba3 	bl	8004ddc <xQueueGenericCreateStatic>
 8007696:	4603      	mov	r3, r0
 8007698:	4a08      	ldr	r2, [pc, #32]	@ (80076bc <prvCheckForValidListAndQueue+0x60>)
 800769a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800769c:	4b07      	ldr	r3, [pc, #28]	@ (80076bc <prvCheckForValidListAndQueue+0x60>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076a4:	4b05      	ldr	r3, [pc, #20]	@ (80076bc <prvCheckForValidListAndQueue+0x60>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	490b      	ldr	r1, [pc, #44]	@ (80076d8 <prvCheckForValidListAndQueue+0x7c>)
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fad0 	bl	8005c50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076b0:	f000 f9e4 	bl	8007a7c <vPortExitCritical>
}
 80076b4:	bf00      	nop
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20000dc4 	.word	0x20000dc4
 80076c0:	20000d94 	.word	0x20000d94
 80076c4:	20000da8 	.word	0x20000da8
 80076c8:	20000dbc 	.word	0x20000dbc
 80076cc:	20000dc0 	.word	0x20000dc0
 80076d0:	20000e70 	.word	0x20000e70
 80076d4:	20000dd0 	.word	0x20000dd0
 80076d8:	08008394 	.word	0x08008394

080076dc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10b      	bne.n	8007706 <xTimerIsTimerActive+0x2a>
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	60fb      	str	r3, [r7, #12]
}
 8007700:	bf00      	nop
 8007702:	bf00      	nop
 8007704:	e7fd      	b.n	8007702 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8007706:	f000 f987 	bl	8007a18 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d102      	bne.n	800771e <xTimerIsTimerActive+0x42>
		{
			xReturn = pdFALSE;
 8007718:	2300      	movs	r3, #0
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	e001      	b.n	8007722 <xTimerIsTimerActive+0x46>
		}
		else
		{
			xReturn = pdTRUE;
 800771e:	2301      	movs	r3, #1
 8007720:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007722:	f000 f9ab 	bl	8007a7c <vPortExitCritical>

	return xReturn;
 8007726:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8007728:	4618      	mov	r0, r3
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10b      	bne.n	800775a <pvTimerGetTimerID+0x2a>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	60fb      	str	r3, [r7, #12]
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop
 8007758:	e7fd      	b.n	8007756 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800775a:	f000 f95d 	bl	8007a18 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007764:	f000 f98a 	bl	8007a7c <vPortExitCritical>

	return pvReturn;
 8007768:	693b      	ldr	r3, [r7, #16]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08a      	sub	sp, #40	@ 0x28
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007782:	f06f 0301 	mvn.w	r3, #1
 8007786:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007794:	4b06      	ldr	r3, [pc, #24]	@ (80077b0 <xTimerPendFunctionCallFromISR+0x3c>)
 8007796:	6818      	ldr	r0, [r3, #0]
 8007798:	f107 0114 	add.w	r1, r7, #20
 800779c:	2300      	movs	r3, #0
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	f7fd fd68 	bl	8005274 <xQueueGenericSendFromISR>
 80077a4:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3728      	adds	r7, #40	@ 0x28
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20000dc4 	.word	0x20000dc4

080077b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3b04      	subs	r3, #4
 80077c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80077cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3b04      	subs	r3, #4
 80077d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f023 0201 	bic.w	r2, r3, #1
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3b04      	subs	r3, #4
 80077e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077e4:	4a0c      	ldr	r2, [pc, #48]	@ (8007818 <pxPortInitialiseStack+0x64>)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3b14      	subs	r3, #20
 80077ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3b04      	subs	r3, #4
 80077fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f06f 0202 	mvn.w	r2, #2
 8007802:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3b20      	subs	r3, #32
 8007808:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800780a:	68fb      	ldr	r3, [r7, #12]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	0800781d 	.word	0x0800781d

0800781c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007826:	4b13      	ldr	r3, [pc, #76]	@ (8007874 <prvTaskExitError+0x58>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782e:	d00b      	beq.n	8007848 <prvTaskExitError+0x2c>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	60fb      	str	r3, [r7, #12]
}
 8007842:	bf00      	nop
 8007844:	bf00      	nop
 8007846:	e7fd      	b.n	8007844 <prvTaskExitError+0x28>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	60bb      	str	r3, [r7, #8]
}
 800785a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800785c:	bf00      	nop
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0fc      	beq.n	800785e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	20000028 	.word	0x20000028
	...

08007880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007880:	4b07      	ldr	r3, [pc, #28]	@ (80078a0 <pxCurrentTCBConst2>)
 8007882:	6819      	ldr	r1, [r3, #0]
 8007884:	6808      	ldr	r0, [r1, #0]
 8007886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788a:	f380 8809 	msr	PSP, r0
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f04f 0000 	mov.w	r0, #0
 8007896:	f380 8811 	msr	BASEPRI, r0
 800789a:	4770      	bx	lr
 800789c:	f3af 8000 	nop.w

080078a0 <pxCurrentTCBConst2>:
 80078a0:	20000894 	.word	0x20000894
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop

080078a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078a8:	4808      	ldr	r0, [pc, #32]	@ (80078cc <prvPortStartFirstTask+0x24>)
 80078aa:	6800      	ldr	r0, [r0, #0]
 80078ac:	6800      	ldr	r0, [r0, #0]
 80078ae:	f380 8808 	msr	MSP, r0
 80078b2:	f04f 0000 	mov.w	r0, #0
 80078b6:	f380 8814 	msr	CONTROL, r0
 80078ba:	b662      	cpsie	i
 80078bc:	b661      	cpsie	f
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	df00      	svc	0
 80078c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078ca:	bf00      	nop
 80078cc:	e000ed08 	.word	0xe000ed08

080078d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078d6:	4b47      	ldr	r3, [pc, #284]	@ (80079f4 <xPortStartScheduler+0x124>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a47      	ldr	r2, [pc, #284]	@ (80079f8 <xPortStartScheduler+0x128>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d10b      	bne.n	80078f8 <xPortStartScheduler+0x28>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	60fb      	str	r3, [r7, #12]
}
 80078f2:	bf00      	nop
 80078f4:	bf00      	nop
 80078f6:	e7fd      	b.n	80078f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078f8:	4b3e      	ldr	r3, [pc, #248]	@ (80079f4 <xPortStartScheduler+0x124>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a3f      	ldr	r2, [pc, #252]	@ (80079fc <xPortStartScheduler+0x12c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d10b      	bne.n	800791a <xPortStartScheduler+0x4a>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	613b      	str	r3, [r7, #16]
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop
 8007918:	e7fd      	b.n	8007916 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800791a:	4b39      	ldr	r3, [pc, #228]	@ (8007a00 <xPortStartScheduler+0x130>)
 800791c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	22ff      	movs	r2, #255	@ 0xff
 800792a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	b2db      	uxtb	r3, r3
 8007932:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800793c:	b2da      	uxtb	r2, r3
 800793e:	4b31      	ldr	r3, [pc, #196]	@ (8007a04 <xPortStartScheduler+0x134>)
 8007940:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007942:	4b31      	ldr	r3, [pc, #196]	@ (8007a08 <xPortStartScheduler+0x138>)
 8007944:	2207      	movs	r2, #7
 8007946:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007948:	e009      	b.n	800795e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800794a:	4b2f      	ldr	r3, [pc, #188]	@ (8007a08 <xPortStartScheduler+0x138>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3b01      	subs	r3, #1
 8007950:	4a2d      	ldr	r2, [pc, #180]	@ (8007a08 <xPortStartScheduler+0x138>)
 8007952:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	b2db      	uxtb	r3, r3
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	b2db      	uxtb	r3, r3
 800795c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800795e:	78fb      	ldrb	r3, [r7, #3]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007966:	2b80      	cmp	r3, #128	@ 0x80
 8007968:	d0ef      	beq.n	800794a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800796a:	4b27      	ldr	r3, [pc, #156]	@ (8007a08 <xPortStartScheduler+0x138>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f1c3 0307 	rsb	r3, r3, #7
 8007972:	2b04      	cmp	r3, #4
 8007974:	d00b      	beq.n	800798e <xPortStartScheduler+0xbe>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	60bb      	str	r3, [r7, #8]
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	e7fd      	b.n	800798a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800798e:	4b1e      	ldr	r3, [pc, #120]	@ (8007a08 <xPortStartScheduler+0x138>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	021b      	lsls	r3, r3, #8
 8007994:	4a1c      	ldr	r2, [pc, #112]	@ (8007a08 <xPortStartScheduler+0x138>)
 8007996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007998:	4b1b      	ldr	r3, [pc, #108]	@ (8007a08 <xPortStartScheduler+0x138>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079a0:	4a19      	ldr	r2, [pc, #100]	@ (8007a08 <xPortStartScheduler+0x138>)
 80079a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079ac:	4b17      	ldr	r3, [pc, #92]	@ (8007a0c <xPortStartScheduler+0x13c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a16      	ldr	r2, [pc, #88]	@ (8007a0c <xPortStartScheduler+0x13c>)
 80079b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80079b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079b8:	4b14      	ldr	r3, [pc, #80]	@ (8007a0c <xPortStartScheduler+0x13c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a13      	ldr	r2, [pc, #76]	@ (8007a0c <xPortStartScheduler+0x13c>)
 80079be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80079c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079c4:	f000 f8da 	bl	8007b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079c8:	4b11      	ldr	r3, [pc, #68]	@ (8007a10 <xPortStartScheduler+0x140>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079ce:	f000 f8f9 	bl	8007bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079d2:	4b10      	ldr	r3, [pc, #64]	@ (8007a14 <xPortStartScheduler+0x144>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007a14 <xPortStartScheduler+0x144>)
 80079d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80079dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079de:	f7ff ff63 	bl	80078a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079e2:	f7fe fd77 	bl	80064d4 <vTaskSwitchContext>
	prvTaskExitError();
 80079e6:	f7ff ff19 	bl	800781c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	e000ed00 	.word	0xe000ed00
 80079f8:	410fc271 	.word	0x410fc271
 80079fc:	410fc270 	.word	0x410fc270
 8007a00:	e000e400 	.word	0xe000e400
 8007a04:	20000ec0 	.word	0x20000ec0
 8007a08:	20000ec4 	.word	0x20000ec4
 8007a0c:	e000ed20 	.word	0xe000ed20
 8007a10:	20000028 	.word	0x20000028
 8007a14:	e000ef34 	.word	0xe000ef34

08007a18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	607b      	str	r3, [r7, #4]
}
 8007a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a32:	4b10      	ldr	r3, [pc, #64]	@ (8007a74 <vPortEnterCritical+0x5c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3301      	adds	r3, #1
 8007a38:	4a0e      	ldr	r2, [pc, #56]	@ (8007a74 <vPortEnterCritical+0x5c>)
 8007a3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007a74 <vPortEnterCritical+0x5c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d110      	bne.n	8007a66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a44:	4b0c      	ldr	r3, [pc, #48]	@ (8007a78 <vPortEnterCritical+0x60>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00b      	beq.n	8007a66 <vPortEnterCritical+0x4e>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	603b      	str	r3, [r7, #0]
}
 8007a60:	bf00      	nop
 8007a62:	bf00      	nop
 8007a64:	e7fd      	b.n	8007a62 <vPortEnterCritical+0x4a>
	}
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	20000028 	.word	0x20000028
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a82:	4b12      	ldr	r3, [pc, #72]	@ (8007acc <vPortExitCritical+0x50>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10b      	bne.n	8007aa2 <vPortExitCritical+0x26>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	607b      	str	r3, [r7, #4]
}
 8007a9c:	bf00      	nop
 8007a9e:	bf00      	nop
 8007aa0:	e7fd      	b.n	8007a9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8007acc <vPortExitCritical+0x50>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	4a08      	ldr	r2, [pc, #32]	@ (8007acc <vPortExitCritical+0x50>)
 8007aaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007aac:	4b07      	ldr	r3, [pc, #28]	@ (8007acc <vPortExitCritical+0x50>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d105      	bne.n	8007ac0 <vPortExitCritical+0x44>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	f383 8811 	msr	BASEPRI, r3
}
 8007abe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	20000028 	.word	0x20000028

08007ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ad0:	f3ef 8009 	mrs	r0, PSP
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	4b15      	ldr	r3, [pc, #84]	@ (8007b30 <pxCurrentTCBConst>)
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	f01e 0f10 	tst.w	lr, #16
 8007ae0:	bf08      	it	eq
 8007ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aea:	6010      	str	r0, [r2, #0]
 8007aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007af4:	f380 8811 	msr	BASEPRI, r0
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f7fe fce8 	bl	80064d4 <vTaskSwitchContext>
 8007b04:	f04f 0000 	mov.w	r0, #0
 8007b08:	f380 8811 	msr	BASEPRI, r0
 8007b0c:	bc09      	pop	{r0, r3}
 8007b0e:	6819      	ldr	r1, [r3, #0]
 8007b10:	6808      	ldr	r0, [r1, #0]
 8007b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b16:	f01e 0f10 	tst.w	lr, #16
 8007b1a:	bf08      	it	eq
 8007b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b20:	f380 8809 	msr	PSP, r0
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	f3af 8000 	nop.w

08007b30 <pxCurrentTCBConst>:
 8007b30:	20000894 	.word	0x20000894
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop

08007b38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	607b      	str	r3, [r7, #4]
}
 8007b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b52:	f7fe fc05 	bl	8006360 <xTaskIncrementTick>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b5c:	4b06      	ldr	r3, [pc, #24]	@ (8007b78 <xPortSysTickHandler+0x40>)
 8007b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	2300      	movs	r3, #0
 8007b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	f383 8811 	msr	BASEPRI, r3
}
 8007b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	e000ed04 	.word	0xe000ed04

08007b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b80:	4b0b      	ldr	r3, [pc, #44]	@ (8007bb0 <vPortSetupTimerInterrupt+0x34>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b86:	4b0b      	ldr	r3, [pc, #44]	@ (8007bb4 <vPortSetupTimerInterrupt+0x38>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb8 <vPortSetupTimerInterrupt+0x3c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a0a      	ldr	r2, [pc, #40]	@ (8007bbc <vPortSetupTimerInterrupt+0x40>)
 8007b92:	fba2 2303 	umull	r2, r3, r2, r3
 8007b96:	099b      	lsrs	r3, r3, #6
 8007b98:	4a09      	ldr	r2, [pc, #36]	@ (8007bc0 <vPortSetupTimerInterrupt+0x44>)
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b9e:	4b04      	ldr	r3, [pc, #16]	@ (8007bb0 <vPortSetupTimerInterrupt+0x34>)
 8007ba0:	2207      	movs	r2, #7
 8007ba2:	601a      	str	r2, [r3, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	e000e010 	.word	0xe000e010
 8007bb4:	e000e018 	.word	0xe000e018
 8007bb8:	2000001c 	.word	0x2000001c
 8007bbc:	10624dd3 	.word	0x10624dd3
 8007bc0:	e000e014 	.word	0xe000e014

08007bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007bd4 <vPortEnableVFP+0x10>
 8007bc8:	6801      	ldr	r1, [r0, #0]
 8007bca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007bce:	6001      	str	r1, [r0, #0]
 8007bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007bd2:	bf00      	nop
 8007bd4:	e000ed88 	.word	0xe000ed88

08007bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bde:	f3ef 8305 	mrs	r3, IPSR
 8007be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b0f      	cmp	r3, #15
 8007be8:	d915      	bls.n	8007c16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bea:	4a18      	ldr	r2, [pc, #96]	@ (8007c4c <vPortValidateInterruptPriority+0x74>)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4413      	add	r3, r2
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bf4:	4b16      	ldr	r3, [pc, #88]	@ (8007c50 <vPortValidateInterruptPriority+0x78>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	7afa      	ldrb	r2, [r7, #11]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d20b      	bcs.n	8007c16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	607b      	str	r3, [r7, #4]
}
 8007c10:	bf00      	nop
 8007c12:	bf00      	nop
 8007c14:	e7fd      	b.n	8007c12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c16:	4b0f      	ldr	r3, [pc, #60]	@ (8007c54 <vPortValidateInterruptPriority+0x7c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c58 <vPortValidateInterruptPriority+0x80>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d90b      	bls.n	8007c3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	603b      	str	r3, [r7, #0]
}
 8007c38:	bf00      	nop
 8007c3a:	bf00      	nop
 8007c3c:	e7fd      	b.n	8007c3a <vPortValidateInterruptPriority+0x62>
	}
 8007c3e:	bf00      	nop
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	e000e3f0 	.word	0xe000e3f0
 8007c50:	20000ec0 	.word	0x20000ec0
 8007c54:	e000ed0c 	.word	0xe000ed0c
 8007c58:	20000ec4 	.word	0x20000ec4

08007c5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08a      	sub	sp, #40	@ 0x28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c68:	f7fe fabe 	bl	80061e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8007de0 <pvPortMalloc+0x184>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c74:	f000 f924 	bl	8007ec0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c78:	4b5a      	ldr	r3, [pc, #360]	@ (8007de4 <pvPortMalloc+0x188>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4013      	ands	r3, r2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f040 8095 	bne.w	8007db0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01e      	beq.n	8007cca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007c8c:	2208      	movs	r2, #8
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4413      	add	r3, r2
 8007c92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d015      	beq.n	8007cca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f023 0307 	bic.w	r3, r3, #7
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f003 0307 	and.w	r3, r3, #7
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <pvPortMalloc+0x6e>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	617b      	str	r3, [r7, #20]
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop
 8007cc8:	e7fd      	b.n	8007cc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d06f      	beq.n	8007db0 <pvPortMalloc+0x154>
 8007cd0:	4b45      	ldr	r3, [pc, #276]	@ (8007de8 <pvPortMalloc+0x18c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d86a      	bhi.n	8007db0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cda:	4b44      	ldr	r3, [pc, #272]	@ (8007dec <pvPortMalloc+0x190>)
 8007cdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cde:	4b43      	ldr	r3, [pc, #268]	@ (8007dec <pvPortMalloc+0x190>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ce4:	e004      	b.n	8007cf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d903      	bls.n	8007d02 <pvPortMalloc+0xa6>
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1f1      	bne.n	8007ce6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d02:	4b37      	ldr	r3, [pc, #220]	@ (8007de0 <pvPortMalloc+0x184>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d051      	beq.n	8007db0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2208      	movs	r2, #8
 8007d12:	4413      	add	r3, r2
 8007d14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	1ad2      	subs	r2, r2, r3
 8007d26:	2308      	movs	r3, #8
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d920      	bls.n	8007d70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4413      	add	r3, r2
 8007d34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <pvPortMalloc+0xfc>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	613b      	str	r3, [r7, #16]
}
 8007d52:	bf00      	nop
 8007d54:	bf00      	nop
 8007d56:	e7fd      	b.n	8007d54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d6a:	69b8      	ldr	r0, [r7, #24]
 8007d6c:	f000 f90a 	bl	8007f84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d70:	4b1d      	ldr	r3, [pc, #116]	@ (8007de8 <pvPortMalloc+0x18c>)
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007de8 <pvPortMalloc+0x18c>)
 8007d7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007de8 <pvPortMalloc+0x18c>)
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4b1b      	ldr	r3, [pc, #108]	@ (8007df0 <pvPortMalloc+0x194>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d203      	bcs.n	8007d92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d8a:	4b17      	ldr	r3, [pc, #92]	@ (8007de8 <pvPortMalloc+0x18c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a18      	ldr	r2, [pc, #96]	@ (8007df0 <pvPortMalloc+0x194>)
 8007d90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	4b13      	ldr	r3, [pc, #76]	@ (8007de4 <pvPortMalloc+0x188>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007da6:	4b13      	ldr	r3, [pc, #76]	@ (8007df4 <pvPortMalloc+0x198>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3301      	adds	r3, #1
 8007dac:	4a11      	ldr	r2, [pc, #68]	@ (8007df4 <pvPortMalloc+0x198>)
 8007dae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007db0:	f7fe fa28 	bl	8006204 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00b      	beq.n	8007dd6 <pvPortMalloc+0x17a>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	60fb      	str	r3, [r7, #12]
}
 8007dd0:	bf00      	nop
 8007dd2:	bf00      	nop
 8007dd4:	e7fd      	b.n	8007dd2 <pvPortMalloc+0x176>
	return pvReturn;
 8007dd6:	69fb      	ldr	r3, [r7, #28]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3728      	adds	r7, #40	@ 0x28
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	20004ad0 	.word	0x20004ad0
 8007de4:	20004ae4 	.word	0x20004ae4
 8007de8:	20004ad4 	.word	0x20004ad4
 8007dec:	20004ac8 	.word	0x20004ac8
 8007df0:	20004ad8 	.word	0x20004ad8
 8007df4:	20004adc 	.word	0x20004adc

08007df8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d04f      	beq.n	8007eaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e0a:	2308      	movs	r3, #8
 8007e0c:	425b      	negs	r3, r3
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	4413      	add	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	4b25      	ldr	r3, [pc, #148]	@ (8007eb4 <vPortFree+0xbc>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4013      	ands	r3, r2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10b      	bne.n	8007e3e <vPortFree+0x46>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	60fb      	str	r3, [r7, #12]
}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	e7fd      	b.n	8007e3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00b      	beq.n	8007e5e <vPortFree+0x66>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	60bb      	str	r3, [r7, #8]
}
 8007e58:	bf00      	nop
 8007e5a:	bf00      	nop
 8007e5c:	e7fd      	b.n	8007e5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	4b14      	ldr	r3, [pc, #80]	@ (8007eb4 <vPortFree+0xbc>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4013      	ands	r3, r2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01e      	beq.n	8007eaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d11a      	bne.n	8007eaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	4b0e      	ldr	r3, [pc, #56]	@ (8007eb4 <vPortFree+0xbc>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	43db      	mvns	r3, r3
 8007e7e:	401a      	ands	r2, r3
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e84:	f7fe f9b0 	bl	80061e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb8 <vPortFree+0xc0>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4413      	add	r3, r2
 8007e92:	4a09      	ldr	r2, [pc, #36]	@ (8007eb8 <vPortFree+0xc0>)
 8007e94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e96:	6938      	ldr	r0, [r7, #16]
 8007e98:	f000 f874 	bl	8007f84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e9c:	4b07      	ldr	r3, [pc, #28]	@ (8007ebc <vPortFree+0xc4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	4a06      	ldr	r2, [pc, #24]	@ (8007ebc <vPortFree+0xc4>)
 8007ea4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ea6:	f7fe f9ad 	bl	8006204 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007eaa:	bf00      	nop
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20004ae4 	.word	0x20004ae4
 8007eb8:	20004ad4 	.word	0x20004ad4
 8007ebc:	20004ae0 	.word	0x20004ae0

08007ec0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ec6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007eca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ecc:	4b27      	ldr	r3, [pc, #156]	@ (8007f6c <prvHeapInit+0xac>)
 8007ece:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f003 0307 	and.w	r3, r3, #7
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00c      	beq.n	8007ef4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3307      	adds	r3, #7
 8007ede:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f023 0307 	bic.w	r3, r3, #7
 8007ee6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	4a1f      	ldr	r2, [pc, #124]	@ (8007f6c <prvHeapInit+0xac>)
 8007ef0:	4413      	add	r3, r2
 8007ef2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f70 <prvHeapInit+0xb0>)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007efe:	4b1c      	ldr	r3, [pc, #112]	@ (8007f70 <prvHeapInit+0xb0>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	4413      	add	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f0c:	2208      	movs	r2, #8
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 0307 	bic.w	r3, r3, #7
 8007f1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4a15      	ldr	r2, [pc, #84]	@ (8007f74 <prvHeapInit+0xb4>)
 8007f20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f22:	4b14      	ldr	r3, [pc, #80]	@ (8007f74 <prvHeapInit+0xb4>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2200      	movs	r2, #0
 8007f28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f2a:	4b12      	ldr	r3, [pc, #72]	@ (8007f74 <prvHeapInit+0xb4>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	1ad2      	subs	r2, r2, r3
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f40:	4b0c      	ldr	r3, [pc, #48]	@ (8007f74 <prvHeapInit+0xb4>)
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8007f78 <prvHeapInit+0xb8>)
 8007f4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	4a09      	ldr	r2, [pc, #36]	@ (8007f7c <prvHeapInit+0xbc>)
 8007f56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f58:	4b09      	ldr	r3, [pc, #36]	@ (8007f80 <prvHeapInit+0xc0>)
 8007f5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f5e:	601a      	str	r2, [r3, #0]
}
 8007f60:	bf00      	nop
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	20000ec8 	.word	0x20000ec8
 8007f70:	20004ac8 	.word	0x20004ac8
 8007f74:	20004ad0 	.word	0x20004ad0
 8007f78:	20004ad8 	.word	0x20004ad8
 8007f7c:	20004ad4 	.word	0x20004ad4
 8007f80:	20004ae4 	.word	0x20004ae4

08007f84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f8c:	4b28      	ldr	r3, [pc, #160]	@ (8008030 <prvInsertBlockIntoFreeList+0xac>)
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	e002      	b.n	8007f98 <prvInsertBlockIntoFreeList+0x14>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60fb      	str	r3, [r7, #12]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d8f7      	bhi.n	8007f92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	4413      	add	r3, r2
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d108      	bne.n	8007fc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	441a      	add	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	441a      	add	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d118      	bne.n	800800c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	4b15      	ldr	r3, [pc, #84]	@ (8008034 <prvInsertBlockIntoFreeList+0xb0>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d00d      	beq.n	8008002 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	441a      	add	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	e008      	b.n	8008014 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008002:	4b0c      	ldr	r3, [pc, #48]	@ (8008034 <prvInsertBlockIntoFreeList+0xb0>)
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	e003      	b.n	8008014 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	d002      	beq.n	8008022 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008022:	bf00      	nop
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20004ac8 	.word	0x20004ac8
 8008034:	20004ad0 	.word	0x20004ad0

08008038 <malloc>:
 8008038:	4b02      	ldr	r3, [pc, #8]	@ (8008044 <malloc+0xc>)
 800803a:	4601      	mov	r1, r0
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	f000 b825 	b.w	800808c <_malloc_r>
 8008042:	bf00      	nop
 8008044:	2000002c 	.word	0x2000002c

08008048 <sbrk_aligned>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	4e0f      	ldr	r6, [pc, #60]	@ (8008088 <sbrk_aligned+0x40>)
 800804c:	460c      	mov	r4, r1
 800804e:	6831      	ldr	r1, [r6, #0]
 8008050:	4605      	mov	r5, r0
 8008052:	b911      	cbnz	r1, 800805a <sbrk_aligned+0x12>
 8008054:	f000 f8d4 	bl	8008200 <_sbrk_r>
 8008058:	6030      	str	r0, [r6, #0]
 800805a:	4621      	mov	r1, r4
 800805c:	4628      	mov	r0, r5
 800805e:	f000 f8cf 	bl	8008200 <_sbrk_r>
 8008062:	1c43      	adds	r3, r0, #1
 8008064:	d103      	bne.n	800806e <sbrk_aligned+0x26>
 8008066:	f04f 34ff 	mov.w	r4, #4294967295
 800806a:	4620      	mov	r0, r4
 800806c:	bd70      	pop	{r4, r5, r6, pc}
 800806e:	1cc4      	adds	r4, r0, #3
 8008070:	f024 0403 	bic.w	r4, r4, #3
 8008074:	42a0      	cmp	r0, r4
 8008076:	d0f8      	beq.n	800806a <sbrk_aligned+0x22>
 8008078:	1a21      	subs	r1, r4, r0
 800807a:	4628      	mov	r0, r5
 800807c:	f000 f8c0 	bl	8008200 <_sbrk_r>
 8008080:	3001      	adds	r0, #1
 8008082:	d1f2      	bne.n	800806a <sbrk_aligned+0x22>
 8008084:	e7ef      	b.n	8008066 <sbrk_aligned+0x1e>
 8008086:	bf00      	nop
 8008088:	20004ae8 	.word	0x20004ae8

0800808c <_malloc_r>:
 800808c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008090:	1ccd      	adds	r5, r1, #3
 8008092:	f025 0503 	bic.w	r5, r5, #3
 8008096:	3508      	adds	r5, #8
 8008098:	2d0c      	cmp	r5, #12
 800809a:	bf38      	it	cc
 800809c:	250c      	movcc	r5, #12
 800809e:	2d00      	cmp	r5, #0
 80080a0:	4606      	mov	r6, r0
 80080a2:	db01      	blt.n	80080a8 <_malloc_r+0x1c>
 80080a4:	42a9      	cmp	r1, r5
 80080a6:	d904      	bls.n	80080b2 <_malloc_r+0x26>
 80080a8:	230c      	movs	r3, #12
 80080aa:	6033      	str	r3, [r6, #0]
 80080ac:	2000      	movs	r0, #0
 80080ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008188 <_malloc_r+0xfc>
 80080b6:	f000 f869 	bl	800818c <__malloc_lock>
 80080ba:	f8d8 3000 	ldr.w	r3, [r8]
 80080be:	461c      	mov	r4, r3
 80080c0:	bb44      	cbnz	r4, 8008114 <_malloc_r+0x88>
 80080c2:	4629      	mov	r1, r5
 80080c4:	4630      	mov	r0, r6
 80080c6:	f7ff ffbf 	bl	8008048 <sbrk_aligned>
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	4604      	mov	r4, r0
 80080ce:	d158      	bne.n	8008182 <_malloc_r+0xf6>
 80080d0:	f8d8 4000 	ldr.w	r4, [r8]
 80080d4:	4627      	mov	r7, r4
 80080d6:	2f00      	cmp	r7, #0
 80080d8:	d143      	bne.n	8008162 <_malloc_r+0xd6>
 80080da:	2c00      	cmp	r4, #0
 80080dc:	d04b      	beq.n	8008176 <_malloc_r+0xea>
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	4639      	mov	r1, r7
 80080e2:	4630      	mov	r0, r6
 80080e4:	eb04 0903 	add.w	r9, r4, r3
 80080e8:	f000 f88a 	bl	8008200 <_sbrk_r>
 80080ec:	4581      	cmp	r9, r0
 80080ee:	d142      	bne.n	8008176 <_malloc_r+0xea>
 80080f0:	6821      	ldr	r1, [r4, #0]
 80080f2:	1a6d      	subs	r5, r5, r1
 80080f4:	4629      	mov	r1, r5
 80080f6:	4630      	mov	r0, r6
 80080f8:	f7ff ffa6 	bl	8008048 <sbrk_aligned>
 80080fc:	3001      	adds	r0, #1
 80080fe:	d03a      	beq.n	8008176 <_malloc_r+0xea>
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	442b      	add	r3, r5
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	f8d8 3000 	ldr.w	r3, [r8]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	bb62      	cbnz	r2, 8008168 <_malloc_r+0xdc>
 800810e:	f8c8 7000 	str.w	r7, [r8]
 8008112:	e00f      	b.n	8008134 <_malloc_r+0xa8>
 8008114:	6822      	ldr	r2, [r4, #0]
 8008116:	1b52      	subs	r2, r2, r5
 8008118:	d420      	bmi.n	800815c <_malloc_r+0xd0>
 800811a:	2a0b      	cmp	r2, #11
 800811c:	d917      	bls.n	800814e <_malloc_r+0xc2>
 800811e:	1961      	adds	r1, r4, r5
 8008120:	42a3      	cmp	r3, r4
 8008122:	6025      	str	r5, [r4, #0]
 8008124:	bf18      	it	ne
 8008126:	6059      	strne	r1, [r3, #4]
 8008128:	6863      	ldr	r3, [r4, #4]
 800812a:	bf08      	it	eq
 800812c:	f8c8 1000 	streq.w	r1, [r8]
 8008130:	5162      	str	r2, [r4, r5]
 8008132:	604b      	str	r3, [r1, #4]
 8008134:	4630      	mov	r0, r6
 8008136:	f000 f82f 	bl	8008198 <__malloc_unlock>
 800813a:	f104 000b 	add.w	r0, r4, #11
 800813e:	1d23      	adds	r3, r4, #4
 8008140:	f020 0007 	bic.w	r0, r0, #7
 8008144:	1ac2      	subs	r2, r0, r3
 8008146:	bf1c      	itt	ne
 8008148:	1a1b      	subne	r3, r3, r0
 800814a:	50a3      	strne	r3, [r4, r2]
 800814c:	e7af      	b.n	80080ae <_malloc_r+0x22>
 800814e:	6862      	ldr	r2, [r4, #4]
 8008150:	42a3      	cmp	r3, r4
 8008152:	bf0c      	ite	eq
 8008154:	f8c8 2000 	streq.w	r2, [r8]
 8008158:	605a      	strne	r2, [r3, #4]
 800815a:	e7eb      	b.n	8008134 <_malloc_r+0xa8>
 800815c:	4623      	mov	r3, r4
 800815e:	6864      	ldr	r4, [r4, #4]
 8008160:	e7ae      	b.n	80080c0 <_malloc_r+0x34>
 8008162:	463c      	mov	r4, r7
 8008164:	687f      	ldr	r7, [r7, #4]
 8008166:	e7b6      	b.n	80080d6 <_malloc_r+0x4a>
 8008168:	461a      	mov	r2, r3
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	42a3      	cmp	r3, r4
 800816e:	d1fb      	bne.n	8008168 <_malloc_r+0xdc>
 8008170:	2300      	movs	r3, #0
 8008172:	6053      	str	r3, [r2, #4]
 8008174:	e7de      	b.n	8008134 <_malloc_r+0xa8>
 8008176:	230c      	movs	r3, #12
 8008178:	6033      	str	r3, [r6, #0]
 800817a:	4630      	mov	r0, r6
 800817c:	f000 f80c 	bl	8008198 <__malloc_unlock>
 8008180:	e794      	b.n	80080ac <_malloc_r+0x20>
 8008182:	6005      	str	r5, [r0, #0]
 8008184:	e7d6      	b.n	8008134 <_malloc_r+0xa8>
 8008186:	bf00      	nop
 8008188:	20004aec 	.word	0x20004aec

0800818c <__malloc_lock>:
 800818c:	4801      	ldr	r0, [pc, #4]	@ (8008194 <__malloc_lock+0x8>)
 800818e:	f000 b871 	b.w	8008274 <__retarget_lock_acquire_recursive>
 8008192:	bf00      	nop
 8008194:	20004c2c 	.word	0x20004c2c

08008198 <__malloc_unlock>:
 8008198:	4801      	ldr	r0, [pc, #4]	@ (80081a0 <__malloc_unlock+0x8>)
 800819a:	f000 b86c 	b.w	8008276 <__retarget_lock_release_recursive>
 800819e:	bf00      	nop
 80081a0:	20004c2c 	.word	0x20004c2c

080081a4 <memset>:
 80081a4:	4402      	add	r2, r0
 80081a6:	4603      	mov	r3, r0
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d100      	bne.n	80081ae <memset+0xa>
 80081ac:	4770      	bx	lr
 80081ae:	f803 1b01 	strb.w	r1, [r3], #1
 80081b2:	e7f9      	b.n	80081a8 <memset+0x4>

080081b4 <strncmp>:
 80081b4:	b510      	push	{r4, lr}
 80081b6:	b16a      	cbz	r2, 80081d4 <strncmp+0x20>
 80081b8:	3901      	subs	r1, #1
 80081ba:	1884      	adds	r4, r0, r2
 80081bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d103      	bne.n	80081d0 <strncmp+0x1c>
 80081c8:	42a0      	cmp	r0, r4
 80081ca:	d001      	beq.n	80081d0 <strncmp+0x1c>
 80081cc:	2a00      	cmp	r2, #0
 80081ce:	d1f5      	bne.n	80081bc <strncmp+0x8>
 80081d0:	1ad0      	subs	r0, r2, r3
 80081d2:	bd10      	pop	{r4, pc}
 80081d4:	4610      	mov	r0, r2
 80081d6:	e7fc      	b.n	80081d2 <strncmp+0x1e>

080081d8 <strncpy>:
 80081d8:	b510      	push	{r4, lr}
 80081da:	3901      	subs	r1, #1
 80081dc:	4603      	mov	r3, r0
 80081de:	b132      	cbz	r2, 80081ee <strncpy+0x16>
 80081e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80081e4:	f803 4b01 	strb.w	r4, [r3], #1
 80081e8:	3a01      	subs	r2, #1
 80081ea:	2c00      	cmp	r4, #0
 80081ec:	d1f7      	bne.n	80081de <strncpy+0x6>
 80081ee:	441a      	add	r2, r3
 80081f0:	2100      	movs	r1, #0
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d100      	bne.n	80081f8 <strncpy+0x20>
 80081f6:	bd10      	pop	{r4, pc}
 80081f8:	f803 1b01 	strb.w	r1, [r3], #1
 80081fc:	e7f9      	b.n	80081f2 <strncpy+0x1a>
	...

08008200 <_sbrk_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d06      	ldr	r5, [pc, #24]	@ (800821c <_sbrk_r+0x1c>)
 8008204:	2300      	movs	r3, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f7f8 fe78 	bl	8000f00 <_sbrk>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_sbrk_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_sbrk_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	20004c28 	.word	0x20004c28

08008220 <__errno>:
 8008220:	4b01      	ldr	r3, [pc, #4]	@ (8008228 <__errno+0x8>)
 8008222:	6818      	ldr	r0, [r3, #0]
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	2000002c 	.word	0x2000002c

0800822c <__libc_init_array>:
 800822c:	b570      	push	{r4, r5, r6, lr}
 800822e:	4d0d      	ldr	r5, [pc, #52]	@ (8008264 <__libc_init_array+0x38>)
 8008230:	4c0d      	ldr	r4, [pc, #52]	@ (8008268 <__libc_init_array+0x3c>)
 8008232:	1b64      	subs	r4, r4, r5
 8008234:	10a4      	asrs	r4, r4, #2
 8008236:	2600      	movs	r6, #0
 8008238:	42a6      	cmp	r6, r4
 800823a:	d109      	bne.n	8008250 <__libc_init_array+0x24>
 800823c:	4d0b      	ldr	r5, [pc, #44]	@ (800826c <__libc_init_array+0x40>)
 800823e:	4c0c      	ldr	r4, [pc, #48]	@ (8008270 <__libc_init_array+0x44>)
 8008240:	f000 f828 	bl	8008294 <_init>
 8008244:	1b64      	subs	r4, r4, r5
 8008246:	10a4      	asrs	r4, r4, #2
 8008248:	2600      	movs	r6, #0
 800824a:	42a6      	cmp	r6, r4
 800824c:	d105      	bne.n	800825a <__libc_init_array+0x2e>
 800824e:	bd70      	pop	{r4, r5, r6, pc}
 8008250:	f855 3b04 	ldr.w	r3, [r5], #4
 8008254:	4798      	blx	r3
 8008256:	3601      	adds	r6, #1
 8008258:	e7ee      	b.n	8008238 <__libc_init_array+0xc>
 800825a:	f855 3b04 	ldr.w	r3, [r5], #4
 800825e:	4798      	blx	r3
 8008260:	3601      	adds	r6, #1
 8008262:	e7f2      	b.n	800824a <__libc_init_array+0x1e>
 8008264:	080084a4 	.word	0x080084a4
 8008268:	080084a4 	.word	0x080084a4
 800826c:	080084a4 	.word	0x080084a4
 8008270:	080084a8 	.word	0x080084a8

08008274 <__retarget_lock_acquire_recursive>:
 8008274:	4770      	bx	lr

08008276 <__retarget_lock_release_recursive>:
 8008276:	4770      	bx	lr

08008278 <memcpy>:
 8008278:	440a      	add	r2, r1
 800827a:	4291      	cmp	r1, r2
 800827c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008280:	d100      	bne.n	8008284 <memcpy+0xc>
 8008282:	4770      	bx	lr
 8008284:	b510      	push	{r4, lr}
 8008286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800828a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800828e:	4291      	cmp	r1, r2
 8008290:	d1f9      	bne.n	8008286 <memcpy+0xe>
 8008292:	bd10      	pop	{r4, pc}

08008294 <_init>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	bf00      	nop
 8008298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829a:	bc08      	pop	{r3}
 800829c:	469e      	mov	lr, r3
 800829e:	4770      	bx	lr

080082a0 <_fini>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	bf00      	nop
 80082a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a6:	bc08      	pop	{r3}
 80082a8:	469e      	mov	lr, r3
 80082aa:	4770      	bx	lr
